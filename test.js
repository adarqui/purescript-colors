// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\a": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\a": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var Show = function (show) {
      this.show = show;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $81 = compare(dictOrd)(a1)(a2);
              if ($81 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["<="] = $less$eq;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["boundedInt"] = boundedInt;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["%"] = $foreign["%"];
  exports["round"] = $foreign.round;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  exports["round"] = round;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $39 = Prelude.compare(dictOrd)(x)(y);
              if ($39 instanceof Prelude.LT) {
                  return x;
              };
              if ($39 instanceof Prelude.EQ) {
                  return x;
              };
              if ($39 instanceof Prelude.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 58, column 1 - line 59, column 1: " + [ $39.constructor.name ]);
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $42 = Prelude.compare(dictOrd)(x)(y);
              if ($42 instanceof Prelude.LT) {
                  return y;
              };
              if ($42 instanceof Prelude.EQ) {
                  return x;
              };
              if ($42 instanceof Prelude.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 67, column 1 - line 68, column 1: " + [ $42.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["max"] = max;
  exports["min"] = min;
  exports["clamp"] = clamp;;
 
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Int = PS["Data.Int"];
  var $$Math = PS["Math"];
  var Data_Ord = PS["Data.Ord"];     
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var rgba = function (red) {
      return function (green) {
          return function (blue) {
              return function (alpha) {
                  var r = Data_Int.toNumber(red) / 255.0;
                  var modPos = function (x) {
                      return function (y) {
                          return $$Math["%"]($$Math["%"](x)(y) + y)(y);
                      };
                  };
                  var minChroma = Data_Ord.min(Prelude.ordInt)(Data_Ord.min(Prelude.ordInt)(red)(green))(blue);
                  var maxChroma = Data_Ord.max(Prelude.ordInt)(Data_Ord.max(Prelude.ordInt)(red)(green))(blue);
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var chroma = maxChroma - minChroma;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Prelude.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color line 54, column 1 - line 55, column 1: " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Prelude.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color line 54, column 1 - line 55, column 1: " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var lighten = function (f) {
      return function (v) {
          var l$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(v.value2 + f);
          return new HSLA(v.value0, v.value1, l$prime, v.value3);
      };
  };
  var hsla = HSLA.create;
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              return new HSLA(h, s, l, 1.0);
          };
      };
  };
  var grayscale = function (l) {
      return hsl(0.0)(0.0)(l);
  }; 
  var darken = function (f) {
      return lighten(-f);
  };
  var cssStringHSLA = function (v) {
      var saturation = Prelude.show(Prelude.showInt)(Data_Int.round(v.value1 * 100.0)) + "%";
      var lightness = Prelude.show(Prelude.showInt)(Data_Int.round(v.value2 * 100.0)) + "%";
      var hue = Prelude.show(Prelude.showInt)(Data_Int.round(v.value0));
      var alpha = Prelude.show(Prelude.showNumber)(v.value3);
      var $42 = v.value3 === 1.0;
      if ($42) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      if (!$42) {
          return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
      };
      throw new Error("Failed pattern match at Color line 135, column 1 - line 136, column 1: " + [ $42.constructor.name ]);
  };
  var complementary = function (v) {
      var h$prime = $$Math["%"](v.value0 + 180.0)(360.0);
      return new HSLA(h$prime, v.value1, v.value2, v.value3);
  };
  exports["darken"] = darken;
  exports["lighten"] = lighten;
  exports["complementary"] = complementary;
  exports["cssStringHSLA"] = cssStringHSLA;
  exports["grayscale"] = grayscale;
  exports["hsl"] = hsl;
  exports["hsla"] = hsla;
  exports["rgb"] = rgb;
  exports["rgba"] = rgba;;
 
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Color = PS["Color"];     
  var yellow = Color.rgb(255)(235)(59);
  var teal = Color.rgb(0)(150)(136);
  var red = Color.rgb(244)(67)(54);
  var purple = Color.rgb(156)(39)(176);
  var pink = Color.rgb(233)(30)(99);
  var orange = Color.rgb(255)(152)(0);
  var lime = Color.rgb(205)(220)(57);
  var lightGreen = Color.rgb(139)(195)(74);
  var lightBlue = Color.rgb(3)(169)(244);
  var indigo = Color.rgb(63)(81)(181);
  var grey = Color.rgb(158)(158)(158);
  var green = Color.rgb(76)(175)(80);
  var deepPurple = Color.rgb(103)(58)(183);
  var deepOrange = Color.rgb(255)(87)(34);
  var cyan = Color.rgb(0)(188)(212);
  var brown = Color.rgb(121)(85)(72);
  var blueGrey = Color.rgb(96)(125)(139);
  var blue = Color.rgb(33)(150)(243);
  var amber = Color.rgb(255)(193)(7);
  exports["blueGrey"] = blueGrey;
  exports["grey"] = grey;
  exports["brown"] = brown;
  exports["deepOrange"] = deepOrange;
  exports["orange"] = orange;
  exports["amber"] = amber;
  exports["yellow"] = yellow;
  exports["lime"] = lime;
  exports["lightGreen"] = lightGreen;
  exports["green"] = green;
  exports["teal"] = teal;
  exports["cyan"] = cyan;
  exports["lightBlue"] = lightBlue;
  exports["blue"] = blue;
  exports["indigo"] = indigo;
  exports["deepPurple"] = deepPurple;
  exports["purple"] = purple;
  exports["pink"] = pink;
  exports["red"] = red;;
 
})(PS["Color.Scheme.MaterialDesign"] = PS["Color.Scheme.MaterialDesign"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($161) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["intercalate"] = intercalate;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  exports["null"] = $$null;
  exports["length"] = $foreign.length;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var last = function (xs) {
      return $foreign.unsafeIndex(xs)(Data_Array.length(xs) - 1);
  };
  exports["last"] = last;;
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toCharCode"] = $foreign.toCharCode;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.length = function (s) {
    return s.length;
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  exports["split"] = $foreign.split;
  exports["length"] = $foreign.length;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  var Type_Proxy = PS["Type.Proxy"];
  var Data_Monoid = PS["Data.Monoid"];     
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, function (x) {
      return new SString(x);
  });
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  exports["SigString"] = SigString;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericString"] = genericString;;
 
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  var acc1 = acc;
                  if (v instanceof Nil) {
                      return acc1;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($365) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($365));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      var b1 = b;
                      if (v1 instanceof Nil) {
                          return b1;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });                                                      
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(v1))(Prelude["<*>"](applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["toList"] = toList;
  exports["reverse"] = reverse;
  exports[":"] = $colon;
  exports["fromFoldable"] = fromFoldable;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var k = v;
                  if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  var k = v;
                  if (v1 instanceof Two && Prelude["<"](dictOrd)(k)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = k;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  var k = v;
                  if (v1 instanceof Two) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = k;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  var k = v;
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  var k = v;
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value4)) {
                      return new Data_Maybe.Just(v1.value5);
                  };
                  var k = v;
                  if (v1 instanceof Three && Prelude["<"](dictOrd)(k)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = k;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  var k = v;
                  if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(k) && Prelude["<="](dictOrd)(k)(v1.value4))) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = k;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value6;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(Prelude["++"](Data_List.semigroupList)(keys(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  }; 
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_dictOrd1) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var dictOrd1 = __copy_dictOrd1;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v instanceof Data_List.Nil) {
                          return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                          return fromZipper(dictOrd1)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                          return fromZipper(dictOrd1)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                          var __tco_dictOrd1 = dictOrd1;
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                          dictOrd1 = __tco_dictOrd1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                          var __tco_dictOrd1 = dictOrd1;
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                          dictOrd1 = __tco_dictOrd1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                          var __tco_dictOrd1 = dictOrd1;
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                          dictOrd1 = __tco_dictOrd1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 147, column 1 - line 148, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      var down = function (__copy_dictOrd1) {
          return function (__copy_ctx) {
              return function (__copy_k) {
                  return function (__copy_v) {
                      return function (__copy_v1) {
                          var dictOrd1 = __copy_dictOrd1;
                          var ctx = __copy_ctx;
                          var k = __copy_k;
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Leaf) {
                                  return up(dictOrd1)(ctx1)(new KickUp(Leaf.value, k1, v2, Leaf.value));
                              };
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Two && Prelude["=="](dictOrd1["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                                  return fromZipper(dictOrd1)(ctx1)(new Two(v1.value0, k1, v2, v1.value3));
                              };
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Two && Prelude["<"](dictOrd1)(k1)(v1.value1)) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx1);
                                  var __tco_v1 = v1.value0;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = k1;
                                  v = v2;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Two) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx1);
                                  var __tco_v1 = v1.value3;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = k1;
                                  v = v2;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Three && Prelude["=="](dictOrd1["__superclass_Prelude.Eq_0"]())(k1)(v1.value1)) {
                                  return fromZipper(dictOrd1)(ctx1)(new Three(v1.value0, k1, v2, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Three && Prelude["=="](dictOrd1["__superclass_Prelude.Eq_0"]())(k1)(v1.value4)) {
                                  return fromZipper(dictOrd1)(ctx1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k1, v2, v1.value6));
                              };
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Three && Prelude["<"](dictOrd1)(k1)(v1.value1)) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx1);
                                  var __tco_v1 = v1.value0;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = k1;
                                  v = v2;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var ctx1 = ctx;
                              var k1 = k;
                              var v2 = v;
                              if (v1 instanceof Three && (Prelude["<"](dictOrd1)(v1.value1)(k1) && Prelude["<="](dictOrd1)(k1)(v1.value4))) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx1);
                                  var __tco_v1 = v1.value3;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = k1;
                                  v = v2;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if (v1 instanceof Three) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value6;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.Map line 147, column 1 - line 148, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
      return down(dictOrd)(Data_List.Nil.value);
  };
  var empty = Leaf.value;
  var fromList = function (dictOrd) {
      return Data_Foldable.foldl(Data_List.foldableList)(function (m) {
          return function (v) {
              return insert(dictOrd)(v.value0)(v.value1)(m);
          };
      })(empty);
  };
  exports["keys"] = keys;
  exports["fromList"] = fromList;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = empty;;
 
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  var applicativeSignal = new Prelude.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var setupFlare = function (v) {
      return function __do() {
          var v1 = v();
          return {
              components: v1.value0, 
              signal: v1.value1
          };
      };
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Prelude.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (v) {
          return UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(functorFlare)(f))(v));
      };
  });
  var fieldset = function (label) {
      return function (v) {
          return UI(function __do() {
              var v1 = v();
              return new Flare([ $foreign.toFieldset(label)(v1.value0) ], v1.value1);
          });
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  return (function () {
                      var signal = Signal_Channel.subscribe(v);
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ v1 ], signal));
                  })()();
              });
          };
      };
  };                           
  var intSlider = function (label) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return createUI($foreign.cIntRange("range")(min)(max))(label)($$default);
              };
          };
      };
  };                                 
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };                           
  var applyFlare = new Prelude.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Prelude["<>"](Prelude.semigroupArray)(v.value0)(v1.value0), Prelude["<*>"](Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Prelude.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Prelude.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Prelude.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.pure(applicativeFlare)(x)));
  });
  exports["setupFlare"] = setupFlare;
  exports["fieldset"] = fieldset;
  exports["intSlider"] = intSlider;
  exports["numberSlider"] = numberSlider;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Test.FlareCheck
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.appendTest = function(parentId) {
    return function(title) {
      return function(doc) {
        return function(elements) {
          return function() {
            var parent = document.getElementById(parentId);
            var fieldset = document.createElement("fieldset");
            fieldset.className = "flarecheck-test";
            var legend = document.createElement("legend");
            legend.textContent = title;
            fieldset.appendChild(legend);

            if (doc !== "") {
              var docEl = document.createElement("p");
              docEl.innerHTML = doc;
              fieldset.appendChild(docEl);
            }

            for (var i = 0; i < elements.length; i++) {
              fieldset.appendChild(elements[i]);
            }

            var output = document.createElement("div");
            output.className = "flarecheck-output";
            fieldset.appendChild(output);

            parent.appendChild(fieldset);

            return output;
          };
        };
      };
    };
  };

  // From http://stackoverflow.com/a/6234804/704831
  exports.escapeHTML = function(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  };

  exports.setText = function(output) {
    return function(str) {
      return function() {
        var pre = output.firstChild;
        if (!pre) {
          pre = document.createElement("pre");
          pre.className = "flarecheck-output-settext";
          output.appendChild(pre);
        }
        pre.textContent = str;
      };
    };
  };

  exports.setHTML = function(output) {
    return function(code) {
      return function() {
        output.innerHTML = code;
      };
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];     
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var $bang = function (dictAttributable) {
      return $$with(dictAttributable);
  };
  var text = function (s) {
      return new Content(s, new Return(Prelude.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), [  ], new Return(Prelude.unit));
      };
  };
  var functorMarkupM = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.map(functorMarkupM)(f)(v.value3));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute([ new Attr(key, value) ]);
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Prelude["<>"](Prelude.semigroupArray)(v.value2)(v1.value0), v.value3);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 79, column 1 - line 82, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Prelude.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Prelude.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.bind(bindMarkupM)(v.value3)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Prelude.Apply(function () {
      return functorMarkupM;
  }, Prelude.ap(monadMarkupM));
  var applicativeMarkupM = new Prelude.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  var semigroupMarkupM = new Prelude.Semigroup(function (x) {
      return function (y) {
          return Control_Apply["*>"](applyMarkupM)(x)(y);
      };
  });
  var monoidMarkup = new Data_Monoid.Monoid(function () {
      return semigroupMarkupM;
  }, new Return(Prelude.unit));
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["!"] = $bang;
  exports["attribute"] = attribute;
  exports["text"] = text;
  exports["parent"] = parent;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidMarkup"] = monoidMarkup;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;;
 
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var span = Text_Smolder_Markup.parent("span");        
  var pre = Text_Smolder_Markup.parent("pre");
  var div = Text_Smolder_Markup.parent("div");
  exports["span"] = span;
  exports["pre"] = pre;
  exports["div"] = div;;
 
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];   
  var title = Text_Smolder_Markup.attribute("title");    
  var style = Text_Smolder_Markup.attribute("style");
  var className = Text_Smolder_Markup.attribute("class");
  exports["title"] = title;
  exports["style"] = style;
  exports["className"] = className;;
 
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Foldable = PS["Data.Foldable"];     
  var Element = (function () {
      function Element(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Element(value0, value1, value2);
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      return function ($18) {
          return Data_Map.fromList(Prelude.ordString)(Prelude.map(Data_List.functorList)(toTuple)(Data_List.toList(Data_Foldable.foldableArray)($18)));
      };
  })();
  var renderMarkup = function (v) {
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Just) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), renderMarkup(v.value1.value0)))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Nothing) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), Data_List.Nil.value))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return Data_List[":"](new Text(v.value0))(renderMarkup(v.value1));
      };
      if (v instanceof Text_Smolder_Markup.Return) {
          return Data_List.Nil.value;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;;
 
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];
  var Data_Monoid = PS["Data.Monoid"];     
  var renderNode = function (v) {
      if (v instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (v1) {
              if (v1 instanceof Data_List.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
          };
          var showAttrs = function (a1) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                      return "=\"" + (v1 + "\"");
                  })(Data_Map.lookup(Prelude.ordString)(k)(a1)));
              };
              return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(pair)(Data_Map.keys(a1)));
          };
          return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value2)));
      };
      if (v instanceof Text_Smolder_Renderer_Util.Text) {
          return v.value0;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var render = function ($8) {
      return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($8)));
  };
  exports["renderNode"] = renderNode;
  exports["render"] = render;;
 
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Test.FlareCheck"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Global = PS["Global"];
  var Type_Proxy = PS["Type.Proxy"];
  var Signal_Channel = PS["Signal.Channel"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Signal = PS["Signal"];
  var Flare = PS["Flare"];     
  var SetText = (function () {
      function SetText(value0) {
          this.value0 = value0;
      };
      SetText.create = function (value0) {
          return new SetText(value0);
      };
      return SetText;
  })();
  var SetHTML = (function () {
      function SetHTML(value0) {
          this.value0 = value0;
      };
      SetHTML.create = function (value0) {
          return new SetHTML(value0);
      };
      return SetHTML;
  })();
  var Flammable = function (spark) {
      this.spark = spark;
  };
  var Interactive = function (interactive) {
      this.interactive = interactive;
  };
  var tooltip = function (tip) {
      return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-tooltip")))(Text_Smolder_HTML_Attributes.title(tip));
  };
  var text = function (s) {
      return Text_Smolder_Markup.text($foreign.escapeHTML(s));
  };
  var spark = function (dict) {
      return dict.spark;
  };
  var render = function (output) {
      return function (v) {
          if (v instanceof SetText) {
              return $foreign.setText(output)(v.value0);
          };
          if (v instanceof SetHTML) {
              return $foreign.setHTML(output)(Text_Smolder_Renderer_String.render(v.value0));
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 325, column 1 - line 328, column 1: " + [ output.constructor.name, v.constructor.name ]);
      };
  };                                                                               
  var interactive = function (dict) {
      return dict.interactive;
  };
  var interactiveFunction = function (dictFlammable) {
      return function (dictInteractive) {
          return new Interactive(function (f) {
              return interactive(dictInteractive)(Prelude["<*>"](Flare.applyUI)(f)(spark(dictFlammable)));
          });
      };
  };
  var highlight = function (syntaxClass) {
      return function (value) {
          return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-" + syntaxClass))(text(value));
      };
  };
  var flareDoc$prime = function (dictInteractive) {
      return function (parentId) {
          return function (title) {
              return function (doc) {
                  return function (x) {
                      var flare = interactive(dictInteractive)(Prelude.pure(Flare.applicativeUI)(x));
                      return function __do() {
                          var v = Flare.setupFlare(flare)();
                          var docString = Data_Maybe.fromMaybe("")(doc);
                          var v1 = $foreign.appendTest(parentId)(title)(docString)(v.components)();
                          return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render(v1))(v.signal))();
                      };
                  };
              };
          };
      };
  };
  var flareCheck$prime = function (dictInteractive) {
      return function (id) {
          return function (label) {
              return flareDoc$prime(dictInteractive)(id)(label)(Data_Maybe.Nothing.value);
          };
      };
  };
  var flareCheck = function (dictInteractive) {
      return flareCheck$prime(dictInteractive)("tests");
  };
  var constructor = function ($$long) {
      var parts = Data_String.split(".")($$long);
      var name = Data_Array_Unsafe.last(parts);
      var modString = (function () {
          var $67 = Data_Array.length(parts) === 1;
          if ($67) {
              return "Data constructor form unknown module";
          };
          if (!$67) {
              return $$long;
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 181, column 1 - line 182, column 1: " + [ $67.constructor.name ]);
      })();
      return tooltip(modString)(highlight("constructor")(name));
  };
  var prettyPrec = function (d) {
      return function (v) {
          if (v instanceof Data_Generic.SProd) {
              var showParen = function (v1) {
                  return function (x) {
                      if (!v1) {
                          return x;
                      };
                      if (v1) {
                          return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text("("))(function () {
                              return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(x)(function () {
                                  return text(")");
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Test.FlareCheck line 203, column 9 - line 204, column 9: " + [ v1.constructor.name, x.constructor.name ]);
                  };
              };
              var $72 = Data_Array["null"](v.value1);
              if ($72) {
                  return constructor(v.value0);
              };
              if (!$72) {
                  return showParen(d > 10)(Prelude.bind(Text_Smolder_Markup.bindMarkupM)(constructor(v.value0))(function () {
                      return Data_Foldable.for_(Text_Smolder_Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v.value1)(function (f) {
                          return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text(" "))(function () {
                              return prettyPrec(11)(f(Prelude.unit));
                          });
                      });
                  }));
              };
              throw new Error("Failed pattern match: " + [ $72.constructor.name ]);
          };
          if (v instanceof Data_Generic.SRecord) {
              var recEntry = function (x) {
                  return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(highlight("record-field")(x.recLabel))(function () {
                      return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text(": "))(function () {
                          return prettyPrec(0)(x.recValue(Prelude.unit));
                      });
                  });
              };
              return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text("{ "))(function () {
                  return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(text(", "))(Prelude.map(Prelude.functorArray)(recEntry)(v.value0)))(function () {
                      return text(" }");
                  });
              });
          };
          if (v instanceof Data_Generic.SBoolean) {
              return tooltip("Boolean")(highlight("boolean")(Prelude.show(Prelude.showBoolean)(v.value0)));
          };
          if (v instanceof Data_Generic.SNumber) {
              return tooltip("Number")(highlight("number")(Prelude.show(Prelude.showNumber)(v.value0)));
          };
          if (v instanceof Data_Generic.SInt) {
              return tooltip("Int")(highlight("number")(Prelude.show(Prelude.showInt)(v.value0)));
          };
          if (v instanceof Data_Generic.SString) {
              var tip = "String of length " + Prelude.show(Prelude.showInt)(Data_String.length(v.value0));
              return tooltip(tip)(highlight("string")(Prelude.show(Prelude.showString)(v.value0)));
          };
          if (v instanceof Data_Generic.SChar) {
              var tip = "Char (with char code " + (Prelude.show(Prelude.showInt)(Data_Char.toCharCode(v.value0)) + ")");
              return tooltip(tip)(highlight("string")(Prelude.show(Prelude.showChar)(v.value0)));
          };
          if (v instanceof Data_Generic.SArray) {
              var tip = "Array of length " + Prelude.show(Prelude.showInt)(Data_Array.length(v.value0));
              return tooltip(tip)(Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text("["))(function () {
                  return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(text(", "))(Prelude.map(Prelude.functorArray)(function (x) {
                      return prettyPrec(0)(x(Prelude.unit));
                  })(v.value0)))(function () {
                      return text("]");
                  });
              }));
          };
          throw new Error("Failed pattern match: " + [ d.constructor.name, v.constructor.name ]);
      };
  };
  var pretty = prettyPrec(0);
  var prettyPrint = function (dictGeneric) {
      return function ($90) {
          return pretty(Data_Generic.toSpine(dictGeneric)($90));
      };
  };
  var interactiveGeneric = function (dictGeneric) {
      return function (ui) {
          return Prelude["<$>"](Flare.functorUI)(function ($95) {
              return SetHTML.create(Text_Smolder_HTML.pre(prettyPrint(dictGeneric)($95)));
          })(ui);
      };
  };                                                                                      
  var interactiveString = new Interactive(interactiveGeneric(Data_Generic.genericString));
  exports["SetText"] = SetText;
  exports["SetHTML"] = SetHTML;
  exports["Interactive"] = Interactive;
  exports["Flammable"] = Flammable;
  exports["flareCheck"] = flareCheck;
  exports["flareCheck'"] = flareCheck$prime;
  exports["interactiveGeneric"] = interactiveGeneric;
  exports["interactive"] = interactive;
  exports["spark"] = spark;
  exports["interactiveString"] = interactiveString;
  exports["interactiveFunction"] = interactiveFunction;;
 
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Test_FlareCheck = PS["Test.FlareCheck"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Color = PS["Color"];
  var Color_Scheme_MaterialDesign = PS["Color.Scheme.MaterialDesign"];
  var Flare = PS["Flare"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var TColor = function (x) {
      return x;
  };
  var Number1 = function (x) {
      return x;
  };
  var Int255 = function (x) {
      return x;
  };
  var interactiveTColor = new Test_FlareCheck.Interactive(function (ui) {
      var pretty = function (v) {
          var repr = Color.cssStringHSLA(v);
          var css = "background-color: " + (repr + (";" + "width: 100%; height: 30px"));
          return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css))(Text_Smolder_Markup.text("")))(function () {
              return Text_Smolder_HTML.pre(Text_Smolder_Markup.text(repr));
          });
      };
      return Prelude["<$>"](Flare.functorUI)(function ($24) {
          return Test_FlareCheck.SetHTML.create(pretty($24));
      })(ui);
  });
  var flammableTColor = new Test_FlareCheck.Flammable(Prelude["<$>"](Flare.functorUI)(TColor)(Flare.fieldset("Color")(Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(Color.hsla)(Flare.numberSlider("Hue")(0.0)(360.0)(1.0)(0.0)))(Flare.numberSlider("Saturation")(0.0)(1.0)(1.0e-2)(0.8)))(Flare.numberSlider("Lightness")(0.0)(1.0)(1.0e-2)(0.4)))(Flare.numberSlider("Alpha")(0.0)(1.0)(1.0e-2)(1.0)))));
  var flammableNumber1 = new Test_FlareCheck.Flammable(Prelude["<$>"](Flare.functorUI)(Number1)(Flare.numberSlider("Number")(0.0)(1.0)(1.0e-2)(0.3)));
  var flammableInt255 = new Test_FlareCheck.Flammable(Prelude["<$>"](Flare.functorUI)(Int255)(Flare.intSlider("Int")(0)(255)(100)));
  var main = function __do() {
      Test_FlareCheck.flareCheck(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColor))("hsla")(Prelude.id(Prelude.categoryFn))();
      Test_FlareCheck.flareCheck(Test_FlareCheck.interactiveFunction(flammableInt255)(Test_FlareCheck.interactiveFunction(flammableInt255)(Test_FlareCheck.interactiveFunction(flammableInt255)(Test_FlareCheck.interactiveFunction(flammableNumber1)(interactiveTColor)))))("rgba :: Int -> Int -> Int -> Number -> Color")(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return Color.rgba(v)(v1)(v2)(v3);
                  };
              };
          };
      })();
      Test_FlareCheck.flareCheck(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveString))("cssStringHSLA")(function (v) {
          return Color.cssStringHSLA(v);
      })();
      Test_FlareCheck.flareCheck(Test_FlareCheck.interactiveFunction(flammableNumber1)(interactiveTColor))("greyscale")(function (v) {
          return Color.grayscale(v);
      })();
      Test_FlareCheck.flareCheck(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColor))("complementary")(function (v) {
          return Color.complementary(v);
      })();
      Test_FlareCheck.flareCheck(Test_FlareCheck.interactiveFunction(flammableNumber1)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColor)))("lighten")(function (v) {
          return function (v1) {
              return Color.lighten(v)(v1);
          };
      })();
      Test_FlareCheck.flareCheck(Test_FlareCheck.interactiveFunction(flammableNumber1)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColor)))("darken")(function (v) {
          return function (v1) {
              return Color.darken(v)(v1);
          };
      })();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("red")(Color_Scheme_MaterialDesign.red)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("pink")(Color_Scheme_MaterialDesign.pink)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("purple")(Color_Scheme_MaterialDesign.purple)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("deepPurple")(Color_Scheme_MaterialDesign.deepPurple)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("indigo")(Color_Scheme_MaterialDesign.indigo)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("blue")(Color_Scheme_MaterialDesign.blue)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("lightBlue")(Color_Scheme_MaterialDesign.lightBlue)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("cyan")(Color_Scheme_MaterialDesign.cyan)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("teal")(Color_Scheme_MaterialDesign.teal)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("green")(Color_Scheme_MaterialDesign.green)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("lightGreen")(Color_Scheme_MaterialDesign.lightGreen)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("lime")(Color_Scheme_MaterialDesign.lime)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("yellow")(Color_Scheme_MaterialDesign.yellow)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("amber")(Color_Scheme_MaterialDesign.amber)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("orange")(Color_Scheme_MaterialDesign.orange)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("deepOrange")(Color_Scheme_MaterialDesign.deepOrange)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("brown")(Color_Scheme_MaterialDesign.brown)();
      Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("grey")(Color_Scheme_MaterialDesign.grey)();
      return Test_FlareCheck["flareCheck'"](interactiveTColor)("tests-md")("blueGrey")(Color_Scheme_MaterialDesign.blueGrey)();
  };
  exports["Int255"] = Int255;
  exports["Number1"] = Number1;
  exports["TColor"] = TColor;
  exports["main"] = main;
  exports["flammableTColor"] = flammableTColor;
  exports["interactiveTColor"] = interactiveTColor;
  exports["flammableNumber1"] = flammableNumber1;
  exports["flammableInt255"] = flammableInt255;;
 
})(PS["Test.Interactive"] = PS["Test.Interactive"] || {});

PS["Test.Interactive"].main();
