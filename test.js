// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  // module Color
  // jshint node: true

  "use strict";

  // Parse a string which guaranteed to be of the form `[0-9a-f]{1,2}`.
  exports.parseHex = function(str) {
    return parseInt(str, 16);
  };

  // Convert a number between 0 and 255 to a hex value between 00 and ff.
  exports.toHex = function(n) {
    var str = n.toString(16);
    if (str.length == 1) {
      return "0" + str;
    }
    return str;
  };
 
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;            

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\a": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\a": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var not = function (dict) {
      return dict.not;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var functorFn = new Functor(compose(semigroupoidFn));
  var compare = function (dict) {
      return dict.compare;
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $81 = compare(dictOrd)(a1)(a2);
              if ($81 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["<="] = $less$eq;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $eq$less$less = function (dictBind) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](dictBind)(m)(f);
          };
      };
  };
  var $less$eq$less = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return $eq$less$less(dictBind)(f)(g(a));
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return Prelude[">>="](dictBind)(m)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["join"] = join;
  exports["<=<"] = $less$eq$less;;
 
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };                                         
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];     
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;;
 
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];     
  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
  };
  exports["Alternative"] = Alternative;;
 
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["defer"] = defer;;
 
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$times = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
          };
      };
  };
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;
  exports["<*"] = $less$times;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                   
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 180, column 1 - line 199, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runConj = function (v) {
      return v;
  };
  var monoidConj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictBooleanAlgebra);
      }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  exports["Conj"] = Conj;
  exports["runConj"] = runConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;;
 
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictBooleanAlgebra);
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($161) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $91 = cmp(v.value0)(v1);
                          if ($91 instanceof Prelude.LT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($164) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($165) {
                      return Data_Monoid_Disj.Disj(p($165));
                  })($164));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($166) {
              return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($166));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($167) {
                  return !elem(dictFoldable)(dictEq)(x)($167);
              };
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($168) {
                  return Data_Monoid_Conj.runConj(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($169) {
                      return Data_Monoid_Conj.Conj(p($169));
                  })($168));
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["minimumBy"] = minimumBy;
  exports["notElem"] = notElem;
  exports["elem"] = elem;
  exports["all"] = all;
  exports["any"] = any;
  exports["intercalate"] = intercalate;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequenceDefault"] = sequenceDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["fst"] = fst;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["null"] = $$null;
  exports["slice"] = $foreign.slice;
  exports["snoc"] = $foreign.snoc;
  exports["length"] = $foreign.length;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };                       

  exports.cos = Math.cos;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;      
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["%"] = $foreign["%"];
  exports["sqrt"] = $foreign.sqrt;
  exports["sin"] = $foreign.sin;
  exports["round"] = $foreign.round;
  exports["pow"] = $foreign.pow;
  exports["cos"] = $foreign.cos;
  exports["atan2"] = $foreign.atan2;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  exports["round"] = round;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];     
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  exports["on"] = on;
  exports["runFn4"] = $foreign.runFn4;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $39 = Prelude.compare(dictOrd)(x)(y);
              if ($39 instanceof Prelude.LT) {
                  return x;
              };
              if ($39 instanceof Prelude.EQ) {
                  return x;
              };
              if ($39 instanceof Prelude.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 58, column 1 - line 59, column 1: " + [ $39.constructor.name ]);
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $42 = Prelude.compare(dictOrd)(x)(y);
              if ($42 instanceof Prelude.LT) {
                  return y;
              };
              if ($42 instanceof Prelude.EQ) {
                  return x;
              };
              if ($42 instanceof Prelude.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 67, column 1 - line 68, column 1: " + [ $42.constructor.name ]);
          };
      };
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return Data_Function.on(Prelude.compare(dictOrd))(f);
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return Prelude["<="](dictOrd)(low)(x) && Prelude["<="](dictOrd)(x)(hi);
              };
          };
      };
  };
  exports["max"] = max;
  exports["min"] = min;
  exports["between"] = between;
  exports["clamp"] = clamp;
  exports["comparing"] = comparing;;
 
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.count = function (p) {
    return function (s) {
      for (var i = 0; i < s.length && p(s.charAt(i)); i++); {}
      return i;
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toCharCode"] = $foreign.toCharCode;
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromChar = Data_Char.toString;
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.count(p)(s))(s);
      };
  };
  var contains = function (x) {
      return function (s) {
          return Data_Maybe.isJust(indexOf(x)(s));
      };
  };                                                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["dropWhile"] = dropWhile;
  exports["indexOf"] = indexOf;
  exports["contains"] = contains;
  exports["fromChar"] = fromChar;
  exports["charAt"] = charAt;
  exports["joinWith"] = $foreign.joinWith;
  exports["trim"] = $foreign.trim;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["take"] = $foreign.take;
  exports["count"] = $foreign.count;
  exports["replace"] = $foreign.replace;
  exports["length"] = $foreign.length;
  exports["fromCharArray"] = $foreign.fromCharArray;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports["regex'"] = function (s1) {
    return function (s2) {
      return new RegExp(s1, s2);
    };
  };

  exports.test = function (r) {
    return function (s) {
      return r.test(s);
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];                                            
  var renderFlags = function (f) {
      return (function () {
          if (f.global) {
              return "g";
          };
          if (!f.global) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.global.constructor.name ]);
      })() + ((function () {
          if (f.ignoreCase) {
              return "i";
          };
          if (!f.ignoreCase) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.ignoreCase.constructor.name ]);
      })() + ((function () {
          if (f.multiline) {
              return "m";
          };
          if (!f.multiline) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.multiline.constructor.name ]);
      })() + ((function () {
          if (f.sticky) {
              return "y";
          };
          if (!f.sticky) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.sticky.constructor.name ]);
      })() + (function () {
          if (f.unicode) {
              return "u";
          };
          if (!f.unicode) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.unicode.constructor.name ]);
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return {
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["match"] = match;
  exports["parseFlags"] = parseFlags;
  exports["renderFlags"] = renderFlags;
  exports["regex"] = regex;
  exports["test"] = $foreign.test;;
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Color"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var $$Math = PS["Math"];     
  var RGB = (function () {
      function RGB() {

      };
      RGB.value = new RGB();
      return RGB;
  })();
  var HSL = (function () {
      function HSL() {

      };
      HSL.value = new HSL();
      return HSL;
  })();
  var LCh = (function () {
      function LCh() {

      };
      LCh.value = new LCh();
      return LCh;
  })();
  var Lab = (function () {
      function Lab() {

      };
      Lab.value = new Lab();
      return Lab;
  })();
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var toRGBA$prime = function (v) {
      var h$prime = v.value0 / 60.0;
      var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
      var m = v.value2 - chr / 2.0;
      var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
      var col = (function () {
          if (h$prime < 1.0) {
              return {
                  r: chr, 
                  g: x, 
                  b: 0.0
              };
          };
          if (1.0 <= h$prime && h$prime < 2.0) {
              return {
                  r: x, 
                  g: chr, 
                  b: 0.0
              };
          };
          if (2.0 <= h$prime && h$prime < 3.0) {
              return {
                  r: 0.0, 
                  g: chr, 
                  b: x
              };
          };
          if (3.0 <= h$prime && h$prime < 4.0) {
              return {
                  r: 0.0, 
                  g: x, 
                  b: chr
              };
          };
          if (4.0 <= h$prime && h$prime < 5.0) {
              return {
                  r: x, 
                  g: 0.0, 
                  b: chr
              };
          };
          if (Prelude.otherwise) {
              return {
                  r: chr, 
                  g: 0.0, 
                  b: x
              };
          };
          throw new Error("Failed pattern match at Color line 280, column 1 - line 281, column 1: " + [  ]);
      })();
      return {
          r: col.r + m, 
          g: col.g + m, 
          b: col.b + m, 
          a: v.value3
      };
  };
  var toXYZ = function (c) {
      var rec = toRGBA$prime(c);
      var finv = function (c1) {
          if (c1 <= 4.045e-2) {
              return c1 / 12.92;
          };
          if (Prelude.otherwise) {
              return $$Math.pow((c1 + 5.500000000000001e-2) / 1.055)(2.4);
          };
          throw new Error("Failed pattern match at Color line 299, column 1 - line 300, column 1: " + [ c1.constructor.name ]);
      };
      var g = finv(rec.g);
      var r = finv(rec.r);
      var b = finv(rec.b);
      var x = 0.4124 * r + 0.35760000000000003 * g + 0.18050000000000002 * b;
      var y = 0.21259999999999998 * r + 0.7152000000000001 * g + 7.22e-2 * b;
      var z = 1.93e-2 * r + 0.1192 * g + 0.9505000000000001 * b;
      return {
          x: x, 
          y: y, 
          z: z
      };
  };
  var toRGBA = function (v) {
      var c = toRGBA$prime(v);
      var g = Data_Int.round(255.0 * c.g);
      var r = Data_Int.round(255.0 * c.r);
      var b = Data_Int.round(255.0 * c.b);
      return {
          r: r, 
          g: g, 
          b: b, 
          a: v.value3
      };
  };
  var toHexString = function (color) {
      var c = toRGBA(color);
      return "#" + ($foreign.toHex(c.r) + ($foreign.toHex(c.g) + $foreign.toHex(c.b)));
  };
  var toHSLA = function (v) {
      return {
          h: v.value0, 
          s: v.value1, 
          l: v.value2, 
          a: v.value3
      };
  }; 
  var modPos = function (x) {
      return function (y) {
          return $$Math["%"]($$Math["%"](x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Prelude.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Prelude.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Prelude.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Prelude.ordInt)(Data_Ord.max(Prelude.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Prelude.ordInt)(Data_Ord.min(Prelude.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Prelude.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color line 110, column 1 - line 111, column 1: " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Prelude.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color line 110, column 1 - line 111, column 1: " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var rgba$prime = function (r) {
      return function (g) {
          return function (b) {
              return function (a) {
                  return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
              };
          };
      };
  };
  var rgb$prime = function (r) {
      return function (g) {
          return function (b) {
              return rgba$prime(r)(g)(b)(1.0);
          };
      };
  };
  var xyz = function (x) {
      return function (y) {
          return function (z) {
              var f = function (c) {
                  if (c <= 3.1307999999999996e-3) {
                      return 12.92 * c;
                  };
                  if (Prelude.otherwise) {
                      return 1.055 * $$Math.pow(c)(1.0 / 2.4) - 5.500000000000001e-2;
                  };
                  throw new Error("Failed pattern match at Color line 182, column 5 - line 184, column 5: " + [ c.constructor.name ]);
              };
              var g = f(-0.9689 * x + 1.8758 * y + 4.15e-2 * z);
              var r = f(3.2406 * x - 1.5372 * y - 0.4986 * z);
              var b = f((5.5700000000000006e-2 * x - 0.20400000000000001 * y) + 1.057 * z);
              return rgb$prime(r)(g)(b);
          };
      };
  };
  var luminance = function (col) {
      var val = toRGBA$prime(col);
      var f = function (x) {
          var $32 = x <= 3.9279999999999995e-2;
          if ($32) {
              return x / 12.92;
          };
          if (!$32) {
              return $$Math.pow((x + 5.500000000000001e-2) / 1.055)(2.4);
          };
          throw new Error("Failed pattern match at Color line 495, column 1 - line 496, column 1: " + [ $32.constructor.name ]);
      };
      var g = f(val.g);
      var r = f(val.r);
      var b = f(val.b);
      return 0.21259999999999998 * r + 0.7152000000000001 * g + 7.22e-2 * b;
  };
  var interpolate = function (fraction) {
      return function (a) {
          return function (b) {
              return a + fraction * (b - a);
          };
      };
  };
  var interpolateAngle = function (fraction) {
      return function (a) {
          return function (b) {
              var paths = [ {
                  from: a, 
                  to: b
              }, {
                  from: a, 
                  to: b + 360.0
              }, {
                  from: a + 360.0, 
                  to: b
              } ];
              var distance = function (v) {
                  return $$Math.abs(v.to - v.from);
              };
              var shortest = Data_Maybe_Unsafe.fromJust(Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Prelude.ordNumber)(distance))(paths));
              return interpolate(fraction)(shortest.from)(shortest.to);
          };
      };
  };
  var hsla = function (h) {
      return function (s) {
          return function (l) {
              return function (a) {
                  var s$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(s);
                  var l$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(l);
                  var h$prime = modPos(h)(360.0);
                  var a$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(a);
                  return new HSLA(h$prime, s$prime, l$prime, a$prime);
              };
          };
      };
  };
  var lighten = function (f) {
      return function (v) {
          return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
      };
  };
  var rotateHue = function (angle) {
      return function (v) {
          return hsla(v.value0 + angle)(v.value1)(v.value2)(v.value3);
      };
  };
  var saturate = function (f) {
      return function (v) {
          return hsla(v.value0)(v.value1 + f)(v.value2)(v.value3);
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              return hsla(h)(s)(l)(1.0);
          };
      };
  };
  var white = hsl(0.0)(0.0)(1.0);
  var graytone = function (l) {
      return hsl(0.0)(0.0)(l);
  };
  var fromInt = function (m) {
      var n = Data_Ord.clamp(Prelude.ordInt)(0)(16777215)(m);
      var r = n >> 16 & 255;
      var g = n >> 8 & 255;
      var b = n & 255;
      return rgb(r)(g)(b);
  };
  var fromHexString = function (str) {
      var isShort = Data_String.length(str) === 4;
      var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
      var single = "(" + ("[0-9a-f]" + ")");
      var variant = (function () {
          if (isShort) {
              return single + (single + single);
          };
          if (!isShort) {
              return pair + (pair + pair);
          };
          throw new Error("Failed pattern match at Color line 227, column 1 - line 228, column 1: " + [ isShort.constructor.name ]);
      })();
      var pattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
      return Prelude.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(pattern)(str))(function (v) {
          return Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($foreign.parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array["!!"](v)(1))))(function (v1) {
              return Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($foreign.parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array["!!"](v)(2))))(function (v2) {
                  return Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($foreign.parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array["!!"](v)(3))))(function (v3) {
                      if (isShort) {
                          return Prelude.pure(Data_Maybe.applicativeMaybe)(rgb((16 * v1 | 0) + v1 | 0)((16 * v2 | 0) + v2 | 0)((16 * v3 | 0) + v3 | 0));
                      };
                      if (!isShort) {
                          return Prelude.pure(Data_Maybe.applicativeMaybe)(rgb(v1)(v2)(v3));
                      };
                      throw new Error("Failed pattern match at Color line 227, column 1 - line 228, column 1: " + [ isShort.constructor.name ]);
                  });
              });
          });
      });
  }; 
  var desaturate = function (f) {
      return saturate(-f);
  };
  var darken = function (f) {
      return lighten(-f);
  };
  var d65 = {
      xn: 0.9504699999999999, 
      yn: 1.0, 
      zn: 1.08883
  };
  var lab = function (l) {
      return function (a) {
          return function (b) {
              var l$prime = (l + 16.0) / 116.0;
              var delta = 6.0 / 29.0;
              var finv = function (t) {
                  if (t > delta) {
                      return $$Math.pow(t)(3.0);
                  };
                  if (Prelude.otherwise) {
                      return 3.0 * delta * delta * (t - 4.0 / 29.0);
                  };
                  throw new Error("Failed pattern match at Color line 199, column 1 - line 200, column 1: " + [ t.constructor.name ]);
              };
              var x = d65.xn * finv(l$prime + a / 500.0);
              var y = d65.yn * finv(l$prime);
              var z = d65.zn * finv(l$prime - b / 200.0);
              return xyz(x)(y)(z);
          };
      };
  };
  var lch = function (l) {
      return function (c) {
          return function (h) {
              var deg2rad = $$Math.pi / 180.0;
              var b = c * $$Math.sin(h * deg2rad);
              var a = c * $$Math.cos(h * deg2rad);
              return lab(l)(a)(b);
          };
      };
  };
  var toLab = function (col) {
      var rec = toXYZ(col);
      var cut = $$Math.pow(6.0 / 29.0)(3.0);
      var f = function (t) {
          if (t > cut) {
              return $$Math.pow(t)(1.0 / 3.0);
          };
          if (Prelude.otherwise) {
              return (1.0 / 3.0) * $$Math.pow(29.0 / 6.0)(2.0) * t + 4.0 / 29.0;
          };
          throw new Error("Failed pattern match at Color line 317, column 1 - line 318, column 1: " + [ t.constructor.name ]);
      };
      var fy = f(rec.y / d65.yn);
      var l = 116.0 * fy - 16.0;
      var b = 200.0 * (fy - f(rec.z / d65.zn));
      var a = 500.0 * (f(rec.x / d65.xn) - fy);
      return {
          l: l, 
          a: a, 
          b: b
      };
  };
  var toLCh = function (col) {
      var rec = toLab(col);
      var rad2deg = 180.0 / $$Math.pi;
      var c = $$Math.sqrt(rec.a * rec.a + rec.b * rec.b);
      var h = modPos($$Math.atan2(rec.b)(rec.a) * rad2deg)(360.0);
      return {
          l: rec.l, 
          c: c, 
          h: h
      };
  };
  var mix = function (v) {
      return function (c1) {
          return function (c2) {
              return function (frac) {
                  if (v instanceof HSL) {
                      var t = toHSLA(c2);
                      var f = toHSLA(c1);
                      return hsla(interpolateAngle(frac)(f.h)(t.h))(interpolate(frac)(f.s)(t.s))(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a));
                  };
                  if (v instanceof RGB) {
                      var t = toRGBA$prime(c2);
                      var f = toRGBA$prime(c1);
                      return rgba$prime(interpolate(frac)(f.r)(t.r))(interpolate(frac)(f.g)(t.g))(interpolate(frac)(f.b)(t.b))(interpolate(frac)(f.a)(t.a));
                  };
                  if (v instanceof LCh) {
                      var t = toLCh(c2);
                      var f = toLCh(c1);
                      return lch(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.c)(t.c))(interpolateAngle(frac)(f.h)(t.h));
                  };
                  if (v instanceof Lab) {
                      var t = toLab(c2);
                      var f = toLab(c1);
                      return lab(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a))(interpolate(frac)(f.b)(t.b));
                  };
                  throw new Error("Failed pattern match at Color line 449, column 1 - line 450, column 1: " + [ v.constructor.name, c1.constructor.name, c2.constructor.name, frac.constructor.name ]);
              };
          };
      };
  };
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Prelude.show(Prelude.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Prelude.show(Prelude.showNumber)(v.value3);
      var $68 = v.value3 === 1.0;
      if ($68) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      if (!$68) {
          return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
      };
      throw new Error("Failed pattern match at Color line 360, column 1 - line 361, column 1: " + [ $68.constructor.name ]);
  };
  var contrast = function (c1) {
      return function (c2) {
          var l2 = luminance(c2);
          var l1 = luminance(c1);
          var $73 = l1 > l2;
          if ($73) {
              return (l1 + 5.0e-2) / (l2 + 5.0e-2);
          };
          if (!$73) {
              return (l2 + 5.0e-2) / (l1 + 5.0e-2);
          };
          throw new Error("Failed pattern match at Color line 513, column 1 - line 514, column 1: " + [ $73.constructor.name ]);
      };
  };
  var isReadable = function (c1) {
      return function (c2) {
          return contrast(c1)(c2) > 4.5;
      };
  };
  var complementary = rotateHue(180.0);
  var brightness = function (col) {
      var c = toRGBA$prime(col);
      return (299.0 * c.r + 587.0 * c.g + 114.0 * c.b) / 1000.0;
  };
  var isLight = function (c) {
      return brightness(c) > 0.5;
  };
  var black = hsl(0.0)(0.0)(0.0);
  var textColor = function (c) {
      if (isLight(c)) {
          return black;
      };
      if (Prelude.otherwise) {
          return white;
      };
      throw new Error("Failed pattern match at Color line 541, column 1 - line 542, column 1: " + [ c.constructor.name ]);
  };
  exports["RGB"] = RGB;
  exports["HSL"] = HSL;
  exports["LCh"] = LCh;
  exports["Lab"] = Lab;
  exports["textColor"] = textColor;
  exports["isReadable"] = isReadable;
  exports["isLight"] = isLight;
  exports["contrast"] = contrast;
  exports["luminance"] = luminance;
  exports["brightness"] = brightness;
  exports["mix"] = mix;
  exports["desaturate"] = desaturate;
  exports["saturate"] = saturate;
  exports["darken"] = darken;
  exports["lighten"] = lighten;
  exports["complementary"] = complementary;
  exports["rotateHue"] = rotateHue;
  exports["graytone"] = graytone;
  exports["white"] = white;
  exports["black"] = black;
  exports["cssStringHSLA"] = cssStringHSLA;
  exports["toHexString"] = toHexString;
  exports["toLCh"] = toLCh;
  exports["toLab"] = toLab;
  exports["toXYZ"] = toXYZ;
  exports["toRGBA'"] = toRGBA$prime;
  exports["toRGBA"] = toRGBA;
  exports["toHSLA"] = toHSLA;
  exports["fromInt"] = fromInt;
  exports["fromHexString"] = fromHexString;
  exports["lch"] = lch;
  exports["lab"] = lab;
  exports["xyz"] = xyz;
  exports["hsl"] = hsl;
  exports["hsla"] = hsla;
  exports["rgb'"] = rgb$prime;
  exports["rgba'"] = rgba$prime;
  exports["rgb"] = rgb;
  exports["rgba"] = rgba;;
 
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Color = PS["Color"];     
  var Multiply = (function () {
      function Multiply() {

      };
      Multiply.value = new Multiply();
      return Multiply;
  })();
  var Screen = (function () {
      function Screen() {

      };
      Screen.value = new Screen();
      return Screen;
  })();
  var Overlay = (function () {
      function Overlay() {

      };
      Overlay.value = new Overlay();
      return Overlay;
  })();
  var blendChannel = function (v) {
      return function (b) {
          return function (f) {
              if (v instanceof Multiply) {
                  return b * f;
              };
              if (v instanceof Screen) {
                  return 1.0 - (1.0 - b) * (1.0 - f);
              };
              if (v instanceof Overlay) {
                  if (b < 0.5) {
                      return 2.0 * b * f;
                  };
                  if (Prelude.otherwise) {
                      return 1.0 - 2.0 * (1.0 - b) * (1.0 - f);
                  };
              };
              throw new Error("Failed pattern match at Color.Blending line 13, column 1 - line 14, column 1: " + [ v.constructor.name, b.constructor.name, f.constructor.name ]);
          };
      };
  };
  var blend = function (mode) {
      return function (c1) {
          return function (c2) {
              var v2 = Color["toRGBA'"](c2);
              var v1 = Color["toRGBA'"](c1);
              var r = blendChannel(mode)(v1.r)(v2.r);
              var g = blendChannel(mode)(v1.g)(v2.g);
              var b = blendChannel(mode)(v1.b)(v2.b);
              var a = (v1.a + v2.a) / 2.0;
              return Color["rgba'"](r)(g)(b)(a);
          };
      };
  };
  exports["Multiply"] = Multiply;
  exports["Screen"] = Screen;
  exports["Overlay"] = Overlay;
  exports["blend"] = blend;;
 
})(PS["Color.Blending"] = PS["Color.Blending"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.ST

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["writeSTRef"] = $foreign.writeSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  exports["pushSTArray"] = pushSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;;
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];     
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function (f) {
      return function (b) {
          return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Control_Monad_ST.newSTRef(b)();
              (function () {
                  while (!(function __do() {
                      var v2 = Control_Monad_ST.readSTRef(v1)();
                      var $12 = f(v2);
                      if ($12 instanceof Data_Maybe.Nothing) {
                          return true;
                      };
                      if ($12 instanceof Data_Maybe.Just) {
                          Data_Array_ST.pushSTArray(v)($12.value0.value0)();
                          Control_Monad_ST.writeSTRef(v1)($12.value0.value1)();
                          return false;
                      };
                      throw new Error("Failed pattern match at Data.Unfoldable line 29, column 1 - line 49, column 1: " + [ $12.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return v;
          }));
      };
  });
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;;
 
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 270, column 1 - line 271, column 1: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 252, column 1: " + [ v.constructor.name ]);
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Cons && v(v1.value0)) {
              var $132 = span(v)(v1.value1);
              return {
                  init: new Cons(v1.value0, $132.init), 
                  rest: $132.rest
              };
          };
          return {
              init: Nil.value, 
              rest: v1
          };
      };
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Cons(x, reverse(xs)));
      };
  };
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Nil) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Cons) {
                          var __tco_acc = new Cons(v1.value0, acc);
                          var __tco_v = v - 1;
                          var __tco_v1 = v1.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 490, column 1 - line 491, column 1: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Nil) {
                                  return acc;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 654, column 1 - line 655, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $209 = start > end;
                  if ($209) {
                      return 1;
                  };
                  if (!$209) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ $209.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())(Nil.value));
          };
      };
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Cons && v.value1 instanceof Nil) {
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var insertBy = function (v) {
      return function (x) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return new Cons(x, Nil.value);
              };
              if (v1 instanceof Cons) {
                  var $226 = v(x)(v1.value0);
                  if ($226 instanceof Prelude.GT) {
                      return new Cons(v1.value0, insertBy(v)(x)(v1.value1));
                  };
                  return new Cons(x, v1);
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var init = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      var go = function (__copy_v1) {
          return function (__copy_acc) {
              var v1 = __copy_v1;
              var acc = __copy_acc;
              tco: while (true) {
                  if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                      return acc;
                  };
                  if (v1 instanceof Cons) {
                      var __tco_v1 = v1.value1;
                      var __tco_acc = new Cons(v1.value0, acc);
                      v1 = __tco_v1;
                      acc = __tco_acc;
                      continue tco;
                  };
                  return acc;
              };
          };
      };
      return Data_Maybe.Just.create(reverse(go(v)(Nil.value)));
  };                     
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 236, column 1 - line 237, column 1: " + [ v.constructor.name ]);
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($365) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($365));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var concatMap = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return Prelude["<>"](semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };                                                       
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(v1))(Prelude["<*>"](applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["zipWith"] = zipWith;
  exports["span"] = span;
  exports["drop"] = drop;
  exports["take"] = take;
  exports["concatMap"] = concatMap;
  exports["reverse"] = reverse;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["snoc"] = snoc;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["many"] = many;
  exports["some"] = some;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Color = PS["Color"];     
  var yellowgreen = Color.rgb(154)(205)(50);
  var yellow = Color.rgb(255)(255)(0);
  var whitesmoke = Color.rgb(245)(245)(245);
  var wheat = Color.rgb(245)(222)(179);
  var violet = Color.rgb(238)(130)(238);
  var turquoise = Color.rgb(64)(224)(208);
  var tomato = Color.rgb(255)(99)(71);
  var thistle = Color.rgb(216)(191)(216);
  var teal = Color.rgb(0)(128)(128);
  var tan = Color.rgb(210)(180)(140);
  var steelblue = Color.rgb(70)(130)(180);
  var springgreen = Color.rgb(0)(255)(127);
  var snow = Color.rgb(255)(250)(250);
  var slategrey = Color.rgb(112)(128)(144);
  var slategray = Color.rgb(112)(128)(144);
  var slateblue = Color.rgb(106)(90)(205);
  var skyblue = Color.rgb(135)(206)(235);
  var silver = Color.rgb(192)(192)(192);
  var sienna = Color.rgb(160)(82)(45);
  var seashell = Color.rgb(255)(245)(238);
  var seagreen = Color.rgb(46)(139)(87);
  var sandybrown = Color.rgb(244)(164)(96);
  var salmon = Color.rgb(250)(128)(114);
  var saddlebrown = Color.rgb(139)(69)(19);
  var royalblue = Color.rgb(65)(105)(225);
  var rosybrown = Color.rgb(188)(143)(143);
  var red = Color.rgb(255)(0)(0);
  var purple = Color.rgb(128)(0)(128);
  var powderblue = Color.rgb(176)(224)(230);
  var plum = Color.rgb(221)(160)(221);
  var pink = Color.rgb(255)(192)(203);
  var peru = Color.rgb(205)(133)(63);
  var peachpuff = Color.rgb(255)(218)(185);
  var papayawhip = Color.rgb(255)(239)(213);
  var palevioletred = Color.rgb(219)(112)(147);
  var paleturquoise = Color.rgb(175)(238)(238);
  var palegreen = Color.rgb(152)(251)(152);
  var palegoldenrod = Color.rgb(238)(232)(170);
  var orchid = Color.rgb(218)(112)(214);
  var orangered = Color.rgb(255)(69)(0);
  var orange = Color.rgb(255)(165)(0);
  var olivedrab = Color.rgb(107)(142)(35);
  var olive = Color.rgb(128)(128)(0);
  var oldlace = Color.rgb(253)(245)(230);
  var navy = Color.rgb(0)(0)(128);
  var navajowhite = Color.rgb(255)(222)(173);
  var moccasin = Color.rgb(255)(228)(181);
  var mistyrose = Color.rgb(255)(228)(225);
  var mintcream = Color.rgb(245)(255)(250);
  var midnightblue = Color.rgb(25)(25)(112);
  var mediumvioletred = Color.rgb(199)(21)(133);
  var mediumturquoise = Color.rgb(72)(209)(204);
  var mediumspringgreen = Color.rgb(0)(250)(154);
  var mediumslateblue = Color.rgb(123)(104)(238);
  var mediumseagreen = Color.rgb(60)(179)(113);
  var mediumpurple = Color.rgb(147)(112)(219);
  var mediumorchid = Color.rgb(186)(85)(211);
  var mediumblue = Color.rgb(0)(0)(205);
  var mediumaquamarine = Color.rgb(102)(205)(170);
  var maroon = Color.rgb(128)(0)(0);
  var magenta = Color.rgb(255)(0)(255);
  var linen = Color.rgb(250)(240)(230);
  var limegreen = Color.rgb(50)(205)(50);
  var lime = Color.rgb(0)(255)(0);
  var lightyellow = Color.rgb(255)(255)(224);
  var lightsteelblue = Color.rgb(176)(196)(222);
  var lightslategrey = Color.rgb(119)(136)(153);
  var lightslategray = Color.rgb(119)(136)(153);
  var lightskyblue = Color.rgb(135)(206)(250);
  var lightseagreen = Color.rgb(32)(178)(170);
  var lightsalmon = Color.rgb(255)(160)(122);
  var lightpink = Color.rgb(255)(182)(193);
  var lightgrey = Color.rgb(211)(211)(211);
  var lightgreen = Color.rgb(144)(238)(144);
  var lightgray = Color.rgb(211)(211)(211);
  var lightgoldenrodyellow = Color.rgb(250)(250)(210);
  var lightcyan = Color.rgb(224)(255)(255);
  var lightcoral = Color.rgb(240)(128)(128);
  var lightblue = Color.rgb(173)(216)(230);
  var lemonchiffon = Color.rgb(255)(250)(205);
  var lawngreen = Color.rgb(124)(252)(0);
  var lavenderblush = Color.rgb(255)(240)(245);
  var lavender = Color.rgb(230)(230)(250);
  var khaki = Color.rgb(240)(230)(140);
  var ivory = Color.rgb(255)(255)(240);
  var indigo = Color.rgb(75)(0)(130);
  var indianred = Color.rgb(205)(92)(92);
  var hotpink = Color.rgb(255)(105)(180);
  var honeydew = Color.rgb(240)(255)(240);
  var grey = Color.rgb(128)(128)(128);
  var greenyellow = Color.rgb(173)(255)(47);
  var green = Color.rgb(0)(128)(0);
  var gray = Color.rgb(128)(128)(128);
  var goldenrod = Color.rgb(218)(165)(32);
  var gold = Color.rgb(255)(215)(0);
  var ghostwhite = Color.rgb(248)(248)(255);
  var gainsboro = Color.rgb(220)(220)(220);
  var fuchsia = Color.rgb(255)(0)(255);
  var forestgreen = Color.rgb(34)(139)(34);
  var floralwhite = Color.rgb(255)(250)(240);
  var firebrick = Color.rgb(178)(34)(34);
  var dodgerblue = Color.rgb(30)(144)(255);
  var dimgrey = Color.rgb(105)(105)(105);
  var dimgray = Color.rgb(105)(105)(105);
  var deepskyblue = Color.rgb(0)(191)(255);
  var deeppink = Color.rgb(255)(20)(147);
  var darkviolet = Color.rgb(148)(0)(211);
  var darkturquoise = Color.rgb(0)(206)(209);
  var darkslategrey = Color.rgb(47)(79)(79);
  var darkslategray = Color.rgb(47)(79)(79);
  var darkslateblue = Color.rgb(72)(61)(139);
  var darkseagreen = Color.rgb(143)(188)(143);
  var darksalmon = Color.rgb(233)(150)(122);
  var darkred = Color.rgb(139)(0)(0);
  var darkorchid = Color.rgb(153)(50)(204);
  var darkorange = Color.rgb(255)(140)(0);
  var darkolivegreen = Color.rgb(85)(107)(47);
  var darkmagenta = Color.rgb(139)(0)(139);
  var darkkhaki = Color.rgb(189)(183)(107);
  var darkgrey = Color.rgb(169)(169)(169);
  var darkgreen = Color.rgb(0)(100)(0);
  var darkgray = Color.rgb(169)(169)(169);
  var darkgoldenrod = Color.rgb(184)(134)(11);
  var darkcyan = Color.rgb(0)(139)(139);
  var darkblue = Color.rgb(0)(0)(139);
  var cyan = Color.rgb(0)(255)(255);
  var crimson = Color.rgb(220)(20)(60);
  var cornsilk = Color.rgb(255)(248)(220);
  var cornflowerblue = Color.rgb(100)(149)(237);
  var coral = Color.rgb(255)(127)(80);
  var chocolate = Color.rgb(210)(105)(30);
  var chartreuse = Color.rgb(127)(255)(0);
  var cadetblue = Color.rgb(95)(158)(160);
  var burlywood = Color.rgb(222)(184)(135);
  var brown = Color.rgb(165)(42)(42);
  var blueviolet = Color.rgb(138)(43)(226);
  var blue = Color.rgb(0)(0)(255);
  var blanchedalmond = Color.rgb(255)(235)(205);
  var bisque = Color.rgb(255)(228)(196);
  var beige = Color.rgb(245)(245)(220);
  var azure = Color.rgb(240)(255)(255);
  var aquamarine = Color.rgb(127)(255)(212);
  var aqua = Color.rgb(0)(255)(255);
  var antiquewhite = Color.rgb(250)(235)(215);
  var aliceblue = Color.rgb(240)(248)(255);
  exports["yellowgreen"] = yellowgreen;
  exports["yellow"] = yellow;
  exports["whitesmoke"] = whitesmoke;
  exports["wheat"] = wheat;
  exports["violet"] = violet;
  exports["turquoise"] = turquoise;
  exports["tomato"] = tomato;
  exports["thistle"] = thistle;
  exports["teal"] = teal;
  exports["tan"] = tan;
  exports["steelblue"] = steelblue;
  exports["springgreen"] = springgreen;
  exports["snow"] = snow;
  exports["slategrey"] = slategrey;
  exports["slategray"] = slategray;
  exports["slateblue"] = slateblue;
  exports["skyblue"] = skyblue;
  exports["silver"] = silver;
  exports["sienna"] = sienna;
  exports["seashell"] = seashell;
  exports["seagreen"] = seagreen;
  exports["sandybrown"] = sandybrown;
  exports["salmon"] = salmon;
  exports["saddlebrown"] = saddlebrown;
  exports["royalblue"] = royalblue;
  exports["rosybrown"] = rosybrown;
  exports["red"] = red;
  exports["purple"] = purple;
  exports["powderblue"] = powderblue;
  exports["plum"] = plum;
  exports["pink"] = pink;
  exports["peru"] = peru;
  exports["peachpuff"] = peachpuff;
  exports["papayawhip"] = papayawhip;
  exports["palevioletred"] = palevioletred;
  exports["paleturquoise"] = paleturquoise;
  exports["palegreen"] = palegreen;
  exports["palegoldenrod"] = palegoldenrod;
  exports["orchid"] = orchid;
  exports["orangered"] = orangered;
  exports["orange"] = orange;
  exports["olivedrab"] = olivedrab;
  exports["olive"] = olive;
  exports["oldlace"] = oldlace;
  exports["navy"] = navy;
  exports["navajowhite"] = navajowhite;
  exports["moccasin"] = moccasin;
  exports["mistyrose"] = mistyrose;
  exports["mintcream"] = mintcream;
  exports["midnightblue"] = midnightblue;
  exports["mediumvioletred"] = mediumvioletred;
  exports["mediumturquoise"] = mediumturquoise;
  exports["mediumspringgreen"] = mediumspringgreen;
  exports["mediumslateblue"] = mediumslateblue;
  exports["mediumseagreen"] = mediumseagreen;
  exports["mediumpurple"] = mediumpurple;
  exports["mediumorchid"] = mediumorchid;
  exports["mediumblue"] = mediumblue;
  exports["mediumaquamarine"] = mediumaquamarine;
  exports["maroon"] = maroon;
  exports["magenta"] = magenta;
  exports["linen"] = linen;
  exports["limegreen"] = limegreen;
  exports["lime"] = lime;
  exports["lightyellow"] = lightyellow;
  exports["lightsteelblue"] = lightsteelblue;
  exports["lightslategrey"] = lightslategrey;
  exports["lightslategray"] = lightslategray;
  exports["lightskyblue"] = lightskyblue;
  exports["lightseagreen"] = lightseagreen;
  exports["lightsalmon"] = lightsalmon;
  exports["lightpink"] = lightpink;
  exports["lightgrey"] = lightgrey;
  exports["lightgreen"] = lightgreen;
  exports["lightgray"] = lightgray;
  exports["lightgoldenrodyellow"] = lightgoldenrodyellow;
  exports["lightcyan"] = lightcyan;
  exports["lightcoral"] = lightcoral;
  exports["lightblue"] = lightblue;
  exports["lemonchiffon"] = lemonchiffon;
  exports["lawngreen"] = lawngreen;
  exports["lavenderblush"] = lavenderblush;
  exports["lavender"] = lavender;
  exports["khaki"] = khaki;
  exports["ivory"] = ivory;
  exports["indigo"] = indigo;
  exports["indianred"] = indianred;
  exports["hotpink"] = hotpink;
  exports["honeydew"] = honeydew;
  exports["grey"] = grey;
  exports["greenyellow"] = greenyellow;
  exports["green"] = green;
  exports["gray"] = gray;
  exports["goldenrod"] = goldenrod;
  exports["gold"] = gold;
  exports["ghostwhite"] = ghostwhite;
  exports["gainsboro"] = gainsboro;
  exports["fuchsia"] = fuchsia;
  exports["forestgreen"] = forestgreen;
  exports["floralwhite"] = floralwhite;
  exports["firebrick"] = firebrick;
  exports["dodgerblue"] = dodgerblue;
  exports["dimgrey"] = dimgrey;
  exports["dimgray"] = dimgray;
  exports["deepskyblue"] = deepskyblue;
  exports["deeppink"] = deeppink;
  exports["darkviolet"] = darkviolet;
  exports["darkturquoise"] = darkturquoise;
  exports["darkslategrey"] = darkslategrey;
  exports["darkslategray"] = darkslategray;
  exports["darkslateblue"] = darkslateblue;
  exports["darkseagreen"] = darkseagreen;
  exports["darksalmon"] = darksalmon;
  exports["darkred"] = darkred;
  exports["darkorchid"] = darkorchid;
  exports["darkorange"] = darkorange;
  exports["darkolivegreen"] = darkolivegreen;
  exports["darkmagenta"] = darkmagenta;
  exports["darkkhaki"] = darkkhaki;
  exports["darkgrey"] = darkgrey;
  exports["darkgreen"] = darkgreen;
  exports["darkgray"] = darkgray;
  exports["darkgoldenrod"] = darkgoldenrod;
  exports["darkcyan"] = darkcyan;
  exports["darkblue"] = darkblue;
  exports["cyan"] = cyan;
  exports["crimson"] = crimson;
  exports["cornsilk"] = cornsilk;
  exports["cornflowerblue"] = cornflowerblue;
  exports["coral"] = coral;
  exports["chocolate"] = chocolate;
  exports["chartreuse"] = chartreuse;
  exports["cadetblue"] = cadetblue;
  exports["burlywood"] = burlywood;
  exports["brown"] = brown;
  exports["blueviolet"] = blueviolet;
  exports["blue"] = blue;
  exports["blanchedalmond"] = blanchedalmond;
  exports["bisque"] = bisque;
  exports["beige"] = beige;
  exports["azure"] = azure;
  exports["aquamarine"] = aquamarine;
  exports["aqua"] = aqua;
  exports["antiquewhite"] = antiquewhite;
  exports["aliceblue"] = aliceblue;;
 
})(PS["Color.Scheme.X11"] = PS["Color.Scheme.X11"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Ord = PS["Data.Ord"];
  var Color = PS["Color"];
  var Color_Scheme_X11 = PS["Color.Scheme.X11"];
  var Data_Monoid = PS["Data.Monoid"];     
  var ColorStop = (function () {
      function ColorStop(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ColorStop.create = function (value0) {
          return function (value1) {
              return new ColorStop(value0, value1);
          };
      };
      return ColorStop;
  })();
  var ColorScale = (function () {
      function ColorScale(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ColorScale.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ColorScale(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ColorScale;
  })();
  var stopRatio = function (v) {
      return v.value1;
  };
  var ratio = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0);
  var colorStop = function (c) {
      return function (r) {
          return new ColorStop(c, ratio(r));
      };
  };
  var sample = function (v) {
      return function (x) {
          if (x < 0.0) {
              return v.value1;
          };
          if (x > 1.0) {
              return v.value3;
          };
          if (Prelude.otherwise) {
              var go = function (__copy_v1) {
                  return function (__copy_v2) {
                      return function (__copy_v3) {
                          var v1 = __copy_v1;
                          var v2 = __copy_v2;
                          var v3 = __copy_v3;
                          tco: while (true) {
                              if (v3 instanceof Data_List.Nil) {
                                  return v1;
                              };
                              if (v3 instanceof Data_List.Cons) {
                                  var $27 = Data_Ord.between(Prelude.ordNumber)(v2)(v3.value0.value1)(x);
                                  if ($27) {
                                      var $28 = v2 === v3.value0.value1;
                                      if ($28) {
                                          return v1;
                                      };
                                      if (!$28) {
                                          return Color.mix(v.value0)(v1)(v3.value0.value0)((x - v2) / (v3.value0.value1 - v2));
                                      };
                                      throw new Error("Failed pattern match: " + [ $28.constructor.name ]);
                                  };
                                  if (!$27) {
                                      var __tco_v1 = v3.value0.value0;
                                      var __tco_v2 = v3.value0.value1;
                                      var __tco_v3 = v3.value1;
                                      v1 = __tco_v1;
                                      v2 = __tco_v2;
                                      v3 = __tco_v3;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Color.Scale line 81, column 1 - line 82, column 1: " + [ $27.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Color.Scale line 81, column 1 - line 82, column 1: " + [ v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
                          };
                      };
                  };
              };
              return go(v.value1)(0.0)(Data_List.snoc(v.value2)(colorStop(v.value3)(1.0)));
          };
          throw new Error("Failed pattern match at Color.Scale line 81, column 1 - line 82, column 1: " + [ v.constructor.name, x.constructor.name ]);
      };
  };
  var colors = function (v) {
      return function (v1) {
          if (v1 === 0) {
              return Data_List.Nil.value;
          };
          if (v1 === 1) {
              return Data_List.singleton(v.value1);
          };
          return Prelude.bind(Data_List.bindList)(Data_List[".."](0)(v1 - 1))(function (v2) {
              return Prelude.pure(Data_List.applicativeList)(sample(v)(Data_Int.toNumber(v2) / Data_Int.toNumber(v1 - 1)));
          });
      };
  };
  var colorScale = ColorScale.create;
  var cool = colorScale(Color.RGB.value)(Color.hsl(180.0)(1.0)(0.6))(Data_List.Nil.value)(Color.hsl(300.0)(1.0)(0.5));
  var grayscale = colorScale(Color.RGB.value)(Color.black)(Data_List.Nil.value)(Color.white);
  var spectrum = (function () {
      var stops = Prelude.bind(Data_List.bindList)(Data_List[".."](1)(35))(function (v) {
          var r = Data_Int.toNumber(v);
          return Prelude["return"](Data_List.applicativeList)(colorStop(Color.hsl(10.0 * r)(1.0)(0.5))(r / 36.0));
      });
      var end = Color.hsl(0.0)(1.0)(0.5);
      return colorScale(Color.HSL.value)(end)(stops)(end);
  })();
  var uniformScale = function (dictFoldable) {
      return function (mode) {
          return function (b) {
              return function (middle) {
                  return function (e) {
                      var cs = Data_List.fromFoldable(dictFoldable)(middle);
                      var len = Data_List.length(cs);
                      var n = 2 + len | 0;
                      var makeStop = function (i) {
                          return function (col) {
                              return colorStop(col)(Data_Int.toNumber(i) / Data_Int.toNumber(n));
                          };
                      };
                      var stops = Data_List.zipWith(makeStop)(Data_List[".."](1)(1 + len | 0))(cs);
                      return colorScale(mode)(b)(stops)(e);
                  };
              };
          };
      };
  };
  var hot = uniformScale(Data_List.foldableList)(Color.RGB.value)(Color.black)(Data_List[":"](Color_Scheme_X11.red)(Data_List[":"](Color_Scheme_X11.yellow)(Data_List.Nil.value)))(Color.white);
  var addStop = function (v) {
      return function (c) {
          return function (r) {
              var stop = colorStop(c)(r);
              return new ColorScale(v.value0, v.value1, Data_List.insertBy(Data_Ord.comparing(Prelude.ordNumber)(stopRatio))(stop)(v.value2), v.value3);
          };
      };
  };
  var cssColorStops = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Color.RGB && v.value2 instanceof Data_List.Nil) {
              return Color.cssStringHSLA(v.value1) + (", " + Color.cssStringHSLA(v.value3));
          };
          if (v.value0 instanceof Color.RGB) {
              var percentage = function (r) {
                  return Prelude.show(Prelude.showNumber)(r * 100.0) + "%";
              };
              var toString = function (v1) {
                  return Color.cssStringHSLA(v1.value0) + (" " + percentage(v1.value1));
              };
              return Color.cssStringHSLA(v.value1) + (", " + (Data_Foldable.intercalate(Data_List.foldableList)(Data_Monoid.monoidString)(", ")(Prelude["<$>"](Data_List.functorList)(toString)(v.value2)) + (", " + Color.cssStringHSLA(v.value3))));
          };
          var csRGB$prime = new ColorScale(Color.RGB.value, v.value1, v.value2, v.value3);
          var additionalStops = Prelude.bind(Data_List.bindList)(Data_List[".."](1)(9))(function (v1) {
              var frac = ratio(Data_Int.toNumber(v1) / 10.0);
              return Prelude["return"](Data_List.applicativeList)(new ColorStop(sample(v)(frac), frac));
          });
          var addStop$prime = function (scale1) {
              return function (v1) {
                  return addStop(scale1)(v1.value0)(v1.value1);
              };
          };
          var csRGB = Data_Foldable.foldl(Data_List.foldableList)(addStop$prime)(csRGB$prime)(additionalStops);
          v = csRGB;
          continue tco;
      };
  };
  exports["cssColorStops"] = cssColorStops;
  exports["spectrum"] = spectrum;
  exports["cool"] = cool;
  exports["hot"] = hot;
  exports["grayscale"] = grayscale;
  exports["colors"] = colors;
  exports["sample"] = sample;
  exports["addStop"] = addStop;
  exports["uniformScale"] = uniformScale;
  exports["colorScale"] = colorScale;
  exports["colorStop"] = colorStop;;
 
})(PS["Color.Scale"] = PS["Color.Scale"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var last = function (xs) {
      return $foreign.unsafeIndex(xs)(Data_Array.length(xs) - 1);
  };
  var head = function (xs) {
      return $foreign.unsafeIndex(xs)(0);
  };
  exports["last"] = last;
  exports["head"] = head;;
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Color = PS["Color"];
  var Color_Scale = PS["Color.Scale"];
  var Data_Foldable = PS["Data.Foldable"];     
  var matplotlibScale = function (rgbs) {
      var toColor = function (v) {
          if (v.length === 3) {
              return Color["rgb'"](v[0])(v[1])(v[2]);
          };
          return Color["rgb'"](0.0)(0.0)(0.0);
      };
      var stop = toColor(Data_Array_Unsafe.last(rgbs));
      var start = toColor(Data_Array_Unsafe.head(rgbs));
      var middle = Prelude["<$>"](Prelude.functorArray)(toColor)(Data_Array.slice(1)(255)(rgbs));
      return Color_Scale.uniformScale(Data_Foldable.foldableArray)(Color.RGB.value)(start)(middle)(stop);
  };
  var _viridis_data = [ [ 0.267004, 4.873999999999999e-3, 0.329415 ], [ 0.26851, 9.604999999999999e-3, 0.33542700000000003 ], [ 0.269944, 1.4624999999999999e-2, 0.341379 ], [ 0.271305, 1.9941999999999998e-2, 0.347269 ], [ 0.272594, 2.5563000000000002e-2, 0.353093 ], [ 0.273809, 3.1497000000000004e-2, 0.358853 ], [ 0.274952, 3.7751999999999994e-2, 0.364543 ], [ 0.276022, 4.4167e-2, 0.37016400000000005 ], [ 0.277018, 5.0344e-2, 0.375715 ], [ 0.277941, 5.6324e-2, 0.381191 ], [ 0.278791, 6.2145000000000006e-2, 0.386592 ], [ 0.279566, 6.7836e-2, 0.391917 ], [ 0.280267, 7.3417e-2, 0.39716300000000004 ], [ 0.280894, 7.890699999999999e-2, 0.40232900000000005 ], [ 0.281446, 8.432e-2, 0.407414 ], [ 0.28192399999999995, 8.9666e-2, 0.41241500000000003 ], [ 0.282327, 9.4955e-2, 0.417331 ], [ 0.28265599999999996, 0.100196, 0.42216000000000004 ], [ 0.28291, 0.105393, 0.426902 ], [ 0.28309100000000004, 0.11055299999999998, 0.43155400000000005 ], [ 0.28319700000000003, 0.11568, 0.43611500000000003 ], [ 0.283229, 0.120777, 0.440584 ], [ 0.28318699999999997, 0.12584800000000002, 0.44496 ], [ 0.283072, 0.130895, 0.44924099999999995 ], [ 0.282884, 0.13591999999999999, 0.453427 ], [ 0.28262299999999996, 0.140926, 0.457517 ], [ 0.28229, 0.145912, 0.46151 ], [ 0.281887, 0.150881, 0.46540499999999996 ], [ 0.281412, 0.155834, 0.469201 ], [ 0.280868, 0.160771, 0.47289899999999996 ], [ 0.28025500000000003, 0.165693, 0.476498 ], [ 0.279574, 0.170599, 0.479997 ], [ 0.278826, 0.17549, 0.48339699999999997 ], [ 0.27801200000000004, 0.180367, 0.48669700000000005 ], [ 0.277134, 0.185228, 0.489898 ], [ 0.276194, 0.19007400000000002, 0.493001 ], [ 0.275191, 0.19490500000000002, 0.496005 ], [ 0.274128, 0.19972099999999998, 0.498911 ], [ 0.27300599999999997, 0.20451999999999998, 0.5017210000000001 ], [ 0.271828, 0.20930300000000002, 0.504434 ], [ 0.27059500000000003, 0.214069, 0.5070520000000001 ], [ 0.269308, 0.218818, 0.509577 ], [ 0.26796800000000004, 0.223549, 0.512008 ], [ 0.26658, 0.22826200000000002, 0.514349 ], [ 0.265145, 0.232956, 0.516599 ], [ 0.26366300000000004, 0.237631, 0.518762 ], [ 0.26213800000000004, 0.242286, 0.520837 ], [ 0.260571, 0.246922, 0.522828 ], [ 0.258965, 0.251537, 0.524736 ], [ 0.257322, 0.25613, 0.526563 ], [ 0.255645, 0.260703, 0.528312 ], [ 0.25393499999999997, 0.265254, 0.529983 ], [ 0.252194, 0.269783, 0.531579 ], [ 0.250425, 0.27429000000000003, 0.533103 ], [ 0.248629, 0.278775, 0.534556 ], [ 0.24681099999999997, 0.283237, 0.535941 ], [ 0.24497200000000002, 0.287675, 0.5372600000000001 ], [ 0.243113, 0.29209199999999996, 0.538516 ], [ 0.241237, 0.296485, 0.539709 ], [ 0.239346, 0.300855, 0.540844 ], [ 0.237441, 0.30520200000000003, 0.541921 ], [ 0.23552599999999999, 0.309527, 0.542944 ], [ 0.233603, 0.313828, 0.543914 ], [ 0.231674, 0.318106, 0.544834 ], [ 0.229739, 0.322361, 0.545706 ], [ 0.227802, 0.326594, 0.546532 ], [ 0.225863, 0.330805, 0.547314 ], [ 0.223925, 0.334994, 0.548053 ], [ 0.221989, 0.339161, 0.548752 ], [ 0.220057, 0.343307, 0.549413 ], [ 0.21813000000000002, 0.347432, 0.550038 ], [ 0.21621, 0.351535, 0.550627 ], [ 0.21429800000000002, 0.355619, 0.551184 ], [ 0.21239499999999997, 0.359683, 0.55171 ], [ 0.21050300000000002, 0.363727, 0.552206 ], [ 0.208623, 0.36775199999999997, 0.552675 ], [ 0.206756, 0.371758, 0.5531170000000001 ], [ 0.204903, 0.375746, 0.553533 ], [ 0.203063, 0.379716, 0.553925 ], [ 0.201239, 0.38367, 0.554294 ], [ 0.19943, 0.387607, 0.5546420000000001 ], [ 0.197636, 0.391528, 0.554969 ], [ 0.19586, 0.39543300000000003, 0.555276 ], [ 0.1941, 0.399323, 0.555565 ], [ 0.192357, 0.40319900000000003, 0.555836 ], [ 0.190631, 0.407061, 0.5560889999999999 ], [ 0.188923, 0.41091, 0.556326 ], [ 0.187231, 0.41474599999999995, 0.556547 ], [ 0.185556, 0.41857, 0.5567529999999999 ], [ 0.18389799999999998, 0.42238300000000006, 0.556944 ], [ 0.182256, 0.426184, 0.5571200000000001 ], [ 0.180629, 0.42997500000000005, 0.557282 ], [ 0.17901899999999998, 0.433756, 0.55743 ], [ 0.177423, 0.43752700000000005, 0.557565 ], [ 0.175841, 0.44128999999999996, 0.557685 ], [ 0.17427399999999998, 0.44504400000000005, 0.557792 ], [ 0.172719, 0.44879100000000005, 0.557885 ], [ 0.171176, 0.45253, 0.557965 ], [ 0.16964600000000002, 0.456262, 0.55803 ], [ 0.168126, 0.45998799999999995, 0.558082 ], [ 0.166617, 0.463708, 0.558119 ], [ 0.165117, 0.467423, 0.558141 ], [ 0.163625, 0.471133, 0.558148 ], [ 0.162142, 0.474838, 0.5581400000000001 ], [ 0.160665, 0.47854, 0.558115 ], [ 0.159194, 0.482237, 0.558073 ], [ 0.157729, 0.48593200000000003, 0.5580130000000001 ], [ 0.15627, 0.48962399999999995, 0.557936 ], [ 0.154815, 0.493313, 0.55784 ], [ 0.153364, 0.497, 0.557724 ], [ 0.151918, 0.500685, 0.557587 ], [ 0.150476, 0.504369, 0.55743 ], [ 0.149039, 0.508051, 0.55725 ], [ 0.147607, 0.511733, 0.557049 ], [ 0.14618, 0.515413, 0.556823 ], [ 0.144759, 0.519093, 0.556572 ], [ 0.143343, 0.522773, 0.556295 ], [ 0.141935, 0.526453, 0.555991 ], [ 0.140536, 0.5301319999999999, 0.555659 ], [ 0.139147, 0.533812, 0.555298 ], [ 0.13777, 0.5374920000000001, 0.554906 ], [ 0.136408, 0.541173, 0.5544830000000001 ], [ 0.135066, 0.544853, 0.554029 ], [ 0.133743, 0.548535, 0.553541 ], [ 0.132444, 0.552216, 0.553018 ], [ 0.131172, 0.5558989999999999, 0.552459 ], [ 0.129933, 0.559582, 0.5518639999999999 ], [ 0.128729, 0.563265, 0.551229 ], [ 0.127568, 0.5669489999999999, 0.550556 ], [ 0.12645299999999998, 0.5706330000000001, 0.549841 ], [ 0.125394, 0.574318, 0.549086 ], [ 0.12439499999999999, 0.578002, 0.548287 ], [ 0.12346299999999999, 0.581687, 0.547445 ], [ 0.12260599999999999, 0.5853710000000001, 0.546557 ], [ 0.121831, 0.589055, 0.545623 ], [ 0.12114799999999999, 0.592739, 0.544641 ], [ 0.120565, 0.596422, 0.5436110000000001 ], [ 0.120092, 0.600104, 0.54253 ], [ 0.11973799999999998, 0.603785, 0.5414 ], [ 0.119512, 0.607464, 0.540218 ], [ 0.11942299999999999, 0.611141, 0.5389820000000001 ], [ 0.119483, 0.6148170000000001, 0.5376920000000001 ], [ 0.119699, 0.61849, 0.536347 ], [ 0.120081, 0.622161, 0.5349459999999999 ], [ 0.120638, 0.625828, 0.533488 ], [ 0.12138, 0.629492, 0.531973 ], [ 0.122312, 0.633153, 0.530398 ], [ 0.123444, 0.6368090000000001, 0.528763 ], [ 0.12478, 0.640461, 0.527068 ], [ 0.126326, 0.644107, 0.5253110000000001 ], [ 0.128087, 0.6477489999999999, 0.523491 ], [ 0.130067, 0.651384, 0.521608 ], [ 0.132268, 0.655014, 0.5196609999999999 ], [ 0.13469199999999998, 0.658636, 0.517649 ], [ 0.13733900000000002, 0.662252, 0.515571 ], [ 0.14021, 0.665859, 0.513427 ], [ 0.143303, 0.669459, 0.511215 ], [ 0.146616, 0.67305, 0.508936 ], [ 0.150148, 0.676631, 0.506589 ], [ 0.153894, 0.680203, 0.504172 ], [ 0.15785100000000002, 0.683765, 0.5016860000000001 ], [ 0.162016, 0.687316, 0.49912900000000004 ], [ 0.166383, 0.6908559999999999, 0.496502 ], [ 0.17094800000000002, 0.694384, 0.49380300000000005 ], [ 0.175707, 0.6979, 0.491033 ], [ 0.180653, 0.7014020000000001, 0.48818900000000004 ], [ 0.185783, 0.704891, 0.485273 ], [ 0.19109, 0.708366, 0.48228400000000005 ], [ 0.196571, 0.711827, 0.479221 ], [ 0.202219, 0.715272, 0.476084 ], [ 0.20803, 0.718701, 0.472873 ], [ 0.21400000000000002, 0.722114, 0.469588 ], [ 0.220124, 0.725509, 0.466226 ], [ 0.22639700000000001, 0.728888, 0.462789 ], [ 0.232815, 0.732247, 0.459277 ], [ 0.23937400000000003, 0.735588, 0.455688 ], [ 0.24607, 0.73891, 0.45202400000000004 ], [ 0.25289900000000004, 0.742211, 0.448284 ], [ 0.259857, 0.7454919999999999, 0.44446700000000006 ], [ 0.266941, 0.748751, 0.440573 ], [ 0.274149, 0.751988, 0.436601 ], [ 0.28147700000000003, 0.7552030000000001, 0.432552 ], [ 0.288921, 0.758394, 0.428426 ], [ 0.296479, 0.761561, 0.424223 ], [ 0.304148, 0.7647039999999999, 0.41994299999999996 ], [ 0.311925, 0.767822, 0.41558599999999996 ], [ 0.319809, 0.770914, 0.41115199999999996 ], [ 0.32779600000000003, 0.77398, 0.40664 ], [ 0.335885, 0.777018, 0.402049 ], [ 0.344074, 0.7800290000000001, 0.397381 ], [ 0.35236, 0.783011, 0.392636 ], [ 0.360741, 0.785964, 0.387814 ], [ 0.36921400000000004, 0.788888, 0.382914 ], [ 0.377779, 0.7917810000000001, 0.377939 ], [ 0.38643299999999997, 0.794644, 0.372886 ], [ 0.395174, 0.797475, 0.367757 ], [ 0.40400099999999994, 0.8002750000000001, 0.362552 ], [ 0.412913, 0.803041, 0.35726899999999995 ], [ 0.421908, 0.8057740000000001, 0.35191 ], [ 0.430983, 0.808473, 0.346476 ], [ 0.440137, 0.811138, 0.340967 ], [ 0.44936800000000005, 0.8137679999999999, 0.335384 ], [ 0.45867399999999997, 0.816363, 0.329727 ], [ 0.468053, 0.8189209999999999, 0.323998 ], [ 0.477504, 0.821444, 0.318195 ], [ 0.487026, 0.823929, 0.31232099999999996 ], [ 0.496615, 0.826376, 0.306377 ], [ 0.506271, 0.828786, 0.300362 ], [ 0.515992, 0.831158, 0.294279 ], [ 0.525776, 0.8334910000000001, 0.28812699999999997 ], [ 0.535621, 0.8357849999999999, 0.281908 ], [ 0.545524, 0.838039, 0.27562600000000004 ], [ 0.5554840000000001, 0.8402540000000001, 0.269281 ], [ 0.5654980000000001, 0.84243, 0.262877 ], [ 0.575563, 0.844566, 0.25641499999999995 ], [ 0.5856779999999999, 0.8466609999999999, 0.24989699999999998 ], [ 0.595839, 0.848717, 0.243329 ], [ 0.6060450000000001, 0.850733, 0.23671199999999998 ], [ 0.616293, 0.8527089999999999, 0.230052 ], [ 0.626579, 0.854645, 0.223353 ], [ 0.636902, 0.8565419999999999, 0.21661999999999998 ], [ 0.647257, 0.8583999999999999, 0.209861 ], [ 0.657642, 0.8602190000000001, 0.20308199999999998 ], [ 0.6680539999999999, 0.861999, 0.196293 ], [ 0.678489, 0.863742, 0.189503 ], [ 0.688944, 0.865448, 0.182725 ], [ 0.699415, 0.867117, 0.17597100000000002 ], [ 0.709898, 0.8687509999999999, 0.169257 ], [ 0.720391, 0.87035, 0.162603 ], [ 0.730889, 0.871916, 0.156029 ], [ 0.7413879999999999, 0.8734489999999999, 0.149561 ], [ 0.751884, 0.874951, 0.143228 ], [ 0.762373, 0.8764240000000001, 0.137064 ], [ 0.772852, 0.877868, 0.131109 ], [ 0.783315, 0.879285, 0.125405 ], [ 0.79376, 0.880678, 0.120005 ], [ 0.804182, 0.8820460000000001, 0.11496500000000001 ], [ 0.814576, 0.8833930000000001, 0.110347 ], [ 0.82494, 0.8847200000000001, 0.106217 ], [ 0.8352700000000001, 0.886029, 0.10264599999999999 ], [ 0.845561, 0.8873219999999999, 9.9702e-2 ], [ 0.85581, 0.8886010000000001, 9.745200000000001e-2 ], [ 0.866013, 0.8898680000000001, 9.5953e-2 ], [ 0.8761680000000001, 0.8911250000000001, 9.525e-2 ], [ 0.886271, 0.892374, 9.5374e-2 ], [ 0.89632, 0.893616, 9.633499999999999e-2 ], [ 0.906311, 0.8948550000000001, 9.812499999999999e-2 ], [ 0.9162420000000001, 0.896091, 0.10071699999999999 ], [ 0.9261060000000001, 0.89733, 0.104071 ], [ 0.9359040000000001, 0.89857, 0.108131 ], [ 0.945636, 0.899815, 0.112838 ], [ 0.9553, 0.901065, 0.11812800000000001 ], [ 0.9648939999999999, 0.902323, 0.123941 ], [ 0.9744170000000001, 0.90359, 0.13021500000000003 ], [ 0.983868, 0.904867, 0.136897 ], [ 0.993248, 0.906157, 0.143936 ] ];
  var viridis = matplotlibScale(_viridis_data);
  var _plasma_data = [ [ 5.0383e-2, 2.9803000000000003e-2, 0.527975 ], [ 6.353600000000001e-2, 2.8426e-2, 0.533124 ], [ 7.5353e-2, 2.7206e-2, 0.538007 ], [ 8.6222e-2, 2.6125e-2, 0.542658 ], [ 9.6379e-2, 2.5165e-2, 0.547103 ], [ 0.10598, 2.4308999999999997e-2, 0.551368 ], [ 0.115124, 2.3556e-2, 0.5554680000000001 ], [ 0.12390300000000001, 2.2878e-2, 0.559423 ], [ 0.132381, 2.2258e-2, 0.56325 ], [ 0.14060299999999998, 2.1686999999999998e-2, 0.566959 ], [ 0.148607, 2.1154e-2, 0.570562 ], [ 0.156421, 2.0651000000000003e-2, 0.574065 ], [ 0.16407, 2.0171e-2, 0.5774779999999999 ], [ 0.171574, 1.9705999999999998e-2, 0.580806 ], [ 0.17895, 1.9252e-2, 0.584054 ], [ 0.18621300000000002, 1.8803e-2, 0.587228 ], [ 0.193374, 1.8354e-2, 0.59033 ], [ 0.20044499999999998, 1.7902e-2, 0.593364 ], [ 0.20743499999999998, 1.7442e-2, 0.596333 ], [ 0.21434999999999998, 1.6973e-2, 0.5992390000000001 ], [ 0.221197, 1.6497e-2, 0.602083 ], [ 0.227983, 1.6007e-2, 0.604867 ], [ 0.234715, 1.5501999999999998e-2, 0.607592 ], [ 0.241396, 1.4979000000000001e-2, 0.610259 ], [ 0.24803199999999997, 1.4438999999999999e-2, 0.612868 ], [ 0.254627, 1.3882e-2, 0.6154189999999999 ], [ 0.261183, 1.3308e-2, 0.617911 ], [ 0.267703, 1.2716e-2, 0.620346 ], [ 0.27419099999999996, 1.2109e-2, 0.622722 ], [ 0.280648, 1.1488000000000002e-2, 0.625038 ], [ 0.287076, 1.0855e-2, 0.6272949999999999 ], [ 0.293478, 1.0213000000000002e-2, 0.62949 ], [ 0.299855, 9.561e-3, 0.631624 ], [ 0.30621, 8.901999999999998e-3, 0.633694 ], [ 0.312543, 8.239e-3, 0.6357 ], [ 0.318856, 7.575999999999999e-3, 0.63764 ], [ 0.32515, 6.915e-3, 0.6395120000000001 ], [ 0.331426, 6.261e-3, 0.641316 ], [ 0.337683, 5.618000000000001e-3, 0.643049 ], [ 0.343925, 4.991e-3, 0.64471 ], [ 0.35015, 4.382e-3, 0.646298 ], [ 0.356359, 3.798e-3, 0.64781 ], [ 0.362553, 3.2430000000000002e-3, 0.649245 ], [ 0.36873300000000003, 2.7240000000000003e-3, 0.650601 ], [ 0.374897, 2.245e-3, 0.651876 ], [ 0.381047, 1.814e-3, 0.653068 ], [ 0.387183, 1.434e-3, 0.654177 ], [ 0.393304, 1.114e-3, 0.655199 ], [ 0.399411, 8.590000000000001e-4, 0.656133 ], [ 0.40550300000000006, 6.78e-4, 0.656977 ], [ 0.41158, 5.769999999999999e-4, 0.65773 ], [ 0.417642, 5.639999999999999e-4, 0.65839 ], [ 0.423689, 6.460000000000001e-4, 0.658956 ], [ 0.42971899999999996, 8.310000000000001e-4, 0.6594249999999999 ], [ 0.43573399999999995, 1.127e-3, 0.659797 ], [ 0.441732, 1.5400000000000001e-3, 0.660069 ], [ 0.44771400000000006, 2.0800000000000003e-3, 0.66024 ], [ 0.453677, 2.7549999999999996e-3, 0.66031 ], [ 0.459623, 3.574e-3, 0.660277 ], [ 0.46555, 4.545e-3, 0.660139 ], [ 0.471457, 5.678e-3, 0.659897 ], [ 0.477344, 6.98e-3, 0.6595489999999999 ], [ 0.48321, 8.46e-3, 0.659095 ], [ 0.489055, 1.0127e-2, 0.6585340000000001 ], [ 0.49487699999999996, 1.199e-2, 0.6578649999999999 ], [ 0.500678, 1.4055000000000002e-2, 0.657088 ], [ 0.506454, 1.6333e-2, 0.6562020000000001 ], [ 0.512206, 1.8833e-2, 0.6552089999999999 ], [ 0.517933, 2.1563e-2, 0.6541089999999999 ], [ 0.523633, 2.4531999999999998e-2, 0.652901 ], [ 0.5293059999999999, 2.7747e-2, 0.651586 ], [ 0.534952, 3.1217e-2, 0.650165 ], [ 0.54057, 3.495e-2, 0.64864 ], [ 0.546157, 3.8954e-2, 0.6470100000000001 ], [ 0.551715, 4.3136e-2, 0.645277 ], [ 0.5572429999999999, 4.7331e-2, 0.643443 ], [ 0.562738, 5.1544999999999994e-2, 0.641509 ], [ 0.568201, 5.5777999999999994e-2, 0.6394770000000001 ], [ 0.573632, 6.002799999999999e-2, 0.637349 ], [ 0.579029, 6.429599999999999e-2, 0.635126 ], [ 0.584391, 6.8579e-2, 0.632812 ], [ 0.589719, 7.2878e-2, 0.630408 ], [ 0.595011, 7.719000000000001e-2, 0.627917 ], [ 0.600266, 8.1516e-2, 0.6253420000000001 ], [ 0.605485, 8.5854e-2, 0.6226860000000001 ], [ 0.6106670000000001, 9.0204e-2, 0.619951 ], [ 0.615812, 9.456400000000001e-2, 0.61714 ], [ 0.620919, 9.8934e-2, 0.614257 ], [ 0.6259870000000001, 0.103312, 0.611305 ], [ 0.631017, 0.10769899999999999, 0.608287 ], [ 0.636008, 0.112092, 0.605205 ], [ 0.640959, 0.116492, 0.602065 ], [ 0.645872, 0.12089799999999999, 0.598867 ], [ 0.650746, 0.125309, 0.5956170000000001 ], [ 0.6555799999999999, 0.129725, 0.592317 ], [ 0.660374, 0.13414399999999999, 0.588971 ], [ 0.6651290000000001, 0.13856600000000002, 0.5855819999999999 ], [ 0.669845, 0.142992, 0.582154 ], [ 0.674522, 0.14741900000000002, 0.578688 ], [ 0.67916, 0.151848, 0.5751890000000001 ], [ 0.683758, 0.156278, 0.57166 ], [ 0.688318, 0.160709, 0.568103 ], [ 0.69284, 0.165141, 0.564522 ], [ 0.6973239999999999, 0.169573, 0.560919 ], [ 0.701769, 0.17400500000000002, 0.557296 ], [ 0.706178, 0.178437, 0.5536570000000001 ], [ 0.710549, 0.18286799999999998, 0.550004 ], [ 0.714883, 0.18729900000000002, 0.546338 ], [ 0.7191810000000001, 0.19172899999999998, 0.542663 ], [ 0.723444, 0.196158, 0.5389809999999999 ], [ 0.72767, 0.20058600000000001, 0.535293 ], [ 0.731862, 0.20501299999999997, 0.531601 ], [ 0.736019, 0.20943900000000001, 0.527908 ], [ 0.740143, 0.213864, 0.524216 ], [ 0.744232, 0.21828799999999998, 0.520524 ], [ 0.748289, 0.22271100000000002, 0.516834 ], [ 0.7523120000000001, 0.22713299999999997, 0.5131490000000001 ], [ 0.756304, 0.231555, 0.509468 ], [ 0.760264, 0.23597600000000002, 0.5057940000000001 ], [ 0.764193, 0.240396, 0.502126 ], [ 0.76809, 0.244817, 0.49846500000000005 ], [ 0.7719579999999999, 0.24923700000000001, 0.494813 ], [ 0.7757959999999999, 0.253658, 0.491171 ], [ 0.779604, 0.258078, 0.48753900000000006 ], [ 0.7833829999999999, 0.2625, 0.48391799999999996 ], [ 0.7871330000000001, 0.266922, 0.480307 ], [ 0.790855, 0.271345, 0.47670599999999996 ], [ 0.7945490000000001, 0.27576999999999996, 0.47311699999999995 ], [ 0.798216, 0.280197, 0.469538 ], [ 0.801855, 0.284626, 0.465971 ], [ 0.8054669999999999, 0.289057, 0.462415 ], [ 0.809052, 0.293491, 0.45887 ], [ 0.812612, 0.297928, 0.45533799999999996 ], [ 0.8161440000000001, 0.302368, 0.451816 ], [ 0.819651, 0.306812, 0.448306 ], [ 0.823132, 0.311261, 0.444806 ], [ 0.8265879999999999, 0.315714, 0.44131599999999993 ], [ 0.8300179999999999, 0.320172, 0.437836 ], [ 0.833422, 0.324635, 0.434366 ], [ 0.836801, 0.329105, 0.430905 ], [ 0.840155, 0.33358, 0.427455 ], [ 0.8434839999999999, 0.338062, 0.424013 ], [ 0.8467879999999999, 0.342551, 0.42057900000000004 ], [ 0.850066, 0.34704799999999997, 0.417153 ], [ 0.8533189999999999, 0.351553, 0.413734 ], [ 0.856547, 0.356066, 0.410322 ], [ 0.85975, 0.360588, 0.406917 ], [ 0.862927, 0.36511899999999997, 0.403519 ], [ 0.8660780000000001, 0.36966, 0.40012600000000004 ], [ 0.8692030000000001, 0.374212, 0.396738 ], [ 0.8723029999999999, 0.378774, 0.393355 ], [ 0.8753759999999999, 0.383347, 0.389976 ], [ 0.8784230000000001, 0.387932, 0.3866 ], [ 0.881443, 0.392529, 0.383229 ], [ 0.884436, 0.397139, 0.37986 ], [ 0.887402, 0.401762, 0.376494 ], [ 0.8903399999999999, 0.406398, 0.37313 ], [ 0.8932499999999999, 0.41104799999999997, 0.369768 ], [ 0.8961309999999999, 0.41571199999999997, 0.366407 ], [ 0.8989840000000001, 0.420392, 0.363047 ], [ 0.901807, 0.425087, 0.359688 ], [ 0.9046010000000001, 0.42979700000000004, 0.356329 ], [ 0.9073650000000001, 0.434524, 0.35297 ], [ 0.910098, 0.43926800000000005, 0.34961000000000003 ], [ 0.9128000000000001, 0.444029, 0.346251 ], [ 0.9154709999999999, 0.44880700000000007, 0.34289000000000003 ], [ 0.918109, 0.45360300000000003, 0.339529 ], [ 0.920714, 0.458417, 0.336166 ], [ 0.923287, 0.46325099999999997, 0.332801 ], [ 0.925825, 0.468103, 0.32943500000000003 ], [ 0.928329, 0.47297500000000003, 0.326067 ], [ 0.930798, 0.477867, 0.322697 ], [ 0.933232, 0.48278, 0.31932499999999997 ], [ 0.93563, 0.487712, 0.315952 ], [ 0.9379899999999999, 0.49266699999999997, 0.312575 ], [ 0.9403130000000001, 0.49764200000000003, 0.309197 ], [ 0.9425979999999999, 0.5026390000000001, 0.305816 ], [ 0.944844, 0.5076579999999999, 0.302433 ], [ 0.9470510000000001, 0.512699, 0.299049 ], [ 0.949217, 0.517763, 0.295662 ], [ 0.951344, 0.52285, 0.29227499999999995 ], [ 0.953428, 0.52796, 0.288883 ], [ 0.95547, 0.533093, 0.28548999999999997 ], [ 0.957469, 0.53825, 0.282096 ], [ 0.9594239999999999, 0.543431, 0.278701 ], [ 0.961336, 0.548636, 0.275305 ], [ 0.963203, 0.5538649999999999, 0.271909 ], [ 0.965024, 0.559118, 0.268513 ], [ 0.966798, 0.564396, 0.265118 ], [ 0.968526, 0.5697, 0.261721 ], [ 0.970205, 0.575028, 0.258325 ], [ 0.9718350000000001, 0.580382, 0.254931 ], [ 0.973416, 0.585761, 0.25154 ], [ 0.974947, 0.5911649999999999, 0.248151 ], [ 0.976428, 0.596595, 0.244767 ], [ 0.9778560000000001, 0.602051, 0.24138700000000002 ], [ 0.979233, 0.607532, 0.23801299999999997 ], [ 0.980556, 0.613039, 0.234646 ], [ 0.9818260000000001, 0.618572, 0.23128700000000002 ], [ 0.983041, 0.624131, 0.227937 ], [ 0.9841989999999999, 0.629718, 0.22459500000000002 ], [ 0.985301, 0.63533, 0.221265 ], [ 0.986345, 0.640969, 0.21794799999999998 ], [ 0.987332, 0.646633, 0.214648 ], [ 0.98826, 0.652325, 0.21136400000000002 ], [ 0.989128, 0.6580429999999999, 0.2081 ], [ 0.989935, 0.663787, 0.20485899999999999 ], [ 0.990681, 0.669558, 0.20164200000000002 ], [ 0.991365, 0.6753549999999999, 0.198453 ], [ 0.991985, 0.681179, 0.195295 ], [ 0.9925409999999999, 0.68703, 0.19217 ], [ 0.993032, 0.692907, 0.189084 ], [ 0.9934559999999999, 0.69881, 0.186041 ], [ 0.9938140000000001, 0.7047410000000001, 0.183043 ], [ 0.994103, 0.710698, 0.180097 ], [ 0.994324, 0.716681, 0.17720799999999998 ], [ 0.994474, 0.722691, 0.174381 ], [ 0.994553, 0.728728, 0.171622 ], [ 0.994561, 0.734791, 0.16893799999999998 ], [ 0.994495, 0.74088, 0.16633499999999998 ], [ 0.994355, 0.746995, 0.163821 ], [ 0.9941409999999999, 0.753137, 0.161404 ], [ 0.993851, 0.759304, 0.159092 ], [ 0.993482, 0.7654989999999999, 0.156891 ], [ 0.9930329999999999, 0.77172, 0.154808 ], [ 0.9925050000000001, 0.7779670000000001, 0.15285500000000002 ], [ 0.991897, 0.784239, 0.15104199999999998 ], [ 0.9912089999999999, 0.7905369999999999, 0.149377 ], [ 0.990439, 0.796859, 0.14787 ], [ 0.989587, 0.803205, 0.146529 ], [ 0.9886480000000001, 0.8095789999999999, 0.14535700000000001 ], [ 0.9876210000000001, 0.815978, 0.144363 ], [ 0.9865090000000001, 0.8224009999999999, 0.143557 ], [ 0.985314, 0.8288460000000001, 0.14294500000000002 ], [ 0.9840310000000001, 0.8353149999999999, 0.142528 ], [ 0.982653, 0.841812, 0.142303 ], [ 0.98119, 0.848329, 0.142279 ], [ 0.9796440000000001, 0.854866, 0.142453 ], [ 0.977995, 0.861432, 0.142808 ], [ 0.976265, 0.8680160000000001, 0.143351 ], [ 0.974443, 0.8746219999999999, 0.144061 ], [ 0.9725300000000001, 0.88125, 0.144923 ], [ 0.970533, 0.8878959999999999, 0.145919 ], [ 0.968443, 0.8945640000000001, 0.147014 ], [ 0.9662710000000001, 0.901249, 0.14818 ], [ 0.964021, 0.9079499999999999, 0.14937 ], [ 0.9616809999999999, 0.914672, 0.15052 ], [ 0.959276, 0.921407, 0.151566 ], [ 0.956808, 0.9281520000000001, 0.152409 ], [ 0.9542870000000001, 0.9349080000000001, 0.152921 ], [ 0.9517260000000001, 0.941671, 0.152925 ], [ 0.949151, 0.9484349999999999, 0.152178 ], [ 0.946602, 0.95519, 0.150328 ], [ 0.9441520000000001, 0.9619160000000001, 0.146861 ], [ 0.9418960000000001, 0.9685900000000001, 0.140956 ], [ 0.940015, 0.9751580000000001, 0.131326 ] ];
  var plasma = matplotlibScale(_plasma_data);
  var _magma_data = [ [ 1.462e-3, 4.66e-4, 1.3866e-2 ], [ 2.258e-3, 1.295e-3, 1.8331e-2 ], [ 3.279e-3, 2.305e-3, 2.3708e-2 ], [ 4.512e-3, 3.49e-3, 2.9965000000000002e-2 ], [ 5.9499999999999996e-3, 4.843e-3, 3.713e-2 ], [ 7.588e-3, 6.355999999999999e-3, 4.4973e-2 ], [ 9.426e-3, 8.022e-3, 5.2844e-2 ], [ 1.1465e-2, 9.828e-3, 6.0750000000000005e-2 ], [ 1.3708000000000001e-2, 1.1771e-2, 6.8667e-2 ], [ 1.6155999999999997e-2, 1.384e-2, 7.6603e-2 ], [ 1.8815e-2, 1.6026000000000002e-2, 8.458399999999999e-2 ], [ 2.1692e-2, 1.832e-2, 9.261e-2 ], [ 2.4792e-2, 2.0715e-2, 0.10067600000000002 ], [ 2.8123e-2, 2.3201e-2, 0.10878700000000001 ], [ 3.1696e-2, 2.5765000000000003e-2, 0.11696500000000001 ], [ 3.552e-2, 2.8397e-2, 0.125209 ], [ 3.9608e-2, 3.109e-2, 0.133515 ], [ 4.383e-2, 3.383e-2, 0.141886 ], [ 4.8061999999999994e-2, 3.6607e-2, 0.15032700000000002 ], [ 5.232e-2, 3.9407000000000005e-2, 0.158841 ], [ 5.6615000000000006e-2, 4.216e-2, 0.167446 ], [ 6.0948999999999996e-2, 4.4794e-2, 0.176129 ], [ 6.533e-2, 4.7318e-2, 0.184892 ], [ 6.9764e-2, 4.9726e-2, 0.193735 ], [ 7.425699999999999e-2, 5.2017e-2, 0.20266 ], [ 7.8815e-2, 5.4183999999999996e-2, 0.211667 ], [ 8.344599999999999e-2, 5.622499999999999e-2, 0.22075499999999998 ], [ 8.815500000000001e-2, 5.8133000000000004e-2, 0.22992200000000002 ], [ 9.2949e-2, 5.9904e-2, 0.239164 ], [ 9.7833e-2, 6.1531e-2, 0.248477 ], [ 0.10281499999999999, 6.301e-2, 0.257854 ], [ 0.10789900000000001, 6.4335e-2, 0.267289 ], [ 0.113094, 6.5492e-2, 0.27678400000000003 ], [ 0.11840500000000001, 6.6479e-2, 0.286321 ], [ 0.123833, 6.7295e-2, 0.295879 ], [ 0.12938, 6.7935e-2, 0.305443 ], [ 0.135053, 6.839100000000001e-2, 0.315 ], [ 0.14085799999999998, 6.8654e-2, 0.324538 ], [ 0.146785, 6.8738e-2, 0.334011 ], [ 0.152839, 6.863699999999999e-2, 0.343404 ], [ 0.159018, 6.8354e-2, 0.352688 ], [ 0.165308, 6.7911e-2, 0.361816 ], [ 0.171713, 6.7305e-2, 0.370771 ], [ 0.17821199999999998, 6.6576e-2, 0.37949700000000003 ], [ 0.184801, 6.5732e-2, 0.387973 ], [ 0.19146000000000002, 6.4818e-2, 0.396152 ], [ 0.198177, 6.3862e-2, 0.404009 ], [ 0.204935, 6.2907e-2, 0.41151400000000005 ], [ 0.211718, 6.1992000000000005e-2, 0.418647 ], [ 0.21851199999999998, 6.1158000000000004e-2, 0.425392 ], [ 0.22530199999999997, 6.0445000000000006e-2, 0.431742 ], [ 0.232077, 5.9889000000000005e-2, 0.437695 ], [ 0.23882599999999998, 5.9517e-2, 0.443256 ], [ 0.24554299999999998, 5.9352e-2, 0.44843599999999995 ], [ 0.25222, 5.9414999999999996e-2, 0.453248 ], [ 0.258857, 5.9706e-2, 0.45770999999999995 ], [ 0.265447, 6.0237e-2, 0.46184000000000003 ], [ 0.271994, 6.099400000000001e-2, 0.46566 ], [ 0.278493, 6.1978e-2, 0.46919000000000005 ], [ 0.284951, 6.3168e-2, 0.47245100000000007 ], [ 0.291366, 6.4553e-2, 0.475462 ], [ 0.29774, 6.611700000000001e-2, 0.478243 ], [ 0.304081, 6.7835e-2, 0.48081199999999996 ], [ 0.310382, 6.9702e-2, 0.483186 ], [ 0.316654, 7.169e-2, 0.48538 ], [ 0.322899, 7.378199999999999e-2, 0.487408 ], [ 0.329114, 7.5972e-2, 0.489287 ], [ 0.335308, 7.8236e-2, 0.491024 ], [ 0.341482, 8.0564e-2, 0.492631 ], [ 0.347636, 8.2946e-2, 0.494121 ], [ 0.353773, 8.5373e-2, 0.49550099999999997 ], [ 0.359898, 8.783099999999999e-2, 0.49677800000000005 ], [ 0.366012, 9.031399999999999e-2, 0.49795999999999996 ], [ 0.372116, 9.281599999999998e-2, 0.49905299999999997 ], [ 0.378211, 9.5332e-2, 0.500067 ], [ 0.384299, 9.7855e-2, 0.501002 ], [ 0.39038399999999995, 0.100379, 0.5018640000000001 ], [ 0.396467, 0.10290200000000001, 0.502658 ], [ 0.402548, 0.10542, 0.503386 ], [ 0.408629, 0.10793, 0.504052 ], [ 0.41470900000000005, 0.11043099999999999, 0.5046619999999999 ], [ 0.420791, 0.11291999999999999, 0.505215 ], [ 0.426877, 0.115395, 0.505714 ], [ 0.432967, 0.117855, 0.50616 ], [ 0.439062, 0.12029799999999999, 0.506555 ], [ 0.445163, 0.12272400000000001, 0.5069009999999999 ], [ 0.45127100000000003, 0.125132, 0.507198 ], [ 0.45738599999999996, 0.127522, 0.507448 ], [ 0.46350800000000003, 0.12989299999999998, 0.507652 ], [ 0.46963999999999995, 0.132245, 0.5078090000000001 ], [ 0.47578, 0.134577, 0.507921 ], [ 0.48192899999999994, 0.136891, 0.507989 ], [ 0.488088, 0.13918599999999998, 0.508011 ], [ 0.49425800000000003, 0.141462, 0.507988 ], [ 0.500438, 0.14371899999999999, 0.50792 ], [ 0.506629, 0.14595799999999998, 0.507806 ], [ 0.512831, 0.148179, 0.507648 ], [ 0.519045, 0.150383, 0.507443 ], [ 0.52527, 0.152569, 0.5071920000000001 ], [ 0.5315070000000001, 0.15473900000000002, 0.506895 ], [ 0.537755, 0.156894, 0.506551 ], [ 0.544015, 0.159033, 0.506159 ], [ 0.550287, 0.161158, 0.505719 ], [ 0.556571, 0.163269, 0.50523 ], [ 0.562866, 0.16536800000000001, 0.504692 ], [ 0.569172, 0.167454, 0.504105 ], [ 0.5754900000000001, 0.16953000000000001, 0.503466 ], [ 0.5818190000000001, 0.171596, 0.502777 ], [ 0.588158, 0.173652, 0.502035 ], [ 0.594508, 0.175701, 0.501241 ], [ 0.600868, 0.177743, 0.500394 ], [ 0.6072379999999999, 0.179779, 0.49949199999999994 ], [ 0.613617, 0.181811, 0.498536 ], [ 0.620005, 0.18384, 0.497524 ], [ 0.626401, 0.185867, 0.49645599999999995 ], [ 0.6328050000000001, 0.187893, 0.495332 ], [ 0.639216, 0.189921, 0.49415 ], [ 0.645633, 0.19195199999999998, 0.49291 ], [ 0.652056, 0.193986, 0.49161099999999996 ], [ 0.658483, 0.196027, 0.49025299999999994 ], [ 0.6649149999999999, 0.198075, 0.48883599999999994 ], [ 0.671349, 0.20013299999999998, 0.48735799999999996 ], [ 0.677786, 0.202203, 0.48581899999999995 ], [ 0.684224, 0.20428600000000002, 0.48421900000000007 ], [ 0.690661, 0.20638399999999998, 0.48255800000000004 ], [ 0.697098, 0.208501, 0.480835 ], [ 0.7035319999999999, 0.21063800000000002, 0.479049 ], [ 0.709962, 0.212797, 0.477201 ], [ 0.716387, 0.214982, 0.47529000000000005 ], [ 0.7228049999999999, 0.21719400000000003, 0.47331599999999996 ], [ 0.729216, 0.21943700000000002, 0.471279 ], [ 0.735616, 0.221713, 0.46918 ], [ 0.742004, 0.224025, 0.46701800000000004 ], [ 0.748378, 0.226377, 0.46479400000000004 ], [ 0.754737, 0.22877200000000003, 0.462509 ], [ 0.761077, 0.23121399999999998, 0.46016200000000007 ], [ 0.767398, 0.233705, 0.457755 ], [ 0.773695, 0.23624900000000001, 0.45528899999999994 ], [ 0.779968, 0.238851, 0.45276500000000003 ], [ 0.786212, 0.241514, 0.450184 ], [ 0.792427, 0.244242, 0.447543 ], [ 0.798608, 0.24704, 0.444848 ], [ 0.804752, 0.249911, 0.44210200000000005 ], [ 0.8108549999999999, 0.252861, 0.43930499999999995 ], [ 0.816914, 0.25589500000000004, 0.436461 ], [ 0.822926, 0.259016, 0.433573 ], [ 0.828886, 0.262229, 0.430644 ], [ 0.8347910000000001, 0.26554, 0.42767099999999997 ], [ 0.8406359999999999, 0.268953, 0.42466600000000004 ], [ 0.846416, 0.272473, 0.421631 ], [ 0.8521259999999999, 0.276106, 0.41857300000000003 ], [ 0.8577629999999999, 0.27985699999999997, 0.415496 ], [ 0.8633200000000001, 0.283729, 0.412403 ], [ 0.8687929999999999, 0.287728, 0.409303 ], [ 0.874176, 0.291859, 0.40620500000000004 ], [ 0.8794639999999999, 0.296125, 0.403118 ], [ 0.8846510000000001, 0.30053, 0.400047 ], [ 0.889731, 0.305079, 0.39700199999999997 ], [ 0.8946999999999999, 0.30977299999999997, 0.393995 ], [ 0.8995519999999999, 0.314616, 0.39103699999999997 ], [ 0.9042809999999999, 0.31961, 0.388137 ], [ 0.9088839999999999, 0.324755, 0.385308 ], [ 0.913354, 0.330052, 0.382563 ], [ 0.917689, 0.3355, 0.379915 ], [ 0.921884, 0.341098, 0.37737600000000004 ], [ 0.925937, 0.34684400000000004, 0.374959 ], [ 0.929845, 0.352734, 0.37267700000000004 ], [ 0.9336059999999999, 0.35876399999999997, 0.370541 ], [ 0.9372210000000001, 0.36492899999999995, 0.368567 ], [ 0.9406869999999999, 0.371224, 0.366762 ], [ 0.9440060000000001, 0.377643, 0.365136 ], [ 0.94718, 0.384178, 0.363701 ], [ 0.95021, 0.39082, 0.362468 ], [ 0.9530989999999999, 0.397563, 0.361438 ], [ 0.9558490000000001, 0.4044, 0.36061899999999997 ], [ 0.958464, 0.411324, 0.360014 ], [ 0.9609489999999999, 0.418323, 0.35963 ], [ 0.9633100000000001, 0.42539, 0.359469 ], [ 0.965549, 0.432519, 0.359529 ], [ 0.967671, 0.439703, 0.35981 ], [ 0.96968, 0.446936, 0.360311 ], [ 0.9715820000000001, 0.45420999999999995, 0.36103 ], [ 0.973381, 0.46152, 0.361965 ], [ 0.9750820000000001, 0.46886099999999997, 0.363111 ], [ 0.97669, 0.47622600000000004, 0.364466 ], [ 0.97821, 0.48361200000000004, 0.366025 ], [ 0.979645, 0.491014, 0.367783 ], [ 0.9810000000000001, 0.498428, 0.369734 ], [ 0.9822789999999999, 0.505851, 0.371874 ], [ 0.9834849999999999, 0.51328, 0.374198 ], [ 0.9846220000000001, 0.520713, 0.37669800000000003 ], [ 0.985693, 0.5281480000000001, 0.379371 ], [ 0.9867000000000001, 0.535582, 0.38221 ], [ 0.987646, 0.543015, 0.38521 ], [ 0.988533, 0.550446, 0.388365 ], [ 0.989363, 0.5578730000000001, 0.391671 ], [ 0.990138, 0.565296, 0.39512200000000003 ], [ 0.990871, 0.5727059999999999, 0.398714 ], [ 0.991558, 0.580107, 0.40244099999999994 ], [ 0.9921960000000001, 0.587502, 0.406299 ], [ 0.9927849999999999, 0.594891, 0.410283 ], [ 0.993326, 0.602275, 0.41439000000000004 ], [ 0.993834, 0.6096440000000001, 0.418613 ], [ 0.994309, 0.6169990000000001, 0.42295 ], [ 0.9947380000000001, 0.62435, 0.427397 ], [ 0.995122, 0.631696, 0.43195100000000003 ], [ 0.99548, 0.639027, 0.43660699999999997 ], [ 0.99581, 0.646344, 0.441361 ], [ 0.996096, 0.653659, 0.446213 ], [ 0.9963409999999999, 0.6609689999999999, 0.45115999999999995 ], [ 0.99658, 0.668256, 0.456192 ], [ 0.9967750000000001, 0.6755410000000001, 0.46131399999999995 ], [ 0.9969250000000001, 0.682828, 0.466526 ], [ 0.997077, 0.690088, 0.47181100000000004 ], [ 0.9971859999999999, 0.697349, 0.477182 ], [ 0.9972540000000001, 0.704611, 0.482635 ], [ 0.997325, 0.711848, 0.48815400000000003 ], [ 0.9973509999999999, 0.719089, 0.493755 ], [ 0.9973509999999999, 0.726324, 0.499428 ], [ 0.9973409999999999, 0.733545, 0.5051669999999999 ], [ 0.997285, 0.740772, 0.510983 ], [ 0.997228, 0.747981, 0.516859 ], [ 0.997138, 0.75519, 0.522806 ], [ 0.9970190000000001, 0.7623979999999999, 0.528821 ], [ 0.9968980000000001, 0.7695909999999999, 0.5348919999999999 ], [ 0.9967269999999999, 0.776795, 0.5410389999999999 ], [ 0.996571, 0.7839769999999999, 0.5472330000000001 ], [ 0.996369, 0.791167, 0.553499 ], [ 0.996162, 0.7983480000000001, 0.55982 ], [ 0.995932, 0.805527, 0.566202 ], [ 0.9956799999999999, 0.812706, 0.572645 ], [ 0.9954240000000001, 0.819875, 0.57914 ], [ 0.995131, 0.8270519999999999, 0.585701 ], [ 0.994851, 0.8342129999999999, 0.592307 ], [ 0.994524, 0.8413869999999999, 0.598983 ], [ 0.994222, 0.8485400000000001, 0.605696 ], [ 0.993866, 0.855711, 0.612482 ], [ 0.9935449999999999, 0.8628589999999999, 0.619299 ], [ 0.9931699999999999, 0.8700240000000001, 0.626189 ], [ 0.992831, 0.877168, 0.6331089999999999 ], [ 0.99244, 0.88433, 0.640099 ], [ 0.992089, 0.89147, 0.647116 ], [ 0.9916879999999999, 0.898627, 0.654202 ], [ 0.9913320000000001, 0.905763, 0.6613089999999999 ], [ 0.99093, 0.9129149999999999, 0.668481 ], [ 0.99057, 0.920049, 0.675675 ], [ 0.990175, 0.927196, 0.6829259999999999 ], [ 0.9898149999999999, 0.934329, 0.690198 ], [ 0.9894339999999999, 0.94147, 0.697519 ], [ 0.989077, 0.9486039999999999, 0.704863 ], [ 0.988717, 0.9557420000000001, 0.712242 ], [ 0.988367, 0.9628780000000001, 0.719649 ], [ 0.988033, 0.970012, 0.727077 ], [ 0.9876910000000001, 0.977154, 0.7345360000000001 ], [ 0.987387, 0.984288, 0.742002 ], [ 0.9870530000000001, 0.9914379999999999, 0.7495040000000001 ] ];
  var magma = matplotlibScale(_magma_data);
  var _inferno_data = [ [ 1.462e-3, 4.66e-4, 1.3866e-2 ], [ 2.267e-3, 1.2699999999999999e-3, 1.857e-2 ], [ 3.299e-3, 2.249e-3, 2.4239000000000004e-2 ], [ 4.547e-3, 3.392e-3, 3.0909e-2 ], [ 6.006e-3, 4.692e-3, 3.8557999999999995e-2 ], [ 7.6760000000000005e-3, 6.136000000000001e-3, 4.6836e-2 ], [ 9.561e-3, 7.713e-3, 5.514300000000001e-2 ], [ 1.1663000000000001e-2, 9.417e-3, 6.346e-2 ], [ 1.3994999999999999e-2, 1.1225e-2, 7.186200000000001e-2 ], [ 1.6561e-2, 1.3136e-2, 8.028199999999999e-2 ], [ 1.9373e-2, 1.5133000000000002e-2, 8.8767e-2 ], [ 2.2447e-2, 1.7199e-2, 9.7327e-2 ], [ 2.5793e-2, 1.9331e-2, 0.10593 ], [ 2.9432000000000003e-2, 2.1503e-2, 0.114621 ], [ 3.3385e-2, 2.3702e-2, 0.123397 ], [ 3.7668e-2, 2.5921000000000007e-2, 0.132232 ], [ 4.2253e-2, 2.8138999999999997e-2, 0.14114100000000002 ], [ 4.6915e-2, 3.0324e-2, 0.15016400000000002 ], [ 5.1644e-2, 3.2473999999999996e-2, 0.159254 ], [ 5.644899999999999e-2, 3.4569e-2, 0.168414 ], [ 6.1340000000000006e-2, 3.659e-2, 0.177642 ], [ 6.6331e-2, 3.8504e-2, 0.186962 ], [ 7.142899999999999e-2, 4.0293999999999996e-2, 0.196354 ], [ 7.6637e-2, 4.1905000000000005e-2, 0.205799 ], [ 8.1962e-2, 4.3328e-2, 0.215289 ], [ 8.741099999999999e-2, 4.4556000000000005e-2, 0.224813 ], [ 9.298999999999999e-2, 4.5583e-2, 0.234358 ], [ 9.8702e-2, 4.6402e-2, 0.24390399999999998 ], [ 0.10455099999999999, 4.7008e-2, 0.25343 ], [ 0.11053600000000001, 4.7399000000000004e-2, 0.262912 ], [ 0.11665600000000001, 4.757399999999999e-2, 0.272321 ], [ 0.12290799999999999, 4.7535999999999995e-2, 0.281624 ], [ 0.129285, 4.7293e-2, 0.290788 ], [ 0.135778, 4.6855999999999995e-2, 0.299776 ], [ 0.142378, 4.6242e-2, 0.30855299999999997 ], [ 0.149073, 4.5468e-2, 0.317085 ], [ 0.15585, 4.4559e-2, 0.325338 ], [ 0.162689, 4.3554e-2, 0.333277 ], [ 0.16957499999999998, 4.2489e-2, 0.340874 ], [ 0.176493, 4.1402e-2, 0.348111 ], [ 0.183429, 4.0329e-2, 0.35497100000000004 ], [ 0.190367, 3.9309e-2, 0.36144699999999996 ], [ 0.197297, 3.8400000000000004e-2, 0.367535 ], [ 0.204209, 3.7632e-2, 0.373238 ], [ 0.21109499999999998, 3.703e-2, 0.37856300000000004 ], [ 0.217949, 3.6615e-2, 0.38352200000000003 ], [ 0.224763, 3.640500000000001e-2, 0.388129 ], [ 0.23153800000000002, 3.640500000000001e-2, 0.39239999999999997 ], [ 0.238273, 3.6621e-2, 0.396353 ], [ 0.244967, 3.7055e-2, 0.400007 ], [ 0.25162, 3.7705e-2, 0.403378 ], [ 0.258234, 3.8571e-2, 0.406485 ], [ 0.26481, 3.9647e-2, 0.40934499999999996 ], [ 0.271347, 4.0922e-2, 0.411976 ], [ 0.27785000000000004, 4.2352999999999995e-2, 0.414392 ], [ 0.284321, 4.3933e-2, 0.416608 ], [ 0.290763, 4.5644000000000004e-2, 0.41863700000000004 ], [ 0.297178, 4.747e-2, 0.420491 ], [ 0.303568, 4.939600000000001e-2, 0.422182 ], [ 0.30993499999999996, 5.1407e-2, 0.423721 ], [ 0.316282, 5.349e-2, 0.42511599999999994 ], [ 0.32261, 5.5633999999999996e-2, 0.426377 ], [ 0.328921, 5.7827e-2, 0.427511 ], [ 0.335217, 6.006e-2, 0.428524 ], [ 0.3415, 6.2325e-2, 0.429425 ], [ 0.347771, 6.461599999999999e-2, 0.430217 ], [ 0.354032, 6.6925e-2, 0.43090599999999996 ], [ 0.360284, 6.924699999999999e-2, 0.43149699999999996 ], [ 0.366529, 7.157899999999999e-2, 0.431994 ], [ 0.372768, 7.3915e-2, 0.4324 ], [ 0.37900100000000003, 7.6253e-2, 0.43271899999999996 ], [ 0.385228, 7.8591e-2, 0.43295500000000003 ], [ 0.391453, 8.0927e-2, 0.43310899999999997 ], [ 0.39767399999999997, 8.3257e-2, 0.433183 ], [ 0.40389400000000003, 8.558e-2, 0.433179 ], [ 0.41011300000000006, 8.7896e-2, 0.43309800000000004 ], [ 0.416331, 9.0203e-2, 0.432943 ], [ 0.42254899999999995, 9.2501e-2, 0.432714 ], [ 0.428768, 9.479e-2, 0.43241199999999996 ], [ 0.434987, 9.706899999999999e-2, 0.43203899999999995 ], [ 0.441207, 9.9338e-2, 0.43159400000000003 ], [ 0.44742800000000005, 0.101597, 0.43108 ], [ 0.45365099999999997, 0.10384800000000001, 0.43049799999999994 ], [ 0.459875, 0.10608900000000002, 0.42984600000000006 ], [ 0.46609999999999996, 0.108322, 0.429125 ], [ 0.47232799999999997, 0.11054699999999999, 0.428334 ], [ 0.47855800000000004, 0.112764, 0.427475 ], [ 0.48478899999999997, 0.11497399999999999, 0.42654800000000004 ], [ 0.49102199999999996, 0.117179, 0.425552 ], [ 0.497257, 0.11937899999999999, 0.42448800000000003 ], [ 0.503493, 0.12157500000000002, 0.42335599999999995 ], [ 0.50973, 0.12376899999999999, 0.42215600000000003 ], [ 0.5159670000000001, 0.12596000000000002, 0.420887 ], [ 0.522206, 0.12815, 0.41954900000000006 ], [ 0.528444, 0.13034099999999998, 0.418142 ], [ 0.534683, 0.13253399999999999, 0.416667 ], [ 0.5409200000000001, 0.13472900000000002, 0.415123 ], [ 0.547157, 0.136929, 0.413511 ], [ 0.553392, 0.139134, 0.411829 ], [ 0.559624, 0.141346, 0.41007800000000005 ], [ 0.5658540000000001, 0.143567, 0.408258 ], [ 0.5720810000000001, 0.145797, 0.40636900000000004 ], [ 0.5783039999999999, 0.14803899999999998, 0.40441099999999996 ], [ 0.584521, 0.15029399999999998, 0.40238500000000005 ], [ 0.590734, 0.152563, 0.40029000000000003 ], [ 0.59694, 0.154848, 0.398125 ], [ 0.603139, 0.15715099999999999, 0.395891 ], [ 0.60933, 0.159474, 0.393589 ], [ 0.615513, 0.16181700000000002, 0.391219 ], [ 0.621685, 0.164184, 0.388781 ], [ 0.627847, 0.166575, 0.38627599999999995 ], [ 0.633998, 0.168992, 0.383704 ], [ 0.640135, 0.171438, 0.381065 ], [ 0.6462600000000001, 0.17391399999999999, 0.378359 ], [ 0.652369, 0.176421, 0.37558600000000003 ], [ 0.658463, 0.178962, 0.37274799999999997 ], [ 0.66454, 0.181539, 0.369846 ], [ 0.670599, 0.184153, 0.366879 ], [ 0.676638, 0.186807, 0.363849 ], [ 0.6826559999999999, 0.18950099999999998, 0.360757 ], [ 0.688653, 0.192239, 0.357603 ], [ 0.694627, 0.195021, 0.354388 ], [ 0.7005760000000001, 0.197851, 0.351113 ], [ 0.7065, 0.20072800000000002, 0.347777 ], [ 0.712396, 0.203656, 0.344383 ], [ 0.718264, 0.206636, 0.340931 ], [ 0.724103, 0.20966999999999997, 0.337424 ], [ 0.7299089999999999, 0.212759, 0.333861 ], [ 0.7356830000000001, 0.21590600000000001, 0.330245 ], [ 0.7414229999999999, 0.21911200000000003, 0.32657600000000003 ], [ 0.747127, 0.22237800000000002, 0.322856 ], [ 0.752794, 0.22570600000000002, 0.319085 ], [ 0.758422, 0.22909700000000002, 0.315266 ], [ 0.7640100000000001, 0.232554, 0.311399 ], [ 0.769556, 0.236077, 0.307485 ], [ 0.7750589999999999, 0.239667, 0.303526 ], [ 0.780517, 0.243327, 0.299523 ], [ 0.785929, 0.247056, 0.295477 ], [ 0.791293, 0.250856, 0.29139 ], [ 0.7966070000000001, 0.25472799999999995, 0.287264 ], [ 0.801871, 0.25867399999999996, 0.283099 ], [ 0.807082, 0.26269200000000004, 0.278898 ], [ 0.8122389999999999, 0.266786, 0.274661 ], [ 0.8173410000000001, 0.27095400000000003, 0.27039 ], [ 0.8223860000000001, 0.275197, 0.266085 ], [ 0.8273720000000001, 0.27951699999999996, 0.26175 ], [ 0.8322990000000001, 0.28391299999999997, 0.25738300000000003 ], [ 0.837165, 0.288385, 0.252988 ], [ 0.841969, 0.292933, 0.248564 ], [ 0.846709, 0.297559, 0.24411299999999997 ], [ 0.851384, 0.30226000000000003, 0.23963600000000002 ], [ 0.855992, 0.30703800000000003, 0.23513299999999998 ], [ 0.860533, 0.311892, 0.230606 ], [ 0.8650059999999999, 0.316822, 0.22605499999999998 ], [ 0.8694089999999999, 0.321827, 0.221482 ], [ 0.8737410000000001, 0.32690600000000003, 0.216886 ], [ 0.878001, 0.33205999999999997, 0.21226799999999998 ], [ 0.882188, 0.337287, 0.207628 ], [ 0.886302, 0.342586, 0.20296799999999998 ], [ 0.890341, 0.34795699999999996, 0.19828600000000002 ], [ 0.8943049999999999, 0.353399, 0.193584 ], [ 0.8981920000000001, 0.358911, 0.18885999999999997 ], [ 0.902003, 0.364492, 0.184116 ], [ 0.905735, 0.37014, 0.17934999999999998 ], [ 0.9093899999999999, 0.375856, 0.174563 ], [ 0.9129659999999999, 0.381636, 0.16975500000000002 ], [ 0.9164619999999999, 0.387481, 0.16492400000000002 ], [ 0.9198790000000001, 0.393389, 0.16007 ], [ 0.9232150000000001, 0.399359, 0.155193 ], [ 0.9264699999999999, 0.405389, 0.150292 ], [ 0.929644, 0.41147900000000004, 0.145367 ], [ 0.932737, 0.41762699999999997, 0.140417 ], [ 0.9357469999999999, 0.423831, 0.13544 ], [ 0.9386749999999999, 0.430091, 0.130438 ], [ 0.941521, 0.436405, 0.125409 ], [ 0.944285, 0.442772, 0.120354 ], [ 0.946965, 0.449191, 0.115272 ], [ 0.949562, 0.45565999999999995, 0.110164 ], [ 0.952075, 0.46217800000000003, 0.10503100000000001 ], [ 0.954506, 0.46874399999999994, 9.9874e-2 ], [ 0.9568519999999999, 0.475356, 9.4695e-2 ], [ 0.9591139999999999, 0.48201400000000005, 8.9499e-2 ], [ 0.9612930000000001, 0.488716, 8.4289e-2 ], [ 0.963387, 0.495462, 7.9073e-2 ], [ 0.965397, 0.5022490000000001, 7.385900000000001e-2 ], [ 0.967322, 0.5090779999999999, 6.8659e-2 ], [ 0.969163, 0.515946, 6.3488e-2 ], [ 0.970919, 0.522853, 5.8367e-2 ], [ 0.97259, 0.529798, 5.3323999999999996e-2 ], [ 0.9741759999999999, 0.53678, 4.8392000000000004e-2 ], [ 0.9756769999999999, 0.543798, 4.3618e-2 ], [ 0.9770920000000001, 0.55085, 3.905e-2 ], [ 0.9784219999999999, 0.557937, 3.4931000000000004e-2 ], [ 0.9796659999999999, 0.565057, 3.1409e-2 ], [ 0.9808239999999999, 0.572209, 2.8508e-2 ], [ 0.9818950000000001, 0.579392, 2.6250000000000002e-2 ], [ 0.9828810000000001, 0.586606, 2.4661e-2 ], [ 0.983779, 0.593849, 2.3769999999999996e-2 ], [ 0.984591, 0.6011219999999999, 2.3606e-2 ], [ 0.9853149999999999, 0.608422, 2.4201999999999998e-2 ], [ 0.9859519999999999, 0.61575, 2.5591999999999997e-2 ], [ 0.986502, 0.623105, 2.7814e-2 ], [ 0.9869640000000001, 0.630485, 3.0908e-2 ], [ 0.9873369999999999, 0.63789, 3.4916e-2 ], [ 0.987622, 0.64532, 3.9886e-2 ], [ 0.987819, 0.652773, 4.5580999999999997e-2 ], [ 0.9879260000000001, 0.66025, 5.175e-2 ], [ 0.9879450000000001, 0.667748, 5.8329000000000006e-2 ], [ 0.987874, 0.6752670000000001, 6.5257e-2 ], [ 0.9877140000000001, 0.682807, 7.2489e-2 ], [ 0.9874639999999999, 0.690366, 7.998999999999999e-2 ], [ 0.987124, 0.697944, 8.773099999999999e-2 ], [ 0.986694, 0.70554, 9.5694e-2 ], [ 0.986175, 0.7131529999999999, 0.103863 ], [ 0.985566, 0.720782, 0.112229 ], [ 0.9848649999999999, 0.728427, 0.120785 ], [ 0.984075, 0.736087, 0.129527 ], [ 0.9831960000000001, 0.7437579999999999, 0.138453 ], [ 0.9822279999999999, 0.751442, 0.147565 ], [ 0.9811730000000001, 0.759135, 0.156863 ], [ 0.9800319999999999, 0.766837, 0.166353 ], [ 0.978806, 0.774545, 0.176037 ], [ 0.977497, 0.782258, 0.185923 ], [ 0.976108, 0.7899740000000001, 0.196018 ], [ 0.974638, 0.797692, 0.20633200000000002 ], [ 0.973088, 0.805409, 0.216877 ], [ 0.971468, 0.8131220000000001, 0.227658 ], [ 0.969783, 0.8208249999999999, 0.238686 ], [ 0.968041, 0.828515, 0.249972 ], [ 0.9662430000000001, 0.836191, 0.261534 ], [ 0.9643940000000001, 0.843848, 0.273391 ], [ 0.9625170000000001, 0.8514760000000001, 0.28554599999999997 ], [ 0.9606260000000001, 0.8590690000000001, 0.29801 ], [ 0.9587199999999999, 0.8666240000000001, 0.31082 ], [ 0.956834, 0.8741289999999999, 0.323974 ], [ 0.954997, 0.881569, 0.337475 ], [ 0.9532149999999999, 0.8889419999999999, 0.351369 ], [ 0.9515460000000001, 0.8962260000000001, 0.36562700000000004 ], [ 0.950018, 0.9034090000000001, 0.380271 ], [ 0.9486829999999999, 0.910473, 0.395289 ], [ 0.9475939999999999, 0.917399, 0.410665 ], [ 0.946809, 0.9241680000000001, 0.426373 ], [ 0.946392, 0.9307610000000001, 0.44236699999999995 ], [ 0.9464029999999999, 0.937159, 0.458592 ], [ 0.946903, 0.943348, 0.47497 ], [ 0.9479369999999999, 0.9493180000000001, 0.491426 ], [ 0.949545, 0.955063, 0.50786 ], [ 0.95174, 0.960587, 0.524203 ], [ 0.954529, 0.9658960000000001, 0.5403610000000001 ], [ 0.9578960000000001, 0.971003, 0.5562750000000001 ], [ 0.9618119999999999, 0.975924, 0.571925 ], [ 0.966249, 0.9806779999999999, 0.587206 ], [ 0.971162, 0.985282, 0.602154 ], [ 0.976511, 0.989753, 0.61676 ], [ 0.982257, 0.9941089999999999, 0.631017 ], [ 0.9883620000000001, 0.9983639999999999, 0.6449239999999999 ] ];
  var inferno = matplotlibScale(_inferno_data);
  exports["viridis"] = viridis;
  exports["plasma"] = plasma;
  exports["inferno"] = inferno;
  exports["magma"] = magma;;
 
})(PS["Color.Scale.Perceptual"] = PS["Color.Scale.Perceptual"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Color = PS["Color"];     
  var triad = function (c) {
      return [ c, Color.rotateHue(-120.0)(c), Color.rotateHue(120.0)(c) ];
  };
  var tetrad = function (c) {
      return [ c, Color.rotateHue(30.0)(c), Color.rotateHue(180.0)(c), Color.rotateHue(210.0)(c) ];
  };
  var splitComplementary = function (c) {
      return [ c, Color.rotateHue(-165.0)(c), Color.rotateHue(165.0)(c) ];
  };
  var shades = function (c) {
      return [ Color.lighten(0.2)(c), c, Color.darken(0.2)(c) ];
  };
  var analogous = function (c) {
      return [ Color.rotateHue(-30.0)(c), c, Color.rotateHue(30.0)(c) ];
  };
  exports["tetrad"] = tetrad;
  exports["splitComplementary"] = splitComplementary;
  exports["triad"] = triad;
  exports["analogous"] = analogous;
  exports["shades"] = shades;;
 
})(PS["Color.Scheme.Harmonic"] = PS["Color.Scheme.Harmonic"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Color = PS["Color"];     
  var yellow = Color.rgb(255)(235)(59);
  var teal = Color.rgb(0)(150)(136);
  var red = Color.rgb(244)(67)(54);
  var purple = Color.rgb(156)(39)(176);
  var pink = Color.rgb(233)(30)(99);
  var orange = Color.rgb(255)(152)(0);
  var lime = Color.rgb(205)(220)(57);
  var lightGreen = Color.rgb(139)(195)(74);
  var lightBlue = Color.rgb(3)(169)(244);
  var indigo = Color.rgb(63)(81)(181);
  var grey = Color.rgb(158)(158)(158);
  var green = Color.rgb(76)(175)(80);
  var deepPurple = Color.rgb(103)(58)(183);
  var deepOrange = Color.rgb(255)(87)(34);
  var cyan = Color.rgb(0)(188)(212);
  var brown = Color.rgb(121)(85)(72);
  var blueGrey = Color.rgb(96)(125)(139);
  var blue = Color.rgb(33)(150)(243);
  var amber = Color.rgb(255)(193)(7);
  exports["blueGrey"] = blueGrey;
  exports["grey"] = grey;
  exports["brown"] = brown;
  exports["deepOrange"] = deepOrange;
  exports["orange"] = orange;
  exports["amber"] = amber;
  exports["yellow"] = yellow;
  exports["lime"] = lime;
  exports["lightGreen"] = lightGreen;
  exports["green"] = green;
  exports["teal"] = teal;
  exports["cyan"] = cyan;
  exports["lightBlue"] = lightBlue;
  exports["blue"] = blue;
  exports["indigo"] = indigo;
  exports["deepPurple"] = deepPurple;
  exports["purple"] = purple;
  exports["pink"] = pink;
  exports["red"] = red;;
 
})(PS["Color.Scheme.MaterialDesign"] = PS["Color.Scheme.MaterialDesign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  }

  exports._makeAff = function (cb) {
    return function(success, error) {
      return cb(function(e) {
        return function() {
          error(e);
        };
      })(function(v) {
        return function() {
          try {
            success(v);
          } catch (e) {
            error(e);
          }
        };
      })();
    }
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      try {
        success(v);
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(f(v));
        } catch (e) {
          error(e);
        }
      }, error);
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                try {
                  s(true);
                } catch (e) {
                  f(e);
                }
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        try {
          successT(v)();
        } catch (e) {
          errorT(e)();
        }
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      try {
        success(e());
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.liftEff = liftEff;
  };                                 
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;;
 
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["throwException"] = $foreign.throwException;
  exports["error"] = $foreign.error;;
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"](functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Prelude.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Prelude.Applicative(function () {
      return applyEither;
  }, Right.create);
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var launchAff = function ($19) {
      return runAff(Control_Monad_Eff_Exception.throwException)(Prelude["const"](Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit)))($foreign._unsafeInterleaveAff($19));
  };
  var functorAff = new Prelude.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var applyAff = new Prelude.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Prelude["<$>"](functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Prelude.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
  var alwaysCanceler = Prelude["const"](Prelude.pure(applicativeAff)(true));
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                       
  var bindAff = new Prelude.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Prelude.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["runAff"] = runAff;
  exports["nonCanceler"] = nonCanceler;
  exports["makeAff'"] = makeAff$prime;
  exports["makeAff"] = makeAff;
  exports["launchAff"] = launchAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;;
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // module Data.Argonaut.Core

  function id(x) {
      return x;
  } 

  exports._foldJson = function(isNull, isBool, isNum, isStr, isArr, isObj, j) {
      if (j == null) return isNull(null);
      else if (typeof j === 'boolean') return isBool(j);
      else if (typeof j === 'number') return isNum(j);
      else if (typeof j === 'string') return isStr(j);
      else if (Object.prototype.toString.call(j) === '[object Array]')
          return isArr(j);
      else return isObj(j);
  };

  function _compare(EQ, GT, LT, a, b) {
      function isArray(a) {
          return Object.prototype.toString.call(a) === '[object Array]';
      }
      function keys(o) {
          var a = [];
          for (var k in o) {
              a.push(k);
          }
          return a;
      }

      if (a == null) {
          if (b == null) return EQ;
          else return LT;
      } else if (typeof a === 'boolean') {
          if (typeof b === 'boolean') {
              // boolean / boolean
              if (a === b) return EQ;
              else if (a == false) return LT;
              else return GT;
          } else if (b == null) return GT;
          else return LT;
      } else if (typeof a === 'number') {
          if (typeof b === 'number') {
              if (a === b) return EQ;
              else if (a < b) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else return LT;
      } else if (typeof a === 'string') {
          if (typeof b === 'string') {
              if (a === b) return EQ;
              else if (a < b) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else return LT;
      } else if (isArray(a)) {
          if (isArray(b)) {
              for (var i = 0; i < Math.min(a.length, b.length); i++) {
                  var c = _compare(EQ, GT, LT, a[i], b[i]);
                
                  if (c !== EQ) return c;
              }
              if (a.length === b.length) return EQ;
              else if (a.length < b.length) return LT;
              else return GT;
          } else if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else if (typeof b === 'string') return GT;
          else return LT;
      }
      else {
          if (b == null) return GT;
          else if (typeof b === 'boolean') return GT;
          else if (typeof b === 'number') return GT;
          else if (typeof b === 'string') return GT;
          else if (isArray(b)) return GT;
          else {
              var akeys = keys(a);
              var bkeys = keys(b);
            
              var keys = akeys.concat(bkeys).sort();
            
              for (var i = 0; i < keys.length; i++) {
                  var k = keys[i];
                
                  if (a[k] === undefined) return LT;
                  else if (b[k] === undefined) return GT;
                
                  var c = _compare(EQ, GT, LT, a[k], b[k]);
                
                  if (c !== EQ) return c;
              }
            
              if (akeys.length === bkeys.length) return EQ;
              else if (akeys.length < bkeys.length) return LT;
              else return GT;
          }
      }
  };                          
 
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  /* global exports */
  "use strict";      

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect (f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }  
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["poke"] = $foreign.poke;
  exports["new"] = $foreign["new"];;
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };                                                                                 
  var lookup = Data_Function.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["lookup"] = lookup;;
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_StrMap = PS["Data.StrMap"];     
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isJsonType = verbJsonType(false)(Prelude["const"](true));
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), f, Prelude["const"](d), Prelude["const"](d), j);
          };
      };
  };                                        
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(f, Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(foldJsonNull);      
  var foldJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), Prelude["const"](d), f, Prelude["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(foldJsonArray);
  exports["toObject"] = toObject;
  exports["toArray"] = toArray;
  exports["isNull"] = isNull;
  exports["foldJsonObject"] = foldJsonObject;
  exports["foldJsonArray"] = foldJsonArray;
  exports["foldJsonString"] = foldJsonString;
  exports["foldJsonNull"] = foldJsonNull;;
 
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  var Type_Proxy = PS["Type.Proxy"];
  var Data_Monoid = PS["Data.Monoid"];     
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, function (x) {
      return new SString(x);
  });
  var genericNumber = new Generic(function (v) {
      if (v instanceof SNumber) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigNumber.value;
  }, function (x) {
      return new SNumber(x);
  });
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  exports["SigNumber"] = SigNumber;
  exports["SigString"] = SigString;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericNumber"] = genericNumber;
  exports["genericString"] = genericString;;
 
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  if (v1 instanceof Two && Prelude["<"](dictOrd)(v)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Two) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value4)) {
                      return new Data_Maybe.Just(v1.value5);
                  };
                  if (v1 instanceof Three && Prelude["<"](dictOrd)(v)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(v) && Prelude["<="](dictOrd)(v)(v1.value4))) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value6;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(Prelude["++"](Data_List.semigroupList)(keys(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  }; 
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_v = v.value1;
                      var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Leaf) {
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                          };
                          if (v1 instanceof Two && Prelude["<"](dictOrd)(k)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Two) {
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                              return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                          };
                          if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(k)(v1.value4)) {
                              return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                          };
                          if (v1 instanceof Three && Prelude["<"](dictOrd)(k)(v1.value1)) {
                              var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value0;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(k) && Prelude["<="](dictOrd)(k)(v1.value4))) {
                              var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 150, column 1 - line 151, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var fromList = function (dictOrd) {
      return fromFoldable(dictOrd)(Data_List.foldableList);
  };
  exports["keys"] = keys;
  exports["fromList"] = fromList;
  exports["fromFoldable"] = fromFoldable;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = empty;;
 
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];     
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.foldJsonString(new Data_Either.Left("Not a String"))(Data_Either.Right.create));   
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeJsonMaybe = function (dictDecodeJson) {
      return new DecodeJson(function (j) {
          if (Data_Argonaut_Core.isNull(j)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (Prelude.otherwise) {
              return Control_Alt["<|>"](Data_Either.altEither)(Prelude["<$>"](Data_Either.functorEither)(Data_Maybe.Just.create)(decodeJson(dictDecodeJson)(j)))(Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode line 68, column 1 - line 73, column 1: " + [ j.constructor.name ]);
      });
  };
  var decodeMaybe = function (dictDecodeJson) {
      return function (json) {
          return Data_Either.either(Prelude["const"](Data_Maybe.Nothing.value))(Prelude.pure(Data_Maybe.applicativeMaybe))(decodeJson(dictDecodeJson)(json));
      };
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson(function (json) {
          return Data_Maybe.maybe(new Data_Either.Left("Couldn't decode Array"))(Data_Either.Right.create)(Prelude.bind(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toArray(json))(function (v) {
              return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(decodeMaybe(dictDecodeJson))(v);
          }));
      });
  };
  exports["DecodeJson"] = DecodeJson;
  exports["decodeMaybe"] = decodeMaybe;
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonMaybe"] = decodeJsonMaybe;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeArray"] = decodeArray;;
 
})(PS["Data.Argonaut.Decode"] = PS["Data.Argonaut.Decode"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Encode = PS["Data.Argonaut.Encode"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var $qmark$greater$greater$eq = function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return new Data_Either.Right(v.value0);
          };
          return Data_Either.Left.create("Couldn't decode " + v1);
      };
  };
  exports["?>>="] = $qmark$greater$greater$eq;;
 
})(PS["Data.Argonaut.Combinators"] = PS["Data.Argonaut.Combinators"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign

  // jshint maxparams: 3
  exports.parseJSONImpl = function (left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_String = PS["Data.String"];     
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  };
  var showForeignError = new Prelude.Show(function (v) {
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Prelude.show(Prelude.showInt)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Prelude.show(Prelude.showString)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
      };
      if (v instanceof JSONError) {
          return "JSON error: " + v.value0;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  });
  var readString = unsafeReadTagged("String");
  var parseJSON = function (json) {
      return $foreign.parseJSONImpl(function ($32) {
          return Data_Either.Left.create(JSONError.create($32));
      }, Data_Either.Right.create, json);
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["parseJSON"] = parseJSON;
  exports["showForeignError"] = showForeignError;;
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Identity = function (x) {
      return x;
  };
  var runIdentity = function (v) {
      return v;
  };
  var functorIdentity = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Prelude.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Prelude.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Prelude.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Prelude.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;;
 
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Nullable

  exports["null"] = null;

  exports.notNull = function(x) {
      return x;
  }; 
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];     
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;;
 
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.cSelect = function(xs) {
    return function(toString) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(toString(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };

  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  exports.cColor = createComponent("color",
    function(initial) {
      var input = document.createElement("input");
      input.type = "color";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  var applicativeSignal = new Prelude.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Color = PS["Color"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var setupFlare = function (v) {
      return function __do() {
          var v1 = v();
          return {
              components: v1.value0, 
              signal: v1.value1
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return Signal.runSignal(Prelude.map(Signal.functorSignal)(handler)(v1.value1))();
              };
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Prelude.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (v) {
          return UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(functorFlare)(f))(v));
      };
  });
  var fieldset = function (label) {
      return function (v) {
          return UI(function __do() {
              var v1 = v();
              return new Flare([ $foreign.toFieldset(label)(v1.value0) ], v1.value1);
          });
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  var signal = Signal_Channel.subscribe(v);
                  return new Flare([ v1 ], signal);
              });
          };
      };
  };                           
  var intSlider = function (label) {
      return function (min) {
          return function (max) {
              return function ($$default) {
                  return createUI($foreign.cIntRange("range")(min)(max))(label)($$default);
              };
          };
      };
  };                                 
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };                               
  var select = function (label) {
      return function ($$default) {
          return function (xs) {
              return function (toString) {
                  return createUI($foreign.cSelect(xs)(toString))(label)($$default);
              };
          };
      };
  };                                     
  var color = function (label) {
      return function ($$default) {
          return Prelude["<$>"](functorUI)(function ($78) {
              return Data_Maybe.fromMaybe($$default)(Color.fromHexString($78));
          })(createUI($foreign.cColor)(label)(Color.toHexString($$default)));
      };
  };
  var applyFlare = new Prelude.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Prelude["<>"](Prelude.semigroupArray)(v.value0)(v1.value0), Prelude["<*>"](Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Prelude.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Prelude.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Prelude.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.pure(applicativeFlare)(x)));
  });
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["setupFlare"] = setupFlare;
  exports["fieldset"] = fieldset;
  exports["color"] = color;
  exports["select"] = select;
  exports["intSlider"] = intSlider;
  exports["numberSlider"] = numberSlider;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];     
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var $bang = function (dictAttributable) {
      return $$with(dictAttributable);
  };
  var text = function (s) {
      return new Content(s, new Return(Prelude.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), [  ], new Return(Prelude.unit));
      };
  };
  var functorMarkupM = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.map(functorMarkupM)(f)(v.value3));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute([ new Attr(key, value) ]);
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Prelude["<>"](Prelude.semigroupArray)(v.value2)(v1.value0), v.value3);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 79, column 1 - line 82, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Prelude.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Prelude.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.bind(bindMarkupM)(v.value3)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Prelude.Apply(function () {
      return functorMarkupM;
  }, Prelude.ap(monadMarkupM));
  var applicativeMarkupM = new Prelude.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  var semigroupMarkupM = new Prelude.Semigroup(function (x) {
      return function (y) {
          return Control_Apply["*>"](applyMarkupM)(x)(y);
      };
  });
  var monoidMarkup = new Data_Monoid.Monoid(function () {
      return semigroupMarkupM;
  }, new Return(Prelude.unit));
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["!"] = $bang;
  exports["attribute"] = attribute;
  exports["text"] = text;
  exports["parent"] = parent;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidMarkup"] = monoidMarkup;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;;
 
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Foldable = PS["Data.Foldable"];     
  var Element = (function () {
      function Element(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Element(value0, value1, value2);
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      return function ($18) {
          return Data_Map.fromList(Prelude.ordString)(Prelude.map(Data_List.functorList)(toTuple)(Data_List.toList(Data_Foldable.foldableArray)($18)));
      };
  })();
  var renderMarkup = function (v) {
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Just) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), renderMarkup(v.value1.value0)))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Nothing) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), Data_List.Nil.value))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return Data_List[":"](new Text(v.value0))(renderMarkup(v.value1));
      };
      if (v instanceof Text_Smolder_Markup.Return) {
          return Data_List.Nil.value;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;;
 
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];
  var Data_Monoid = PS["Data.Monoid"];     
  var renderNode = function (v) {
      if (v instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (v1) {
              if (v1 instanceof Data_List.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
          };
          var showAttrs = function (a1) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                      return "=\"" + (v1 + "\"");
                  })(Data_Map.lookup(Prelude.ordString)(k)(a1)));
              };
              return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(pair)(Data_Map.keys(a1)));
          };
          return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value2)));
      };
      if (v instanceof Text_Smolder_Renderer_Util.Text) {
          return v.value0;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var render = function ($8) {
      return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($8)));
  };
  exports["renderNode"] = renderNode;
  exports["render"] = render;;
 
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Signal_Channel = PS["Signal.Channel"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Flare = PS["Flare"];     
  var runFlareHTML = function (controls) {
      return function (target) {
          return function ($0) {
              return Flare.runFlare(controls)(target)(Prelude.map(Flare.functorUI)(Text_Smolder_Renderer_String.render)($0));
          };
      };
  };
  exports["runFlareHTML"] = runFlareHTML;;
 
})(PS["Flare.Smolder"] = PS["Flare.Smolder"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  "use strict";

  // module Network.HTTP.Affjax

  // jshint maxparams: 5
  exports._ajax = function (mkHeader, options, canceler, errback, callback) {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function () {
      var xhr = platformSpecific.newXHR();
      var fixedUrl = platformSpecific.fixupUrl(options.url);
      xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
      if (options.headers) {
        try {
          for (var i = 0, header; (header = options.headers[i]) != null; i++) {
            xhr.setRequestHeader(header.field, header.value);
          }
        }
        catch (e) {
          errback(e)();
        }
      }
      xhr.onerror = function () {
        errback(new Error("AJAX request failed: " + options.method + " " + options.url))();
      };
      xhr.onload = function () {
        callback({
          status: xhr.status,
          headers: xhr.getAllResponseHeaders().split("\n")
            .filter(function (header) {
              return header.length > 0;
            })
            .map(function (header) {
              var i = header.indexOf(":");
              return mkHeader(header.substring(0, i))(header.substring(i + 2));
            }),
          response: platformSpecific.getResponse(xhr)
        })();
      };
      xhr.responseType = options.responseType;
      xhr.send(options.content);
      return canceler(xhr);
    };
  };

  // jshint maxparams: 4
  exports._cancelAjax = function (xhr, cancelError, errback, callback) {
    return function () {
      try { xhr.abort(); } catch (e) { return callback(false)(); }
      return callback(true)();
    };
  };

 
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function(x) { return x; }
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;;
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var mimeTypeToString = function (v) {
      return v;
  };
  exports["mimeTypeToString"] = mimeTypeToString;;
 
})(PS["Network.HTTP.MimeType"] = PS["Network.HTTP.MimeType"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
  var applicationJSON = "application/json";
  exports["applicationJSON"] = applicationJSON;;
 
})(PS["Network.HTTP.MimeType.Common"] = PS["Network.HTTP.MimeType.Common"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
  var Network_HTTP_MimeType_Common = PS["Network.HTTP.MimeType.Common"];     
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  }; 
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(Unsafe_Coerce.unsafeCoerce($0));
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableUnit"] = requestableUnit;;
 
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
  var Network_HTTP_MimeType_Common = PS["Network.HTTP.MimeType.Common"];     
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 50, column 1 - line 51, column 1: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                                                     
  var responsableJson = new Respondable(function ($8) {
      return Data_Either.Right.create(Unsafe_Coerce.unsafeCoerce($8));
  }, new Data_Tuple.Tuple(new Data_Maybe.Just(Network_HTTP_MimeType_Common.applicationJSON), JSONResponse.value));                                                      
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["Respondable"] = Respondable;
  exports["fromResponse"] = fromResponse;
  exports["responseType"] = responseType;
  exports["responseTypeToString"] = responseTypeToString;
  exports["responsableJson"] = responsableJson;;
 
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var CustomMethod = (function () {
      function CustomMethod(value0) {
          this.value0 = value0;
      };
      CustomMethod.create = function (value0) {
          return new CustomMethod(value0);
      };
      return CustomMethod;
  })();
  var showMethod = new Prelude.Show(function (v) {
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof CustomMethod) {
          return "(CustomMethod " + (Prelude.show(Prelude.showString)(v.value0) + ")");
      };
      throw new Error("Failed pattern match at Network.HTTP.Method line 29, column 1 - line 41, column 1: " + [ v.constructor.name ]);
  });
  var methodToString = function (v) {
      if (v instanceof CustomMethod) {
          return v.value0;
      };
      return Prelude.show(showMethod)(v);
  };
  exports["DELETE"] = DELETE;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["OPTIONS"] = OPTIONS;
  exports["PATCH"] = PATCH;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["MOVE"] = MOVE;
  exports["COPY"] = COPY;
  exports["CustomMethod"] = CustomMethod;
  exports["methodToString"] = methodToString;
  exports["showMethod"] = showMethod;;
 
})(PS["Network.HTTP.Method"] = PS["Network.HTTP.Method"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];     
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Network_HTTP_MimeType.mimeTypeToString(v.value0);
      };
      if (v instanceof ContentType) {
          return Network_HTTP_MimeType.mimeTypeToString(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 28, column 1 - line 29, column 1: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 23, column 1 - line 24, column 1: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderValue"] = requestHeaderValue;
  exports["requestHeaderName"] = requestHeaderName;;
 
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;;
 
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_MimeType = PS["Network.HTTP.MimeType"];
  var Network_HTTP_Method = PS["Network.HTTP.Method"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var defaultRequest = {
      method: Network_HTTP_Method.GET.value, 
      url: "/", 
      headers: [  ], 
      content: Data_Maybe.Nothing.value, 
      username: Data_Maybe.Nothing.value, 
      password: Data_Maybe.Nothing.value
  };
  var cancelAjax = function (xhr) {
      return function (err) {
          return Control_Monad_Aff.makeAff(function (eb) {
              return function (cb) {
                  return $foreign._cancelAjax(xhr, err, eb, cb);
              };
          });
      };
  };
  var affjax$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              return function (eb) {
                  return function (cb) {
                      var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
                      var requestSettings = (function () {
                          var $51 = Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                          if ($51 instanceof Data_Maybe.Nothing) {
                              return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                          };
                          if ($51 instanceof Data_Maybe.Just) {
                              return new Data_Tuple.Tuple($51.value0.value0, new Data_Maybe.Just($51.value0.value1));
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 204, column 1 - line 209, column 1: " + [ $51.constructor.name ]);
                      })();
                      var fromResponse$prime = (function () {
                          var $55 = Data_Tuple.snd(responseSettings);
                          if ($55 instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                              return Control_Bind["<=<"](Data_Either.bindEither)(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind["<=<"](Data_Either.bindEither)(Data_Foreign.parseJSON)(Data_Foreign.readString));
                          };
                          return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
                      })();
                      var cb$prime = function (res) {
                          var $58 = Prelude["<$>"](Data_Either.functorEither)(function (v) {
                              var $56 = {};
                              for (var $57 in res) {
                                  if (res.hasOwnProperty($57)) {
                                      $56[$57] = res[$57];
                                  };
                              };
                              $56.response = v;
                              return $56;
                          })(fromResponse$prime(res.response));
                          if ($58 instanceof Data_Either.Left) {
                              return eb(Control_Monad_Eff_Exception.error(Prelude.show(Data_Foreign.showForeignError)($58.value0)));
                          };
                          if ($58 instanceof Data_Either.Right) {
                              return cb($58.value0);
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 204, column 1 - line 209, column 1: " + [ $58.constructor.name ]);
                      };
                      var addHeader = function (h) {
                          return function (hs) {
                              if (h instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Data_Function.on(Prelude.eq(Prelude.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(h.value0))(hs)) {
                                  return Data_Array.snoc(hs)(h.value0);
                              };
                              return hs;
                          };
                      };
                      var headers = addHeader(Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Prelude["<$>"](Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
                      var req$prime = {
                          method: Network_HTTP_Method.methodToString(req.method), 
                          url: req.url, 
                          headers: Prelude["<$>"](Prelude.functorArray)(function (h) {
                              return {
                                  field: Network_HTTP_RequestHeader.requestHeaderName(h), 
                                  value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                              };
                          })(headers), 
                          content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)), 
                          responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)), 
                          username: Data_Nullable.toNullable(req.username), 
                          password: Data_Nullable.toNullable(req.password)
                      };
                      return $foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime, cancelAjax, eb, cb$prime);
                  };
              };
          };
      };
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function ($76) {
              return Control_Monad_Aff["makeAff'"](affjax$prime(dictRequestable)(dictRespondable)($76));
          };
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $65 = {};
              for (var $66 in defaultRequest) {
                  if (defaultRequest.hasOwnProperty($66)) {
                      $65[$66] = defaultRequest[$66];
                  };
              };
              $65.url = u;
              return $65;
          })());
      };
  };
  exports["get"] = get;
  exports["affjax"] = affjax;
  exports["defaultRequest"] = defaultRequest;;
 
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // module Test.FlareCheck
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.appendTest = function(parentId) {
    return function(title) {
      return function(doc) {
        return function(elements) {
          return function() {
            var parent = document.getElementById(parentId);
            var fieldset = document.createElement("fieldset");
            fieldset.className = "flarecheck-test";
            var legend = document.createElement("legend");
            legend.textContent = title;
            fieldset.appendChild(legend);

            if (doc !== "") {
              var docEl = document.createElement("p");
              docEl.innerHTML = doc;
              fieldset.appendChild(docEl);
            }

            for (var i = 0; i < elements.length; i++) {
              fieldset.appendChild(elements[i]);
            }

            var output = document.createElement("div");
            output.className = "flarecheck-output";
            fieldset.appendChild(output);

            parent.appendChild(fieldset);

            return output;
          };
        };
      };
    };
  };

  // From http://stackoverflow.com/a/6234804/704831
  exports.escapeHTML = function(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  };

  exports.setText = function(output) {
    return function(str) {
      return function() {
        var pre = output.firstChild;
        if (!pre) {
          pre = document.createElement("pre");
          pre.className = "flarecheck-output-settext";
          output.appendChild(pre);
        }
        pre.textContent = str;
      };
    };
  };

  exports.setHTML = function(output) {
    return function(code) {
      return function() {
        output.innerHTML = code;
      };
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var span = Text_Smolder_Markup.parent("span");        
  var pre = Text_Smolder_Markup.parent("pre");  
  var p = Text_Smolder_Markup.parent("p");  
  var div = Text_Smolder_Markup.parent("div");
  var code = Text_Smolder_Markup.parent("code");
  var b = Text_Smolder_Markup.parent("b");
  exports["span"] = span;
  exports["pre"] = pre;
  exports["p"] = p;
  exports["div"] = div;
  exports["code"] = code;
  exports["b"] = b;;
 
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];   
  var title = Text_Smolder_Markup.attribute("title");    
  var style = Text_Smolder_Markup.attribute("style");
  var className = Text_Smolder_Markup.attribute("class");
  exports["title"] = title;
  exports["style"] = style;
  exports["className"] = className;;
 
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Test.FlareCheck"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Global = PS["Global"];
  var Type_Proxy = PS["Type.Proxy"];
  var Signal_Channel = PS["Signal.Channel"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Signal = PS["Signal"];
  var Flare = PS["Flare"];
  var SmallNumber = function (x) {
      return x;
  };
  var SmallInt = function (x) {
      return x;
  };
  var SetText = (function () {
      function SetText(value0) {
          this.value0 = value0;
      };
      SetText.create = function (value0) {
          return new SetText(value0);
      };
      return SetText;
  })();
  var SetHTML = (function () {
      function SetHTML(value0) {
          this.value0 = value0;
      };
      SetHTML.create = function (value0) {
          return new SetHTML(value0);
      };
      return SetHTML;
  })();
  var Flammable = function (spark) {
      this.spark = spark;
  };
  var Interactive = function (interactive) {
      this.interactive = interactive;
  };
  var tooltip = function (tip) {
      return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-tooltip")))(Text_Smolder_HTML_Attributes.title(tip));
  };
  var text = function (s) {
      return Text_Smolder_Markup.text($foreign.escapeHTML(s));
  };
  var spark = function (dict) {
      return dict.spark;
  };
  var render = function (output) {
      return function (v) {
          if (v instanceof SetText) {
              return $foreign.setText(output)(v.value0);
          };
          if (v instanceof SetHTML) {
              return $foreign.setHTML(output)(Text_Smolder_Renderer_String.render(v.value0));
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 370, column 1 - line 373, column 1: " + [ output.constructor.name, v.constructor.name ]);
      };
  };                                                                               
  var interactive = function (dict) {
      return dict.interactive;
  };
  var interactiveFunction = function (dictFlammable) {
      return function (dictInteractive) {
          return new Interactive(function (f) {
              return interactive(dictInteractive)(Prelude["<*>"](Flare.applyUI)(f)(spark(dictFlammable)));
          });
      };
  };
  var highlight = function (syntaxClass) {
      return function (value) {
          return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-" + syntaxClass))(text(value));
      };
  };
  var flareDoc$prime = function (dictInteractive) {
      return function (parentId) {
          return function (title) {
              return function (doc) {
                  return function (x) {
                      var flare = interactive(dictInteractive)(Prelude.pure(Flare.applicativeUI)(x));
                      return function __do() {
                          var v = Flare.setupFlare(flare)();
                          var docString = Data_Maybe.fromMaybe("")(doc);
                          var v1 = $foreign.appendTest(parentId)(title)(docString)(v.components)();
                          return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render(v1))(v.signal))();
                      };
                  };
              };
          };
      };
  };
  var flareCheck$prime = function (dictInteractive) {
      return function (id) {
          return function (label) {
              return flareDoc$prime(dictInteractive)(id)(label)(Data_Maybe.Nothing.value);
          };
      };
  };                                                                 
  var flammableSmallNumber = new Flammable(Prelude["<$>"](Flare.functorUI)(SmallNumber)(Flare.numberSlider("Number")(0.0)(1.0)(1.0e-5)(0.5)));
  var flammableSmallInt = new Flammable(Prelude["<$>"](Flare.functorUI)(SmallInt)(Flare.intSlider("Int")(0)(100)(1)));
  var constructor = function ($$long) {
      var parts = Data_String.split(".")($$long);
      var name = Data_Array_Unsafe.last(parts);
      var modString = (function () {
          var $71 = Data_Array.length(parts) === 1;
          if ($71) {
              return "Data constructor form unknown module";
          };
          if (!$71) {
              return $$long;
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 222, column 1 - line 223, column 1: " + [ $71.constructor.name ]);
      })();
      return tooltip(modString)(highlight("constructor")(name));
  };
  var prettyPrec = function (d) {
      return function (v) {
          if (v instanceof Data_Generic.SProd) {
              var showParen = function (v1) {
                  return function (x) {
                      if (!v1) {
                          return x;
                      };
                      if (v1) {
                          return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text("("))(function () {
                              return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(x)(function () {
                                  return text(")");
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Test.FlareCheck line 244, column 9 - line 245, column 9: " + [ v1.constructor.name, x.constructor.name ]);
                  };
              };
              var $76 = Data_Array["null"](v.value1);
              if ($76) {
                  return constructor(v.value0);
              };
              if (!$76) {
                  return showParen(d > 10)(Prelude.bind(Text_Smolder_Markup.bindMarkupM)(constructor(v.value0))(function () {
                      return Data_Foldable.for_(Text_Smolder_Markup.applicativeMarkupM)(Data_Foldable.foldableArray)(v.value1)(function (f) {
                          return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text(" "))(function () {
                              return prettyPrec(11)(f(Prelude.unit));
                          });
                      });
                  }));
              };
              throw new Error("Failed pattern match: " + [ $76.constructor.name ]);
          };
          if (v instanceof Data_Generic.SRecord) {
              var recEntry = function (x) {
                  return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(highlight("record-field")(x.recLabel))(function () {
                      return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text(": "))(function () {
                          return prettyPrec(0)(x.recValue(Prelude.unit));
                      });
                  });
              };
              return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text("{ "))(function () {
                  return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(text(", "))(Prelude.map(Prelude.functorArray)(recEntry)(v.value0)))(function () {
                      return text(" }");
                  });
              });
          };
          if (v instanceof Data_Generic.SBoolean) {
              return tooltip("Boolean")(highlight("boolean")(Prelude.show(Prelude.showBoolean)(v.value0)));
          };
          if (v instanceof Data_Generic.SNumber) {
              return tooltip("Number")(highlight("number")(Prelude.show(Prelude.showNumber)(v.value0)));
          };
          if (v instanceof Data_Generic.SInt) {
              return tooltip("Int")(highlight("number")(Prelude.show(Prelude.showInt)(v.value0)));
          };
          if (v instanceof Data_Generic.SString) {
              var tip = "String of length " + Prelude.show(Prelude.showInt)(Data_String.length(v.value0));
              return tooltip(tip)(highlight("string")(Prelude.show(Prelude.showString)(v.value0)));
          };
          if (v instanceof Data_Generic.SChar) {
              var tip = "Char (with char code " + (Prelude.show(Prelude.showInt)(Data_Char.toCharCode(v.value0)) + ")");
              return tooltip(tip)(highlight("string")(Prelude.show(Prelude.showChar)(v.value0)));
          };
          if (v instanceof Data_Generic.SArray) {
              var tip = "Array of length " + Prelude.show(Prelude.showInt)(Data_Array.length(v.value0));
              return tooltip(tip)(Prelude.bind(Text_Smolder_Markup.bindMarkupM)(text("["))(function () {
                  return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(text(", "))(Prelude.map(Prelude.functorArray)(function (x) {
                      return prettyPrec(0)(x(Prelude.unit));
                  })(v.value0)))(function () {
                      return text("]");
                  });
              }));
          };
          throw new Error("Failed pattern match: " + [ d.constructor.name, v.constructor.name ]);
      };
  };
  var pretty = prettyPrec(0);
  var prettyPrint = function (dictGeneric) {
      return function ($96) {
          return pretty(Data_Generic.toSpine(dictGeneric)($96));
      };
  };
  var interactiveGeneric = function (dictGeneric) {
      return function (ui) {
          return Prelude["<$>"](Flare.functorUI)(function ($101) {
              return SetHTML.create(Text_Smolder_HTML.pre(prettyPrint(dictGeneric)($101)));
          })(ui);
      };
  };                                                                                
  var interactiveNumber = new Interactive(interactiveGeneric(Data_Generic.genericNumber));
  var interactiveString = new Interactive(interactiveGeneric(Data_Generic.genericString));
  exports["SetText"] = SetText;
  exports["SetHTML"] = SetHTML;
  exports["SmallNumber"] = SmallNumber;
  exports["SmallInt"] = SmallInt;
  exports["Interactive"] = Interactive;
  exports["Flammable"] = Flammable;
  exports["flareCheck'"] = flareCheck$prime;
  exports["flareDoc'"] = flareDoc$prime;
  exports["interactiveGeneric"] = interactiveGeneric;
  exports["interactive"] = interactive;
  exports["spark"] = spark;
  exports["flammableSmallInt"] = flammableSmallInt;
  exports["flammableSmallNumber"] = flammableSmallNumber;
  exports["interactiveNumber"] = interactiveNumber;
  exports["interactiveString"] = interactiveString;
  exports["interactiveFunction"] = interactiveFunction;;
 
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Test_StrongCheck = PS["Test.StrongCheck"];
  var Test_StrongCheck_Gen = PS["Test.StrongCheck.Gen"];
  var Control_Monad_Free = PS["Control.Monad.Free"];     
  var PlainText = (function () {
      function PlainText() {

      };
      PlainText.value = new PlainText();
      return PlainText;
  })();
  var Numeric = (function () {
      function Numeric() {

      };
      Numeric.value = new Numeric();
      return Numeric;
  })();
  var $$Date = (function () {
      function Date() {

      };
      Date.value = new Date();
      return Date;
  })();
  var Time = (function () {
      function Time() {

      };
      Time.value = new Time();
      return Time;
  })();
  var DateTime = (function () {
      function DateTime() {

      };
      DateTime.value = new DateTime();
      return DateTime;
  })();
  var Bullet = (function () {
      function Bullet(value0) {
          this.value0 = value0;
      };
      Bullet.create = function (value0) {
          return new Bullet(value0);
      };
      return Bullet;
  })();
  var Ordered = (function () {
      function Ordered(value0) {
          this.value0 = value0;
      };
      Ordered.create = function (value0) {
          return new Ordered(value0);
      };
      return Ordered;
  })();
  var InlineLink = (function () {
      function InlineLink(value0) {
          this.value0 = value0;
      };
      InlineLink.create = function (value0) {
          return new InlineLink(value0);
      };
      return InlineLink;
  })();
  var ReferenceLink = (function () {
      function ReferenceLink(value0) {
          this.value0 = value0;
      };
      ReferenceLink.create = function (value0) {
          return new ReferenceLink(value0);
      };
      return ReferenceLink;
  })();
  var Literal = (function () {
      function Literal(value0) {
          this.value0 = value0;
      };
      Literal.create = function (value0) {
          return new Literal(value0);
      };
      return Literal;
  })();
  var Unevaluated = (function () {
      function Unevaluated(value0) {
          this.value0 = value0;
      };
      Unevaluated.create = function (value0) {
          return new Unevaluated(value0);
      };
      return Unevaluated;
  })();
  var TextBox = (function () {
      function TextBox(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TextBox.create = function (value0) {
          return function (value1) {
              return new TextBox(value0, value1);
          };
      };
      return TextBox;
  })();
  var RadioButtons = (function () {
      function RadioButtons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RadioButtons.create = function (value0) {
          return function (value1) {
              return new RadioButtons(value0, value1);
          };
      };
      return RadioButtons;
  })();
  var CheckBoxes = (function () {
      function CheckBoxes(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CheckBoxes.create = function (value0) {
          return function (value1) {
              return new CheckBoxes(value0, value1);
          };
      };
      return CheckBoxes;
  })();
  var DropDown = (function () {
      function DropDown(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DropDown.create = function (value0) {
          return function (value1) {
              return new DropDown(value0, value1);
          };
      };
      return DropDown;
  })();
  var Str = (function () {
      function Str(value0) {
          this.value0 = value0;
      };
      Str.create = function (value0) {
          return new Str(value0);
      };
      return Str;
  })();
  var Entity = (function () {
      function Entity(value0) {
          this.value0 = value0;
      };
      Entity.create = function (value0) {
          return new Entity(value0);
      };
      return Entity;
  })();
  var Space = (function () {
      function Space() {

      };
      Space.value = new Space();
      return Space;
  })();
  var SoftBreak = (function () {
      function SoftBreak() {

      };
      SoftBreak.value = new SoftBreak();
      return SoftBreak;
  })();
  var LineBreak = (function () {
      function LineBreak() {

      };
      LineBreak.value = new LineBreak();
      return LineBreak;
  })();
  var Emph = (function () {
      function Emph(value0) {
          this.value0 = value0;
      };
      Emph.create = function (value0) {
          return new Emph(value0);
      };
      return Emph;
  })();
  var Strong = (function () {
      function Strong(value0) {
          this.value0 = value0;
      };
      Strong.create = function (value0) {
          return new Strong(value0);
      };
      return Strong;
  })();
  var Code = (function () {
      function Code(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Code.create = function (value0) {
          return function (value1) {
              return new Code(value0, value1);
          };
      };
      return Code;
  })();
  var Link = (function () {
      function Link(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Link.create = function (value0) {
          return function (value1) {
              return new Link(value0, value1);
          };
      };
      return Link;
  })();
  var Image = (function () {
      function Image(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Image.create = function (value0) {
          return function (value1) {
              return new Image(value0, value1);
          };
      };
      return Image;
  })();
  var FormField = (function () {
      function FormField(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FormField.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FormField(value0, value1, value2);
              };
          };
      };
      return FormField;
  })();
  var Indented = (function () {
      function Indented() {

      };
      Indented.value = new Indented();
      return Indented;
  })();
  var Fenced = (function () {
      function Fenced(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fenced.create = function (value0) {
          return function (value1) {
              return new Fenced(value0, value1);
          };
      };
      return Fenced;
  })();
  var Paragraph = (function () {
      function Paragraph(value0) {
          this.value0 = value0;
      };
      Paragraph.create = function (value0) {
          return new Paragraph(value0);
      };
      return Paragraph;
  })();
  var Header = (function () {
      function Header(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Header.create = function (value0) {
          return function (value1) {
              return new Header(value0, value1);
          };
      };
      return Header;
  })();
  var Blockquote = (function () {
      function Blockquote(value0) {
          this.value0 = value0;
      };
      Blockquote.create = function (value0) {
          return new Blockquote(value0);
      };
      return Blockquote;
  })();
  var Lst = (function () {
      function Lst(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lst.create = function (value0) {
          return function (value1) {
              return new Lst(value0, value1);
          };
      };
      return Lst;
  })();
  var CodeBlock = (function () {
      function CodeBlock(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CodeBlock.create = function (value0) {
          return function (value1) {
              return new CodeBlock(value0, value1);
          };
      };
      return CodeBlock;
  })();
  var LinkReference = (function () {
      function LinkReference(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LinkReference.create = function (value0) {
          return function (value1) {
              return new LinkReference(value0, value1);
          };
      };
      return LinkReference;
  })();
  var Rule = (function () {
      function Rule() {

      };
      Rule.value = new Rule();
      return Rule;
  })();
  var SlamDown = (function () {
      function SlamDown(value0) {
          this.value0 = value0;
      };
      SlamDown.create = function (value0) {
          return new SlamDown(value0);
      };
      return SlamDown;
  })();
  var showTextBoxType = new Prelude.Show(function (v) {
      if (v instanceof PlainText) {
          return "PlainText";
      };
      if (v instanceof Numeric) {
          return "Numeric";
      };
      if (v instanceof $$Date) {
          return "Date";
      };
      if (v instanceof Time) {
          return "Time";
      };
      if (v instanceof DateTime) {
          return "DateTime";
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown line 213, column 1 - line 220, column 1: " + [ v.constructor.name ]);
  });                                                                                  
  var eqListType = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof Bullet && v1 instanceof Bullet) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Ordered && v1 instanceof Ordered) {
              return v.value0 === v1.value0;
          };
          return false;
      };
  });
  exports["PlainText"] = PlainText;
  exports["Numeric"] = Numeric;
  exports["Date"] = $$Date;
  exports["Time"] = Time;
  exports["DateTime"] = DateTime;
  exports["TextBox"] = TextBox;
  exports["RadioButtons"] = RadioButtons;
  exports["CheckBoxes"] = CheckBoxes;
  exports["DropDown"] = DropDown;
  exports["Literal"] = Literal;
  exports["Unevaluated"] = Unevaluated;
  exports["InlineLink"] = InlineLink;
  exports["ReferenceLink"] = ReferenceLink;
  exports["Indented"] = Indented;
  exports["Fenced"] = Fenced;
  exports["Bullet"] = Bullet;
  exports["Ordered"] = Ordered;
  exports["Str"] = Str;
  exports["Entity"] = Entity;
  exports["Space"] = Space;
  exports["SoftBreak"] = SoftBreak;
  exports["LineBreak"] = LineBreak;
  exports["Emph"] = Emph;
  exports["Strong"] = Strong;
  exports["Code"] = Code;
  exports["Link"] = Link;
  exports["Image"] = Image;
  exports["FormField"] = FormField;
  exports["Paragraph"] = Paragraph;
  exports["Header"] = Header;
  exports["Blockquote"] = Blockquote;
  exports["Lst"] = Lst;
  exports["CodeBlock"] = CodeBlock;
  exports["LinkReference"] = LinkReference;
  exports["Rule"] = Rule;
  exports["SlamDown"] = SlamDown;
  exports["eqListType"] = eqListType;
  exports["showTextBoxType"] = showTextBoxType;;
 
})(PS["Text.Markdown.SlamDown"] = PS["Text.Markdown.SlamDown"] || {});
(function(exports) {
  // module Text.Markdown.SlamDown.Parser.Inline

  exports.error = function(s) {
      throw new Error(s);
  };
 
})(PS["Text.Markdown.SlamDown.Parser.Inline"] = PS["Text.Markdown.SlamDown.Parser.Inline"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];     
  var Position = (function () {
      function Position(value0) {
          this.value0 = value0;
      };
      Position.create = function (value0) {
          return new Position(value0);
      };
      return Position;
  })();
  var updatePosString = function (pos) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\n") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\r") {
                      return new Position({
                          line: v.value0.line + 1 | 0, 
                          column: 1
                      });
                  };
                  if (c === "\t") {
                      return new Position({
                          line: v.value0.line, 
                          column: (v.value0.column + 8 | 0) - (v.value0.column - 1) % 8
                      });
                  };
                  return new Position({
                      line: v.value0.line, 
                      column: v.value0.column + 1 | 0
                  });
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos)(Data_String.split("")(str));
      };
  };
  var showPosition = new Prelude.Show(function (v) {
      return "Position { line: " + (Prelude.show(Prelude.showInt)(v.value0.line) + (", column: " + (Prelude.show(Prelude.showInt)(v.value0.column) + " }")));
  });
  var initialPos = new Position({
      line: 1, 
      column: 1
  });
  exports["Position"] = Position;
  exports["updatePosString"] = updatePosString;
  exports["initialPos"] = initialPos;
  exports["showPosition"] = showPosition;;
 
})(PS["Text.Parsing.Parser.Pos"] = PS["Text.Parsing.Parser.Pos"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];     
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var PState = (function () {
      function PState(value0) {
          this.value0 = value0;
      };
      PState.create = function (value0) {
          return new PState(value0);
      };
      return PState;
  })();
  var ParserT = function (x) {
      return x;
  };
  var unParserT = function (v) {
      return v;
  };
  var showParseError = new Prelude.Show(function (v) {
      return "ParseError { message: " + (v.value0.message + (", position: " + (Prelude.show(Text_Parsing_Parser_Pos.showPosition)(v.value0.position) + " }")));
  });
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(v.result);
              });
          };
      };
  };
  var runParser = function (s) {
      return function ($54) {
          return Data_Identity.runIdentity(runParserT(Data_Identity.monadIdentity)(new PState({
              input: s, 
              position: Text_Parsing_Parser_Pos.initialPos
          }))($54));
      };
  };
  var parseFailed = function (s) {
      return function (pos) {
          return function (message) {
              return {
                  input: s, 
                  consumed: false, 
                  result: new Data_Either.Left(new ParseError({
                      message: message, 
                      position: pos
                  })), 
                  position: pos
              };
          };
      };
  }; 
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return ParserT(function (s) {
          return unParserT(f(Prelude.unit))(s);
      });
  });
  var functorParserT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (p) {
              var f$prime = function (o) {
                  return {
                      input: o.input, 
                      result: Prelude["<$>"](Data_Either.functorEither)(f)(o.result), 
                      consumed: o.consumed, 
                      position: o.position
                  };
              };
              return ParserT(function (s) {
                  return Prelude["<$>"](dictFunctor)(f$prime)(unParserT(p)(s));
              });
          };
      });
  };
  var fail = function (dictMonad) {
      return function (message) {
          return ParserT(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(parseFailed(v.value0.input)(v.value0.position)(message));
          });
      };
  };
  var monadParserT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return bindParserT(dictMonad);
      });
  };
  var bindParserT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyParserT(dictMonad);
      }, function (p) {
          return function (f) {
              var updateConsumedFlag = function (c) {
                  return function (o) {
                      return {
                          input: o.input, 
                          consumed: c || o.consumed, 
                          result: o.result, 
                          position: o.position
                      };
                  };
              };
              return ParserT(function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())({
                              input: o.input, 
                              result: new Data_Either.Left(o.result.value0), 
                              consumed: o.consumed, 
                              position: o.position
                          });
                      };
                      if (o.result instanceof Data_Either.Right) {
                          return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(updateConsumedFlag(o.consumed))(unParserT(f(o.result.value0))(new PState({
                              input: o.input, 
                              position: o.position
                          })));
                      };
                      throw new Error("Failed pattern match: " + [ o.result.constructor.name ]);
                  });
              });
          };
      });
  };
  var applyParserT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, Prelude.ap(monadParserT(dictMonad)));
  };
  var applicativeParserT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyParserT(dictMonad);
      }, function (a) {
          return ParserT(function (v) {
              return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())({
                  input: v.value0.input, 
                  result: new Data_Either.Right(a), 
                  consumed: false, 
                  position: v.value0.position
              });
          });
      });
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, function (p1) {
          return function (p2) {
              return ParserT(function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(unParserT(p1)(s))(function (o) {
                      if (o.result instanceof Data_Either.Left && !o.consumed) {
                          return unParserT(p2)(s);
                      };
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(o);
                  });
              });
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return plusParserT(dictMonad);
      }, function () {
          return applicativeParserT(dictMonad);
      });
  };
  exports["ParserT"] = ParserT;
  exports["PState"] = PState;
  exports["ParseError"] = ParseError;
  exports["parseFailed"] = parseFailed;
  exports["fail"] = fail;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["unParserT"] = unParserT;
  exports["showParseError"] = showParseError;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadParserT"] = monadParserT;
  exports["lazyParserT"] = lazyParserT;;
 
})(PS["Text.Parsing.Parser"] = PS["Text.Parsing.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Apply = PS["Control.Apply"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];     
  var $less$qmark$greater = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var $$try = function (dictFunctor) {
      return function (p) {
          var try$prime = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v2.result instanceof Data_Either.Left) {
                          return {
                              input: v, 
                              result: v2.result, 
                              consumed: false, 
                              position: v1
                          };
                      };
                      return v2;
                  };
              };
          };
          return Text_Parsing_Parser.ParserT(function (v) {
              return Prelude["<$>"](dictFunctor)(try$prime(v.value0.input)(v.value0.position))(Text_Parsing_Parser.unParserT(p)(new Text_Parsing_Parser.PState({
                  input: v.value0.input, 
                  position: v.value0.position
              })));
          });
      };
  };
  var skipMany1 = function (dictMonad) {
      return function (p) {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function (v1) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Prelude.unit);
              });
          });
      };
  };
  var skipMany = function (dictMonad) {
      return function (p) {
          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Prelude.unit));
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function () {
                      return p;
                  })))(function (v1) {
                      return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List[":"](v)(v1));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.Nil.value));
          };
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(p)(Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var optionMaybe = function (dictMonad) {
      return function (p) {
          return option(dictMonad)(Data_Maybe.Nothing.value)(Prelude["<$>"](Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Data_Maybe.Just.create)(p));
      };
  };
  var manyTill = function (dictMonad) {
      return function (p) {
          return function (end) {
              var scan = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(dictMonad))(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(end)(function () {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.Nil.value);
              }))(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(scan)(function (v1) {
                      return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List[":"](v)(v1));
                  });
              }));
              return scan;
          };
      };
  };
  var many1Till = function (dictMonad) {
      return function (p) {
          return function (end) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(manyTill(dictMonad)(p)(end))(function (v1) {
                      return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List[":"](v)(v1));
                  });
              });
          };
      };
  };
  exports["many1Till"] = many1Till;
  exports["manyTill"] = manyTill;
  exports["skipMany1"] = skipMany1;
  exports["skipMany"] = skipMany;
  exports["sepBy1"] = sepBy1;
  exports["sepBy"] = sepBy;
  exports["try"] = $$try;
  exports["optionMaybe"] = optionMaybe;
  exports["option"] = option;
  exports["<?>"] = $less$qmark$greater;;
 
})(PS["Text.Parsing.Parser.Combinators"] = PS["Text.Parsing.Parser.Combinators"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Char = PS["Data.Char"];
  var Data_Array = PS["Data.Array"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = PS["Text.Parsing.Parser.Pos"];     
  var string = function (dictMonad) {
      return function (str) {
          return Text_Parsing_Parser.ParserT(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                  var $16 = Data_String.indexOf(str)(v.value0.input);
                  if ($16 instanceof Data_Maybe.Just && $16.value0 === 0) {
                      return {
                          consumed: true, 
                          input: Data_String.drop(Data_String.length(str))(v.value0.input), 
                          result: new Data_Either.Right(str), 
                          position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(str)
                      };
                  };
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected " + str);
              })());
          });
      };
  };
  var eof = function (dictMonad) {
      return Text_Parsing_Parser.ParserT(function (v) {
          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
              if (v.value0.input === "") {
                  return {
                      consumed: false, 
                      input: v.value0.input, 
                      result: new Data_Either.Right(Prelude.unit), 
                      position: v.value0.position
                  };
              };
              return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Expected EOF");
          })());
      });
  };
  var anyChar = function (dictMonad) {
      return Text_Parsing_Parser.ParserT(function (v) {
          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
              var $27 = Data_String.charAt(0)(v.value0.input);
              if ($27 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.parseFailed(v.value0.input)(v.value0.position)("Unexpected EOF");
              };
              if ($27 instanceof Data_Maybe.Just) {
                  return {
                      consumed: true, 
                      input: Data_String.drop(1)(v.value0.input), 
                      result: new Data_Either.Right($27.value0), 
                      position: Text_Parsing_Parser_Pos.updatePosString(v.value0.position)(Data_Char.toString($27.value0))
                  };
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 33, column 1 - line 34, column 1: " + [ $27.constructor.name ]);
          })());
      });
  };
  var satisfy = function (dictMonad) {
      return function (f) {
          return Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictMonad))(function (v) {
              var $33 = f(v);
              if ($33) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
              };
              if (!$33) {
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String.fromChar(v) + "' did not satisfy predicate"));
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String line 40, column 1 - line 41, column 1: " + [ $33.constructor.name ]);
          }));
      };
  };
  var noneOf = function (dictMonad) {
      return function (ss) {
          return satisfy(dictMonad)(Prelude.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Prelude.eqChar))(ss));
      };
  };
  exports["noneOf"] = noneOf;
  exports["satisfy"] = satisfy;
  exports["anyChar"] = anyChar;
  exports["string"] = string;
  exports["eof"] = eof;;
 
})(PS["Text.Parsing.Parser.String"] = PS["Text.Parsing.Parser.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Data_Identity = PS["Data.Identity"];     
  var flags = {
      unicode: false, 
      sticky: false, 
      multiline: false, 
      ignoreCase: false, 
      global: false
  };
  var isEmailAddress = (function () {
      var wsEmail = Data_String_Regex.regex("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")(flags);
      return Data_String_Regex.test(wsEmail);
  })();
  var isWhitespace = (function () {
      var wsRegex = Data_String_Regex.regex("^\\s$")(flags);
      return function ($0) {
          return Data_String_Regex.test(wsRegex)(Data_String.fromChar($0));
      };
  })();
  var skipSpaces = Text_Parsing_Parser_Combinators.skipMany(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(isWhitespace));
  var parens = function (p) {
      return Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("("))(skipSpaces))(p))(skipSpaces))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(")"));
  };
  var squares = function (p) {
      return Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("["))(skipSpaces))(p))(skipSpaces))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("]"));
  };
  var braces = function (p) {
      return Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("{"))(skipSpaces))(p))(skipSpaces))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("}"));
  };
  exports["skipSpaces"] = skipSpaces;
  exports["squares"] = squares;
  exports["braces"] = braces;
  exports["parens"] = parens;
  exports["isEmailAddress"] = isEmailAddress;
  exports["isWhitespace"] = isWhitespace;;
 
})(PS["Text.Markdown.SlamDown.Parser.Utils"] = PS["Text.Markdown.SlamDown.Parser.Utils"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Text.Markdown.SlamDown.Parser.Inline"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Validation = PS["Data.Validation"];
  var Data_String = PS["Data.String"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Text_Markdown_SlamDown = PS["Text.Markdown.SlamDown"];
  var Text_Markdown_SlamDown_Parser_Utils = PS["Text.Markdown.SlamDown.Parser.Utils"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var someOf = function (p) {
      return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($96) {
          return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($96));
      })(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(p)));
  };
  var manyOf = function (p) {
      return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($97) {
          return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($97));
      })(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(p)));
  };
  var hash = Prelude["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("#"));
  var dot = Prelude["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("."));
  var dash = Prelude["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("-"));
  var consolidate = function (v) {
      if (v instanceof Data_List.Nil) {
          return Data_List.Nil.value;
      };
      if (v instanceof Data_List.Cons && (v.value0 instanceof Text_Markdown_SlamDown.Str && (v.value1 instanceof Data_List.Cons && v.value1.value0 instanceof Text_Markdown_SlamDown.Str))) {
          return consolidate(new Data_List.Cons(new Text_Markdown_SlamDown.Str(v.value0.value0 + v.value1.value0.value0), v.value1.value1));
      };
      if (v instanceof Data_List.Cons) {
          return Data_List.Cons.create(v.value0)(consolidate(v.value1));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var colon = Prelude["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(":"));
  var parseTextOfType = function (kit) {
      return function (tbt) {
          var go = function (v) {
              if (v instanceof Text_Markdown_SlamDown.PlainText) {
                  return kit.plainText;
              };
              if (v instanceof Text_Markdown_SlamDown.Numeric) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(kit.numericPrefix)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(kit.numeric)(function (v1) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(dot)(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(kit.numeric)))(function (v2) {
                                  return Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1 + Data_Maybe.maybe("")(Prelude["++"](Prelude.semigroupString)(":"))(v2));
                              });
                          });
                      });
                  });
              };
              if (v instanceof Text_Markdown_SlamDown.Time) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(kit.numeric)(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(colon))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(kit.numeric)(function (v2) {
                              return Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1 + (":" + v2));
                          });
                      });
                  });
              };
              if (v instanceof Text_Markdown_SlamDown["Date"]) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(kit.numeric)(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(dash))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(kit.numeric)(function (v2) {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(dash))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(function () {
                                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(kit.numeric)(function (v3) {
                                      return Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1 + ("-" + (v2 + ("-" + v3))));
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Text_Markdown_SlamDown.DateTime) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(go((Text_Markdown_SlamDown["Date"]).value))(function (v1) {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(go(Text_Markdown_SlamDown.Time.value))(function (v2) {
                              return Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1 + (" " + v2));
                          });
                      });
                  });
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 76, column 1 - line 77, column 1: " + [ v.constructor.name ]);
          };
          return Text_Parsing_Parser_Combinators["<?>"](Data_Identity.monadIdentity)(go(tbt))(Prelude.show(Text_Markdown_SlamDown.showTextBoxType)(tbt));
      };
  };
  var inlines = (function () {
      var space = (function () {
          var toSpace = function (cs) {
              if (Data_Foldable.elem(Data_List.foldableList)(Prelude.eqString)("\n")(cs)) {
                  var $48 = Data_List.take(2)(cs);
                  if ($48 instanceof Data_List.Cons && ($48.value0 === " " && ($48.value1 instanceof Data_List.Cons && ($48.value1.value0 === " " && $48.value1.value1 instanceof Data_List.Nil)))) {
                      return Text_Markdown_SlamDown.LineBreak.value;
                  };
                  return Text_Markdown_SlamDown.SoftBreak.value;
              };
              if (Prelude.otherwise) {
                  return Text_Markdown_SlamDown.Space.value;
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 191, column 5 - line 198, column 3: " + [ cs.constructor.name ]);
          };
          return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($98) {
              return toSpace(Prelude["<$>"](Data_List.functorList)(Data_String.fromChar)($98));
          })(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(Text_Markdown_SlamDown_Parser_Utils.isWhitespace)));
      })();
      var other = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String.fromChar)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity)))(function (v) {
          var $54 = v === "\\";
          if ($54) {
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($99) {
                  return Text_Markdown_SlamDown.Str.create(Data_String.fromChar($99));
              })(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity)))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.satisfy(Data_Identity.monadIdentity)(function (x) {
                  return Data_String.fromChar(x) === "\n";
              }))(Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown.LineBreak.value))))(Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown.Str("\\")));
          };
          if (!$54) {
              return Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown.Str(v));
          };
          throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 139, column 1 - line 140, column 1: " + [ $54.constructor.name ]);
      });
      var isAlphaNum = function (c) {
          var s = Data_String.fromChar(c);
          return s >= "a" && s <= "z" || (s >= "A" && s <= "Z" || s >= "0" && s <= "9");
      };
      var formElement = (function () {
          var unevaluated = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("!"))(function () {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(someOf(function (x) {
                  return Data_String.fromChar(x) === "`";
              }))(function (v) {
                  return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Prelude["<$>"](Prelude.functorFn)(Text_Markdown_SlamDown.Unevaluated.create)(function ($100) {
                      return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($100));
                  }))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(v)));
              });
          });
          var und = someOf(function (x) {
              return Data_String.fromChar(x) === "_";
          });
          var templateParserKit = {
              numericPrefix: hash, 
              plainText: und, 
              numeric: und
          };
          var expr = function (f) {
              return function (p) {
                  return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(f(unevaluated)))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.Literal.create)(p));
              };
          };
          var radioButtons = (function () {
              var item = someOf(function (c) {
                  return !Data_Foldable.elem(Data_Foldable.foldableArray)(Prelude.eqChar)(c)([ "(", ")", " ", "!", "`" ]);
              });
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr(Text_Markdown_SlamDown_Parser_Utils.parens)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("(x)"))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(item)))(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr(Prelude.id(Prelude.categoryFn))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("()")))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(item)))))(function (v1) {
                          return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown.RadioButtons(v, v1));
                      });
                  });
              });
          })();
          var textBox = function (ty) {
              return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.TextBox.create(ty))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(parseTextOfType(templateParserKit)(ty))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Markdown_SlamDown_Parser_Utils.parens(expr(Prelude.id(Prelude.categoryFn))(manyOf(function (x) {
                  return Data_String.fromChar(x) !== ")";
              }))))));
          };
          var dropDown = (function () {
              var item = someOf(function (c) {
                  return !Data_Foldable.elem(Data_Foldable.foldableArray)(Prelude.eqChar)(c)([ "{", "}", ",", " ", "!", "`", "(", ")" ]);
              });
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.braces(expr(Prelude.id(Prelude.categoryFn))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(item)))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(","))))))(function (v) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(Text_Markdown_SlamDown_Parser_Utils.parens(expr(Prelude.id(Prelude.categoryFn))(item)))))(function (v1) {
                      return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown.DropDown(v, v1));
                  });
              });
          })();
          var checkBoxes = (function () {
              var literalCheckBoxes = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)((function () {
                  var item = someOf(function (c) {
                      return !Data_Foldable.elem(Data_Foldable.foldableArray)(Prelude.eqChar)(c)([ "[", "]", " ", "!", "`" ]);
                  });
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("[x]"))(Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true)))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("[]"))(Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(false))))(function (v) {
                          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
                              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(item)(function (v1) {
                                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v, v1));
                              });
                          });
                      });
                  });
              })())))(function (v) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown.CheckBoxes(new Text_Markdown_SlamDown.Literal(Prelude.map(Data_List.functorList)(Data_Tuple.fst)(v)), new Text_Markdown_SlamDown.Literal(Prelude.map(Data_List.functorList)(Data_Tuple.snd)(v))));
              });
              var evaluatedCheckBoxes = Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.CheckBoxes.create)(Text_Markdown_SlamDown_Parser_Utils.squares(unevaluated)))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(unevaluated));
              return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(literalCheckBoxes)(evaluatedCheckBoxes);
          })();
          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(textBox(Text_Markdown_SlamDown.DateTime.value)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(textBox((Text_Markdown_SlamDown["Date"]).value))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(textBox(Text_Markdown_SlamDown.Time.value))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(textBox(Text_Markdown_SlamDown.Numeric.value))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(textBox(Text_Markdown_SlamDown.PlainText.value))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(radioButtons)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(checkBoxes)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(dropDown));
      })();
      var formField = (function () {
          var required = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(false)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("*"))(Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true)));
          var label = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(someOf(isAlphaNum))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($101) {
              return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($101));
          })(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("]")))));
          return Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.FormField.create)(label))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(required)))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("=")))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(formElement));
      })();
      var entity = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("&"))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($102) {
              return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($102));
          })(Text_Parsing_Parser_Combinators.many1Till(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.noneOf(Data_Identity.monadIdentity)(Data_String.toCharArray(";")))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(";"))))(function (v) {
              return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown.Entity.create("&" + (v + ";")));
          });
      });
      var emphasis = function (p) {
          return function (f) {
              return function (s) {
                  return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(s))(function () {
                      return Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(f)(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(p)(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(s)));
                  });
              };
          };
      };
      var strong = function (p) {
          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(emphasis(p)(Text_Markdown_SlamDown.Strong.create)("**"))(emphasis(p)(Text_Markdown_SlamDown.Strong.create)("__"));
      };
      var strongEmph = function (p) {
          var f = function (is) {
              return Text_Markdown_SlamDown.Strong.create(Data_List.singleton(new Text_Markdown_SlamDown.Emph(is)));
          };
          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(emphasis(p)(f)("***"))(emphasis(p)(f)("___"));
      };
      var emph = function (p) {
          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(emphasis(p)(Text_Markdown_SlamDown.Emph.create)("*"))(emphasis(p)(Text_Markdown_SlamDown.Emph.create)("_"));
      };
      var code = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(false)(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("!"))(Prelude.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true))))(function (v) {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(someOf(function (x) {
              return Data_String.fromChar(x) === "`";
          }))(function (v1) {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($103) {
                  return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($103));
              })(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(v1))))(function (v2) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown.Code.create(v)(Data_String.trim(v2)));
              });
          });
      });
      var autolink = (function () {
          var autoLabel = function (s) {
              if (Text_Markdown_SlamDown_Parser_Utils.isEmailAddress(s)) {
                  return "mailto:" + s;
              };
              if (Prelude.otherwise) {
                  return s;
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 236, column 5 - line 237, column 5: " + [ s.constructor.name ]);
          };
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("<"))(function () {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($104) {
                  return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($104));
              })(Text_Parsing_Parser_Combinators.many1Till(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(">"))))(function (v) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown.Link(Data_List.singleton(new Text_Markdown_SlamDown.Str(autoLabel(v))), new Text_Markdown_SlamDown.InlineLink(v)));
              });
          });
      })();
      var alphaNumStr = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.Str.create)(someOf(isAlphaNum));
      var inline0 = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
          return Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(alphaNumStr)(space))(strongEmph(p)))(strong(p)))(emph(p)))(code))(autolink))(entity);
      });
      var link = (function () {
          var referenceLink = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.ReferenceLink.create)(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($105) {
              return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($105));
          })(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("]"))))));
          var linkLabel = Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(inline0)(other))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("]")));
          var inlineLink = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($106) {
              return Text_Markdown_SlamDown.InlineLink.create(Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($106)));
          })(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("("))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(")"))));
          var linkTarget = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(inlineLink)(referenceLink);
          return Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.Link.create)(linkLabel))(linkTarget);
      })();
      var inline1 = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(inline0))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(link));
      var image = (function () {
          var imageUrl = Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($107) {
              return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($107));
          })(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("("))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(")"))));
          var imageLabel = Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("!["))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(inline1)(other))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("]")));
          return Prelude["<*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Markdown_SlamDown.Image.create)(imageLabel))(imageUrl);
      })();
      var inline2 = Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt["<|>"](Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(formField))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(inline1)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.functorIdentity)(image)))(other);
      return Control_Apply["<*"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(inline2))(Text_Parsing_Parser_String.eof(Data_Identity.monadIdentity));
  })();
  var parseInlines = function (s) {
      var throwOnError = function (dictShow) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return $foreign.error(Prelude.show(dictShow)(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser.Inline line 36, column 3 - line 37, column 3: " + [ v.constructor.name ]);
          };
      };
      return consolidate(throwOnError(Text_Parsing_Parser.showParseError)(Text_Parsing_Parser.runParser(Data_String.joinWith("\n")(Data_List.fromList(Data_Unfoldable.unfoldableArray)(s)))(inlines)));
  };
  exports["parseInlines"] = parseInlines;;
 
})(PS["Text.Markdown.SlamDown.Parser.Inline"] = PS["Text.Markdown.SlamDown.Parser.Inline"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Text_Parsing_Parser = PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = PS["Text.Parsing.Parser.String"];
  var Text_Markdown_SlamDown = PS["Text.Markdown.SlamDown"];
  var Text_Markdown_SlamDown_Parser_Utils = PS["Text.Markdown.SlamDown.Parser.Utils"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var linkReference = Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($4) {
      return Data_String.trim(Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($4)));
  })(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply["*>"](Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("["))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces))(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("]")))))(function (v) {
      return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)(":"))(function () {
          return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Markdown_SlamDown_Parser_Utils.skipSpaces)(function () {
              return Prelude.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Prelude["<$>"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($5) {
                  return Data_String.trim(Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($5)));
              })(Text_Parsing_Parser_Combinators.manyTill(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.anyChar(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Data_Identity.monadIdentity))))(function (v1) {
                  return Prelude["return"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Text_Markdown_SlamDown.LinkReference(v, v1));
              });
          });
      });
  });
  var parseLinkReference = function (s) {
      return Data_Either.either(Prelude["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Text_Parsing_Parser.runParser(s)(linkReference));
  };
  exports["parseLinkReference"] = parseLinkReference;;
 
})(PS["Text.Markdown.SlamDown.Parser.References"] = PS["Text.Markdown.SlamDown.Parser.References"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Validation = PS["Data.Validation"];
  var Data_String = PS["Data.String"];
  var Text_Markdown_SlamDown = PS["Text.Markdown.SlamDown"];
  var Text_Markdown_SlamDown_Parser_Inline = PS["Text.Markdown.SlamDown.Parser.Inline"];
  var Text_Markdown_SlamDown_Parser_References = PS["Text.Markdown.SlamDown.Parser.References"];     
  var CText = (function () {
      function CText(value0) {
          this.value0 = value0;
      };
      CText.create = function (value0) {
          return new CText(value0);
      };
      return CText;
  })();
  var CBlank = (function () {
      function CBlank() {

      };
      CBlank.value = new CBlank();
      return CBlank;
  })();
  var CRule = (function () {
      function CRule() {

      };
      CRule.value = new CRule();
      return CRule;
  })();
  var CATXHeader = (function () {
      function CATXHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CATXHeader.create = function (value0) {
          return function (value1) {
              return new CATXHeader(value0, value1);
          };
      };
      return CATXHeader;
  })();
  var CSetextHeader = (function () {
      function CSetextHeader(value0) {
          this.value0 = value0;
      };
      CSetextHeader.create = function (value0) {
          return new CSetextHeader(value0);
      };
      return CSetextHeader;
  })();
  var CBlockquote = (function () {
      function CBlockquote(value0) {
          this.value0 = value0;
      };
      CBlockquote.create = function (value0) {
          return new CBlockquote(value0);
      };
      return CBlockquote;
  })();
  var CListItem = (function () {
      function CListItem(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CListItem.create = function (value0) {
          return function (value1) {
              return new CListItem(value0, value1);
          };
      };
      return CListItem;
  })();
  var CCodeBlockFenced = (function () {
      function CCodeBlockFenced(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CCodeBlockFenced.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CCodeBlockFenced(value0, value1, value2);
              };
          };
      };
      return CCodeBlockFenced;
  })();
  var CCodeBlockIndented = (function () {
      function CCodeBlockIndented(value0) {
          this.value0 = value0;
      };
      CCodeBlockIndented.create = function (value0) {
          return new CCodeBlockIndented(value0);
      };
      return CCodeBlockIndented;
  })();
  var CLinkReference = (function () {
      function CLinkReference(value0) {
          this.value0 = value0;
      };
      CLinkReference.create = function (value0) {
          return new CLinkReference(value0);
      };
      return CLinkReference;
  })();
  var tabsToSpaces = Data_String.replace("\t")("    ");
  var splitATXHeader = function (s) {
      var level = Data_String.count(function (c) {
          return Data_String.fromChar(c) === "#";
      })(s);
      var contents = Data_String.drop(level + 1 | 0)(s);
      return {
          level: level, 
          contents: contents
      };
  };
  var setextLevel = function (s) {
      if (Data_String.take(1)(s) === "=") {
          return 1;
      };
      if (Prelude.otherwise) {
          return 2;
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 89, column 1 - line 90, column 1: " + [ s.constructor.name ]);
  };
  var min = function (dictOrd) {
      return function (n) {
          return function (m) {
              var $26 = Prelude["<"](dictOrd)(n)(m);
              if ($26) {
                  return n;
              };
              if (!$26) {
                  return m;
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 210, column 1 - line 211, column 1: " + [ $26.constructor.name ]);
          };
      };
  };
  var isTextContainer = function (v) {
      if (v instanceof CText) {
          return true;
      };
      return false;
  };
  var isSpace = function (v) {
      if (v === " ") {
          return true;
      };
      return false;
  };
  var removeNonIndentingSpaces = function (s) {
      if (Data_String.count(function ($92) {
          return isSpace(Data_String.fromChar($92));
      })(s) < 4) {
          return Data_String.dropWhile(function ($93) {
              return isSpace(Data_String.fromChar($93));
          })(s);
      };
      if (Prelude.otherwise) {
          return s;
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 55, column 1 - line 56, column 1: " + [ s.constructor.name ]);
  };
  var isRuleChar = function (v) {
      if (v === "*") {
          return true;
      };
      if (v === "-") {
          return true;
      };
      if (v === "_") {
          return true;
      };
      return false;
  };
  var isListItem = function (v) {
      return function (v1) {
          if (v1 instanceof CListItem) {
              return Prelude["=="](Text_Markdown_SlamDown.eqListType)(v)(v1.value0);
          };
          return false;
      };
  };
  var isLinkReference = function (s) {
      return Data_String.take(1)(s) === "[" && Data_Maybe.isJust(Text_Markdown_SlamDown_Parser_References.parseLinkReference(s));
  };
  var isFenceChar = function (v) {
      if (v === "~") {
          return true;
      };
      if (v === "`") {
          return true;
      };
      return false;
  };
  var isEvaluatedCode = function (s) {
      return Data_String.take(1)(s) === "!";
  };
  var isDigit = function (v) {
      if (v === "0") {
          return true;
      };
      if (v === "1") {
          return true;
      };
      if (v === "2") {
          return true;
      };
      if (v === "3") {
          return true;
      };
      if (v === "4") {
          return true;
      };
      if (v === "5") {
          return true;
      };
      if (v === "6") {
          return true;
      };
      if (v === "7") {
          return true;
      };
      if (v === "8") {
          return true;
      };
      if (v === "9") {
          return true;
      };
      return false;
  };
  var isCodeFence = function (s) {
      var isSimpleFence = function (s1) {
          return Data_String.count(function ($94) {
              return isFenceChar(Data_String.fromChar($94));
          })(s1) >= 3;
      };
      return isSimpleFence(s) || isEvaluatedCode(s) && isSimpleFence(Data_String.drop(1)(s));
  };
  var isBlockquoteLine = function (s) {
      return Data_String.take(1)(removeNonIndentingSpaces(s)) === ">";
  };
  var splitBlockquote = function (ss) {
      var blockquoteContents = function (s) {
          return Data_String.drop((function () {
              var $38 = Data_String.take(2)(s) === "> ";
              if ($38) {
                  return 2;
              };
              if (!$38) {
                  return 1;
              };
              throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 103, column 3 - line 104, column 3: " + [ $38.constructor.name ]);
          })())(s);
      };
      var sp = Data_List.span(isBlockquoteLine)(ss);
      var bq = Prelude.map(Data_List.functorList)(function ($95) {
          return blockquoteContents(removeNonIndentingSpaces($95));
      })(sp.init);
      return {
          blockquoteLines: bq, 
          otherLines: sp.rest
      };
  };
  var isATXHeader = function (s) {
      var level = Data_String.count(function (c) {
          return Data_String.fromChar(c) === "#";
      })(s);
      var rest = Data_String.drop(level)(s);
      return level >= 1 && (level <= 6 && Data_String.take(1)(rest) === " ");
  };
  var getCText = function (v) {
      if (v instanceof CText) {
          return v.value0;
      };
      return "";
  };
  var getCListItem = function (v) {
      if (v instanceof CListItem) {
          return v.value1;
      };
      return Data_List.Nil.value;
  };
  var parseBlocks = function (v) {
      if (v instanceof Data_List.Nil) {
          return Data_List.Nil.value;
      };
      if (v instanceof Data_List.Cons && (v.value0 instanceof CText && (v.value1 instanceof Data_List.Cons && v.value1.value0 instanceof CSetextHeader))) {
          return Data_List.Cons.create(new Text_Markdown_SlamDown.Header(v.value1.value0.value0, Text_Markdown_SlamDown_Parser_Inline.parseInlines(Data_List.singleton(v.value0.value0))))(parseBlocks(v.value1.value1));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CText) {
          var sp = Data_List.span(isTextContainer)(v.value1);
          var is = Text_Markdown_SlamDown_Parser_Inline.parseInlines(new Data_List.Cons(v.value0.value0, Prelude.map(Data_List.functorList)(getCText)(sp.init)));
          return Data_List.Cons.create(new Text_Markdown_SlamDown.Paragraph(is))(parseBlocks(sp.rest));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CRule) {
          return Data_List.Cons.create(Text_Markdown_SlamDown.Rule.value)(parseBlocks(v.value1));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CATXHeader) {
          return Data_List.Cons.create(new Text_Markdown_SlamDown.Header(v.value0.value0, Text_Markdown_SlamDown_Parser_Inline.parseInlines(Data_List.singleton(v.value0.value1))))(parseBlocks(v.value1));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CBlockquote) {
          return Data_List.Cons.create(Text_Markdown_SlamDown.Blockquote.create(parseBlocks(v.value0.value0)))(parseBlocks(v.value1));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CListItem) {
          var sp = Data_List.span(isListItem(v.value0.value0))(v.value1);
          var bss = Prelude.map(Data_List.functorList)(function ($96) {
              return parseBlocks(getCListItem($96));
          })(sp.init);
          var bs = parseBlocks(v.value0.value1);
          return Data_List.Cons.create(new Text_Markdown_SlamDown.Lst(v.value0.value0, new Data_List.Cons(bs, bss)))(parseBlocks(sp.rest));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CCodeBlockIndented) {
          return Data_List.Cons.create(new Text_Markdown_SlamDown.CodeBlock(Text_Markdown_SlamDown.Indented.value, v.value0.value0))(parseBlocks(v.value1));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CCodeBlockFenced) {
          return Data_List.Cons.create(new Text_Markdown_SlamDown.CodeBlock(new Text_Markdown_SlamDown.Fenced(v.value0.value0, v.value0.value1), v.value0.value2))(parseBlocks(v.value1));
      };
      if (v instanceof Data_List.Cons && v.value0 instanceof CLinkReference) {
          return Data_List.Cons.create(v.value0.value0)(parseBlocks(v.value1));
      };
      if (v instanceof Data_List.Cons) {
          return parseBlocks(v.value1);
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var fromIndentedChunk = Data_String.drop(4);
  var countLeadingSpaces = Data_String.count(function ($97) {
      return isSpace(Data_String.fromChar($97));
  });
  var isBulleted = function (s) {
      var isBullet = function (v) {
          if (v === "*") {
              return true;
          };
          if (v === "+") {
              return true;
          };
          if (v === "-") {
              return true;
          };
          return false;
      };
      var ls = countLeadingSpaces(Data_String.drop(1)(s));
      var b = Data_String.take(1)(s);
      return isBullet(b) && (ls > 0 && ls < 5);
  };
  var listItemType = function (s) {
      if (isBulleted(s)) {
          return new Text_Markdown_SlamDown.Bullet(Data_String.take(1)(s));
      };
      if (Prelude.otherwise) {
          var n = Data_String.count(function ($98) {
              return isDigit(Data_String.fromChar($98));
          })(s);
          return new Text_Markdown_SlamDown.Ordered(Data_String.take(1)(Data_String.drop(n)(s)));
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 127, column 1 - line 128, column 1: " + [ s.constructor.name ]);
  };
  var isIndentedTo = function (n) {
      return function (s) {
          return countLeadingSpaces(s) >= n;
      };
  };
  var isIndentedChunk = function (s) {
      return isIndentedTo(4)(s);
  };
  var splitIndentedChunks = function (ss) {
      var sp = Data_List.span(isIndentedChunk)(ss);
      var codeLines = Prelude.map(Data_List.functorList)(fromIndentedChunk)(sp.init);
      return {
          codeLines: codeLines, 
          otherLines: sp.rest
      };
  };
  var isOrderedListMarker = function (s) {
      var n = Data_String.count(function ($99) {
          return isDigit(Data_String.fromChar($99));
      })(s);
      var next = Data_String.take(1)(Data_String.drop(n)(s));
      var ls = countLeadingSpaces(Data_String.drop(n + 1 | 0)(s));
      return n > 0 && ((next === "." || next === ")") && ls > 0);
  };
  var isListItemLine = function (s) {
      var s$prime = removeNonIndentingSpaces(s);
      return isBulleted(s$prime) || isOrderedListMarker(s$prime);
  };
  var listItemIndent = function (s) {
      if (isBulleted(s)) {
          return 1 + min(Prelude.ordInt)(4)(countLeadingSpaces(Data_String.drop(1)(s))) | 0;
      };
      if (Prelude.otherwise) {
          var n = Data_String.count(function ($100) {
              return isDigit(Data_String.fromChar($100));
          })(s);
          return (n + 1 | 0) + min(Prelude.ordInt)(4)(countLeadingSpaces(Data_String.drop(n + 1 | 0)(s))) | 0;
      };
      throw new Error("Failed pattern match at Text.Markdown.SlamDown.Parser line 133, column 1 - line 134, column 1: " + [ s.constructor.name ]);
  };
  var splitListItem = function (s) {
      return function (ss) {
          var s1 = removeNonIndentingSpaces(s);
          var listType = listItemType(s1);
          var indent = listItemIndent(s1);
          var sp = Data_List.span(isIndentedTo(indent))(ss);
          var listItemLines = Data_List.Cons.create(Data_String.drop(indent)(s1))(Prelude.map(Data_List.functorList)(Data_String.drop(indent))(sp.init));
          return {
              listType: listType, 
              listItemLines: listItemLines, 
              otherLines: sp.rest
          };
      };
  };
  var splitCodeFence = function (indent) {
      return function (fence) {
          return function (ss) {
              var removeIndentTo = function (s) {
                  return Data_String.drop(min(Prelude.ordInt)(indent)(countLeadingSpaces(s)))(s);
              };
              var isClosingFence = function (s) {
                  return Data_String.count(function (c) {
                      return Data_String.fromChar(c) === fence;
                  })(removeNonIndentingSpaces(s)) >= 3;
              };
              var sp = Data_List.span(function ($101) {
                  return !isClosingFence($101);
              })(ss);
              var codeLines = Prelude.map(Data_List.functorList)(removeIndentTo)(sp.init);
              return {
                  codeLines: codeLines, 
                  otherLines: Data_List.drop(1)(sp.rest)
              };
          };
      };
  };
  var codeFenceInfo = function ($102) {
      return Data_String.trim(Data_String.dropWhile(function ($103) {
          return isFenceChar(Data_String.fromChar($103));
      })($102));
  };
  var codeFenceChar = Data_String.take(1);
  var allChars = function (p) {
      return function ($104) {
          return Data_Foldable.all(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(p)(Data_String.split("")($104));
      };
  };
  var isRule = function (s) {
      return allChars(isRuleChar)(s) && (Data_String.length(s) >= 3 && allChars(Prelude["=="](Prelude.eqString)(Data_String.take(1)(s)))(s));
  };
  var isSetextHeader = function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof CText) {
              return Data_String.length(v) >= 1 && Data_Foldable.any(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(function (c) {
                  return allChars(Prelude["=="](Prelude.eqString)(c))(v);
              })([ "=", "-" ]);
          };
          return false;
      };
  };
  var parseContainers = function (acc) {
      return function (v) {
          if (v instanceof Data_List.Nil) {
              return Data_List.reverse(acc);
          };
          if (v instanceof Data_List.Cons) {
              if (allChars(isSpace)(v.value0)) {
                  return parseContainers(new Data_List.Cons(CBlank.value, acc))(v.value1);
              };
              if (isATXHeader(removeNonIndentingSpaces(v.value0))) {
                  var o = splitATXHeader(removeNonIndentingSpaces(v.value0));
                  return parseContainers(new Data_List.Cons(new CATXHeader(o.level, o.contents), acc))(v.value1);
              };
              if (isSetextHeader(removeNonIndentingSpaces(Data_String.trim(v.value0)))(Data_List.last(acc))) {
                  return parseContainers(new Data_List.Cons(CSetextHeader.create(setextLevel(removeNonIndentingSpaces(Data_String.trim(v.value0)))), acc))(v.value1);
              };
              if (isRule(removeNonIndentingSpaces(v.value0))) {
                  return parseContainers(new Data_List.Cons(CRule.value, acc))(v.value1);
              };
              if (isBlockquoteLine(v.value0)) {
                  var o = splitBlockquote(new Data_List.Cons(v.value0, v.value1));
                  return parseContainers(new Data_List.Cons(new CBlockquote(parseContainers(Data_Monoid.mempty(Data_List.monoidList))(o.blockquoteLines)), acc))(o.otherLines);
              };
              if (isListItemLine(v.value0)) {
                  var o = splitListItem(v.value0)(v.value1);
                  return parseContainers(new Data_List.Cons(CListItem.create(o.listType)(parseContainers(Data_Monoid.mempty(Data_List.monoidList))(o.listItemLines)), acc))(o.otherLines);
              };
              if (isIndentedChunk(v.value0)) {
                  var o = splitIndentedChunks(new Data_List.Cons(v.value0, v.value1));
                  return parseContainers(new Data_List.Cons(new CCodeBlockIndented(o.codeLines), acc))(o.otherLines);
              };
              if (isCodeFence(removeNonIndentingSpaces(v.value0))) {
                  var s1 = removeNonIndentingSpaces(v.value0);
                  var $$eval = isEvaluatedCode(s1);
                  var s2 = (function () {
                      if ($$eval) {
                          return Data_String.drop(1)(s1);
                      };
                      if (!$$eval) {
                          return s1;
                      };
                      throw new Error("Failed pattern match: " + [ $$eval.constructor.name ]);
                  })();
                  var info = codeFenceInfo(s2);
                  var ch = codeFenceChar(s2);
                  var o = splitCodeFence(countLeadingSpaces(v.value0))(ch)(v.value1);
                  return parseContainers(new Data_List.Cons(new CCodeBlockFenced($$eval, info, o.codeLines), acc))(o.otherLines);
              };
              if (isLinkReference(removeNonIndentingSpaces(v.value0))) {
                  var s1 = removeNonIndentingSpaces(v.value0);
                  var b = Data_Maybe_Unsafe.fromJust(Text_Markdown_SlamDown_Parser_References.parseLinkReference(s1));
                  return parseContainers(new Data_List.Cons(new CLinkReference(b), acc))(v.value1);
              };
              if (Prelude.otherwise) {
                  return parseContainers(new Data_List.Cons(new CText(v.value0), acc))(v.value1);
              };
          };
          throw new Error("Failed pattern match: " + [ acc.constructor.name, v.constructor.name ]);
      };
  };
  var parseMd = function (s) {
      var lines = Data_List.toList(Data_Foldable.foldableArray)(Data_String.split("\n")(Data_String.replace("\r")("")(tabsToSpaces(s))));
      var ctrs = parseContainers(Data_Monoid.mempty(Data_List.monoidList))(lines);
      var bs = parseBlocks(ctrs);
      return new Text_Markdown_SlamDown.SlamDown(bs);
  };
  exports["parseMd"] = parseMd;;
 
})(PS["Text.Markdown.SlamDown.Parser"] = PS["Text.Markdown.SlamDown.Parser"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Combinators = PS["Data.Argonaut.Combinators"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Text_Markdown_SlamDown = PS["Text.Markdown.SlamDown"];
  var Text_Markdown_SlamDown_Parser = PS["Text.Markdown.SlamDown.Parser"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Signal_Channel = PS["Signal.Channel"];
  var DOM = PS["DOM"];
  var Flare = PS["Flare"];
  var Test_FlareCheck = PS["Test.FlareCheck"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];     
  var Declaration = (function () {
      function Declaration(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Declaration.create = function (value0) {
          return function (value1) {
              return new Declaration(value0, value1);
          };
      };
      return Declaration;
  })();
  var Module = (function () {
      function Module(value0) {
          this.value0 = value0;
      };
      Module.create = function (value0) {
          return new Module(value0);
      };
      return Module;
  })();
  var Package = (function () {
      function Package(value0) {
          this.value0 = value0;
      };
      Package.create = function (value0) {
          return new Package(value0);
      };
      return Package;
  })();
  var render = function (v) {
      var inline = function (v1) {
          if (v1 instanceof Text_Markdown_SlamDown.Str) {
              return v1.value0;
          };
          if (v1 instanceof Text_Markdown_SlamDown.Space) {
              return " ";
          };
          if (v1 instanceof Text_Markdown_SlamDown.Code) {
              return "<code>" + (v1.value1 + "</code>");
          };
          if (v1 instanceof Text_Markdown_SlamDown.SoftBreak) {
              return " ";
          };
          throw new Error("Failed pattern match at Test.FlareDoc line 104, column 5 - line 105, column 5: " + [ v1.constructor.name ]);
      };
      var block = function (v1) {
          if (v1 instanceof Text_Markdown_SlamDown.Paragraph) {
              return "<p>" + (Data_Foldable.foldMap(Data_List.foldableList)(Data_Monoid.monoidString)(inline)(v1.value0) + "</p>");
          };
          if (v1 instanceof Text_Markdown_SlamDown.CodeBlock) {
              return "<pre>" + (Data_Foldable.foldMap(Data_List.foldableList)(Data_Monoid.monoidString)(function (v2) {
                  return v2 + "\n";
              })(v1.value1) + "</pre>");
          };
          throw new Error("Failed pattern match at Test.FlareDoc line 101, column 1 - line 102, column 1: " + [ v1.constructor.name ]);
      };
      return Data_Foldable.foldMap(Data_List.foldableList)(Data_Monoid.monoidString)(block)(v.value0);
  };
  var name = function (v) {
      return v.value0.name;
  };                                                                                                      
  var flareDoc$prime = function (dictInteractive) {
      return function (parentId) {
          return function (docMap) {
              return function (moduleName) {
                  return function (functionName) {
                      return function (x) {
                          var docString = Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup(moduleName)(docMap))(function (v) {
                              return Prelude.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup(functionName)(v))(function (v1) {
                                  return Prelude.bind(Data_Maybe.bindMaybe)(v1)(function (v2) {
                                      var parsed = render(Text_Markdown_SlamDown_Parser.parseMd(v2));
                                      return Prelude["return"](Data_Maybe.applicativeMaybe)(parsed);
                                  });
                              });
                          });
                          return Test_FlareCheck["flareDoc'"](dictInteractive)(parentId)(functionName)(docString)(x);
                      };
                  };
              };
          };
      };
  };
  var decodeDeclaration = new Data_Argonaut_Decode.DecodeJson(function (json) {
      return Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_Argonaut_Core.toObject(json))("declaration"))(function (obj) {
          return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_StrMap.lookup("title")(obj))("title"))(Data_Argonaut_Decode.decodeJson(Data_Argonaut_Decode.decodeJsonString)))(function (v) {
              return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_StrMap.lookup("comments")(obj))("comments"))(Data_Argonaut_Decode.decodeJson(Data_Argonaut_Decode.decodeJsonMaybe(Data_Argonaut_Decode.decodeJsonString))))(function (v1) {
                  return Prelude["return"](Data_Either.applicativeEither)(new Declaration(v, v1));
              });
          });
      });
  });
  var decodeModule = new Data_Argonaut_Decode.DecodeJson(function (json) {
      return Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_Argonaut_Core.toObject(json))("module"))(function (obj) {
          return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_StrMap.lookup("name")(obj))("name"))(Data_Argonaut_Decode.decodeJson(Data_Argonaut_Decode.decodeJsonString)))(function (v) {
              return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_StrMap.lookup("declarations")(obj))("declarations"))(Data_Argonaut_Decode.decodeJson(Data_Argonaut_Decode.decodeArray(decodeDeclaration))))(function (v1) {
                  return Prelude["return"](Data_Either.applicativeEither)(new Module({
                      name: v, 
                      declarations: v1
                  }));
              });
          });
      });
  });
  var decodePackage = new Data_Argonaut_Decode.DecodeJson(function (json) {
      return Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_Argonaut_Core.toObject(json))("package"))(function (obj) {
          return Prelude.bind(Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Combinators["?>>="](Data_StrMap.lookup("modules")(obj))("modules"))(Data_Argonaut_Decode.decodeJson(Data_Argonaut_Decode.decodeArray(decodeModule))))(function (v) {
              return Prelude["return"](Data_Either.applicativeEither)(new Package(v));
          });
      });
  });
  var parseModuleJSON = function (json) {
      var declTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      var declarationsStrMap = function (decls) {
          return Data_StrMap.fromFoldable(Data_Foldable.foldableArray)(Prelude["<$>"](Prelude.functorArray)(declTuple)(decls));
      };
      var modTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0.name, declarationsStrMap(v.value0.declarations));
      };
      return Prelude.bind(Data_Either.bindEither)(Data_Argonaut_Decode.decodeJson(decodePackage)(json))(function (v) {
          return Prelude["return"](Data_Either.applicativeEither)(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)(Prelude["<$>"](Prelude.functorArray)(modTuple)(v.value0)));
      });
  };
  var withPackage = function (packageDescription) {
      return function (run) {
          return Control_Monad_Aff.launchAff(Prelude.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableJson)(packageDescription))(function (v) {
              var $47 = parseModuleJSON(v.response);
              if ($47 instanceof Data_Either.Left) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log($47.value0));
              };
              if ($47 instanceof Data_Either.Right) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(run($47.value0));
              };
              throw new Error("Failed pattern match at Test.FlareDoc line 115, column 1 - line 118, column 1: " + [ $47.constructor.name ]);
          }));
      };
  };
  exports["flareDoc'"] = flareDoc$prime;
  exports["withPackage"] = withPackage;;
 
})(PS["Test.FlareDoc"] = PS["Test.FlareDoc"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Flare = PS["Flare"];
  var Flare_Smolder = PS["Flare.Smolder"];
  var Test_FlareDoc = PS["Test.FlareDoc"];
  var Color = PS["Color"];
  var Color_Blending = PS["Color.Blending"];
  var Color_Scale = PS["Color.Scale"];
  var Color_Scale_Perceptual = PS["Color.Scale.Perceptual"];
  var Color_Scheme_Harmonic = PS["Color.Scheme.Harmonic"];
  var Color_Scheme_MaterialDesign = PS["Color.Scheme.MaterialDesign"];
  var Color_Scheme_X11 = PS["Color.Scheme.X11"];
  var Test_FlareCheck = PS["Test.FlareCheck"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var TColorSpace = function (x) {
      return x;
  };
  var TColorScale = function (x) {
      return x;
  };
  var TColor = function (x) {
      return x;
  };
  var TBlendMode = function (x) {
      return x;
  };
  var Int255 = function (x) {
      return x;
  };
  var ColorList = (function () {
      function ColorList(value0) {
          this.value0 = value0;
      };
      ColorList.create = function (value0) {
          return new ColorList(value0);
      };
      return ColorList;
  })();
  var Grayscale = (function () {
      function Grayscale() {

      };
      Grayscale.value = new Grayscale();
      return Grayscale;
  })();
  var Spectrum = (function () {
      function Spectrum() {

      };
      Spectrum.value = new Spectrum();
      return Spectrum;
  })();
  var Magma = (function () {
      function Magma() {

      };
      Magma.value = new Magma();
      return Magma;
  })();
  var Inferno = (function () {
      function Inferno() {

      };
      Inferno.value = new Inferno();
      return Inferno;
  })();
  var Plasma = (function () {
      function Plasma() {

      };
      Plasma.value = new Plasma();
      return Plasma;
  })();
  var Viridis = (function () {
      function Viridis() {

      };
      Viridis.value = new Viridis();
      return Viridis;
  })();
  var textReadable = function (bgColor) {
      return function (textColor) {
          var ratio = Color.contrast(bgColor)(textColor);
          var width = Prelude.show(Prelude.showNumber)((ratio - 1.0) * 20.0);
          var isRead = Color.isReadable(bgColor)(textColor);
          var css = "background-color: " + (Color.cssStringHSLA(bgColor) + (";" + ("width: 380px; height: 50px;" + ("border: 1px solid black;" + ("padding: 10px; color: " + Color.cssStringHSLA(textColor))))));
          var barFg = Color.cssStringHSLA((function () {
              if (isRead) {
                  return Color_Scheme_X11.green;
              };
              if (!isRead) {
                  return Color_Scheme_X11.red;
              };
              throw new Error("Failed pattern match at Test.Interactive line 108, column 1 - line 127, column 1: " + [ isRead.constructor.name ]);
          })());
          var barBg = Color.cssStringHSLA(Color.black);
          var answ = (function () {
              if (isRead) {
                  return "yes";
              };
              if (!isRead) {
                  return "no";
              };
              throw new Error("Failed pattern match at Test.Interactive line 108, column 1 - line 127, column 1: " + [ isRead.constructor.name ]);
          })();
          return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css))(Text_Smolder_Markup.text("Is this text well readable?")))(function () {
              return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Prelude["<>"](Text_Smolder_Markup.semigroupMarkupM)(Text_Smolder_Markup.text("WCAG says: "))(Text_Smolder_HTML.b(Text_Smolder_Markup.text(answ)))))(function () {
                  return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style("width: 400px; height: 15px; background-color: " + barBg))(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style("width: " + (width + ("px; height: 15px;" + ("background-color: " + barFg)))))(Text_Smolder_Markup.text("")));
              });
          });
      };
  };
  var runTColor = function (v) {
      return v;
  };
  var modeToString = function (v) {
      if (v instanceof Color_Blending.Multiply) {
          return "Multiply";
      };
      if (v instanceof Color_Blending.Screen) {
          return "Screen";
      };
      if (v instanceof Color_Blending.Overlay) {
          return "Overlay";
      };
      throw new Error("Failed pattern match at Test.Interactive line 57, column 1 - line 58, column 1: " + [ v.constructor.name ]);
  };
  var interactiveTColorScale = new Test_FlareCheck.Interactive(function (ui) {
      var css = function (scale) {
          return "background: linear-gradient(to right, " + (Color_Scale.cssColorStops(scale) + (");" + "width: 100%; height: 30px;"));
      };
      var pretty = function (v) {
          return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css(v)))(Text_Smolder_Markup.text(""));
      };
      return Prelude["<$>"](Flare.functorUI)(function ($112) {
          return Test_FlareCheck.SetHTML.create(pretty($112));
      })(ui);
  });
  var flare1 = Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(textReadable)(Flare.color("Background")(Color_Scheme_X11.mediumvioletred)))(Flare.color("Text")(Color.black));
  var flammableTColorSpace = new Test_FlareCheck.Flammable((function () {
      var toString = function (v) {
          if (v instanceof Color.HSL) {
              return "HSL";
          };
          if (v instanceof Color.RGB) {
              return "RGB";
          };
          if (v instanceof Color.LCh) {
              return "LCh";
          };
          if (v instanceof Color.Lab) {
              return "Lab";
          };
          throw new Error("Failed pattern match at Test.Interactive line 69, column 7 - line 70, column 7: " + [ v.constructor.name ]);
      };
      return Prelude["<$>"](Flare.functorUI)(TColorSpace)(Flare.select("ColorSpace")(Color.HSL.value)([ Color.RGB.value, Color.LCh.value, Color.Lab.value ])(toString));
  })());
  var flammableTColorScale = new Test_FlareCheck.Flammable((function () {
      var toString = function (v) {
          if (v instanceof Grayscale) {
              return "grayscale";
          };
          if (v instanceof Spectrum) {
              return "spectrum";
          };
          if (v instanceof Magma) {
              return "magma";
          };
          if (v instanceof Inferno) {
              return "inferno";
          };
          if (v instanceof Plasma) {
              return "plasma";
          };
          if (v instanceof Viridis) {
              return "viridis";
          };
          throw new Error("Failed pattern match at Test.Interactive line 94, column 7 - line 95, column 7: " + [ v.constructor.name ]);
      };
      var toColorScale = function (v) {
          if (v instanceof Grayscale) {
              return Color_Scale.grayscale;
          };
          if (v instanceof Spectrum) {
              return Color_Scale.spectrum;
          };
          if (v instanceof Magma) {
              return Color_Scale_Perceptual.magma;
          };
          if (v instanceof Inferno) {
              return Color_Scale_Perceptual.inferno;
          };
          if (v instanceof Plasma) {
              return Color_Scale_Perceptual.plasma;
          };
          if (v instanceof Viridis) {
              return Color_Scale_Perceptual.viridis;
          };
          throw new Error("Failed pattern match at Test.Interactive line 82, column 1 - line 101, column 1: " + [ v.constructor.name ]);
      };
      return Prelude["<$>"](Flare.functorUI)(function ($113) {
          return TColorScale(toColorScale($113));
      })(Flare.fieldset("ColorScale")(Flare.select("Choose")(Grayscale.value)([ Spectrum.value, Magma.value, Inferno.value, Plasma.value, Viridis.value ])(toString)));
  })());
  var flammableTColor = new Test_FlareCheck.Flammable(Prelude["<$>"](Flare.functorUI)(TColor)(Flare.fieldset("Color")(Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(Color.hsl)(Flare.numberSlider("Hue")(0.0)(360.0)(0.1)(231.0)))(Flare.numberSlider("Saturation")(0.0)(1.0)(1.0e-3)(0.48)))(Flare.numberSlider("Lightness")(0.0)(1.0)(1.0e-3)(0.48)))));
  var flammableTBlendMode = new Test_FlareCheck.Flammable(Prelude["<$>"](Flare.functorUI)(TBlendMode)(Flare.select("BlendMode")(Color_Blending.Multiply.value)([ Color_Blending.Screen.value, Color_Blending.Overlay.value ])(modeToString)));
  var flammableInt255 = new Test_FlareCheck.Flammable(Prelude["<$>"](Flare.functorUI)(Int255)(Flare.intSlider("Int")(0)(255)(100)));
  var colorBox = function (c) {
      var repr = Color.cssStringHSLA(c);
      var css = "background-color: " + (repr + (";" + ("width: 260px; height: 50px; display: inline-block;" + ("margin-top: 10px; margin-right: 10px; border: 1px solid black;" + ("padding: 5px; color: " + Color.cssStringHSLA(Color.textColor(c)))))));
      return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css))(Text_Smolder_HTML.code(Text_Smolder_Markup.text(repr)));
  };
  var interactiveColorList = new Test_FlareCheck.Interactive(function (ui) {
      var pretty = function (v) {
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(colorBox)(v.value0);
      };
      return Prelude["<$>"](Flare.functorUI)(function ($114) {
          return Test_FlareCheck.SetHTML.create(pretty($114));
      })(ui);
  });
  var interactiveTColor = new Test_FlareCheck.Interactive(function (ui) {
      return Prelude["<$>"](Flare.functorUI)(function ($115) {
          return Test_FlareCheck.SetHTML.create(colorBox(runTColor($115)));
      })(ui);
  });
  var blendUI = function (c1) {
      return function (c2) {
          return function (mode) {
              var css3 = "background-color: " + (Color.cssStringHSLA(Color_Blending.blend(mode)(c1)(c2)) + (";" + ("width: 50px; height: 50px; border: 1px solid black;" + "position: absolute; top: 50px; left: 50px;")));
              var css2 = "background-color: " + (Color.cssStringHSLA(c2) + (";" + ("width: 100px; height: 100px; border: 1px solid black;" + "position: absolute; top: 50px; left: 50px;")));
              var css1 = "background-color: " + (Color.cssStringHSLA(c1) + (";" + ("width: 100px; height: 100px; border: 1px solid black;" + "position: absolute; top: 0px; left: 0px;")));
              return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Text_Smolder_Markup.text("These are three separate divs (no transparency):")))(function () {
                  return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style("position: relative; height: 150px;"))(Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css1))(Text_Smolder_Markup.text("")))(function () {
                      return Prelude.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css2))(Text_Smolder_Markup.text("")))(function () {
                          return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(css3))(Text_Smolder_Markup.text(""));
                      });
                  }));
              });
          };
      };
  };
  var flare2 = Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(blendUI)(Flare.color("Background")(Color_Scheme_X11.royalblue)))(Flare.color("Foreground")(Color_Scheme_X11.gold)))(Flare.select("BlendMode")(Color_Blending.Multiply.value)([ Color_Blending.Screen.value, Color_Blending.Overlay.value ])(modeToString));
  var main = function __do() {
      Test_FlareDoc.withPackage("purescript-colors.json")(function (dict) {
          var doc = function (dictInteractive) {
              return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-color")(dict)("Color");
          };
          return function __do() {
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColor))("hsl")(Prelude.id(Prelude.categoryFn))();
              doc(Test_FlareCheck.interactiveFunction(flammableInt255)(Test_FlareCheck.interactiveFunction(flammableInt255)(Test_FlareCheck.interactiveFunction(flammableInt255)(interactiveTColor))))("rgb")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Color.rgb(v)(v1)(v2);
                      };
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveString))("toHexString")(function (v) {
                  return Color.toHexString(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveString))("cssStringHSLA")(function (v) {
                  return Color.cssStringHSLA(v);
              })();
              doc(interactiveTColor)("black")(Color.black)();
              doc(interactiveTColor)("white")(Color.white)();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(interactiveTColor))("graytone")(function (v) {
                  return Color.graytone(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("complementary")(function (v) {
                  return new ColorList([ v, Color.complementary(v) ]);
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("lighten")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.lighten(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("darken")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.darken(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("saturate")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.saturate(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList)))("desaturate")(function (v) {
                  return function (v1) {
                      return new ColorList([ v1, Color.desaturate(v)(v1) ]);
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColorSpace)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(interactiveColorList)))))("mix")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return function (v3) {
                              return new ColorList([ v1, v2, Color.mix(v)(v1)(v2)(v3) ]);
                          };
                      };
                  };
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveNumber))("brightness")(function (v) {
                  return Color.brightness(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveNumber))("luminance")(function (v) {
                  return Color.luminance(v);
              })();
              doc(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("textColor")(function (v) {
                  return new ColorList([ v, Color.textColor(v) ]);
              })();
              var docblend = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-blending")(dict)("Color.Blending");
              };
              docblend(Test_FlareCheck.interactiveFunction(flammableTBlendMode)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))))("blend")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return new ColorList([ v1, v2, Color_Blending.blend(v)(v1)(v2) ]);
                      };
                  };
              })();
              var docscale = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scale")(dict)("Color.Scale");
              };
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorSpace)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColorScale))))("colorScale")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return TColorScale(Color_Scale.colorScale(v)(v1)(Data_List.Nil.value)(v2));
                      };
                  };
              })();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorScale)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveTColorScale))))("addStop")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return TColorScale(Color_Scale.addStop(v)(v2)(v1));
                      };
                  };
              })();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorScale)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallNumber)(interactiveTColor)))("sample")(function (v) {
                  return function (v1) {
                      return Color_Scale.sample(v)(v1);
                  };
              })();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorScale)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableSmallInt)(interactiveColorList)))("colors")(function (v) {
                  return function (v1) {
                      return new ColorList(Data_List.fromList(Data_Unfoldable.unfoldableArray)(Color_Scale.colors(v)(v1)));
                  };
              })();
              docscale(interactiveTColorScale)("grayscale")(Color_Scale.grayscale)();
              docscale(interactiveTColorScale)("spectrum")(Color_Scale.spectrum)();
              docscale(interactiveTColorScale)("hot")(Color_Scale.hot)();
              docscale(interactiveTColorScale)("cool")(Color_Scale.cool)();
              docscale(Test_FlareCheck.interactiveFunction(flammableTColorSpace)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveFunction(flammableTColor)(Test_FlareCheck.interactiveString))))("cssColorStops")(function (v) {
                  return function (v1) {
                      return function (v2) {
                          return Color_Scale.cssColorStops(Color_Scale.colorScale(v)(v1)(Data_List.Nil.value)(v2));
                      };
                  };
              })();
              var docscaleperc = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scale-perc")(dict)("Color.Scale.Perceptual");
              };
              docscaleperc(interactiveTColorScale)("magma")(Color_Scale_Perceptual.magma)();
              docscaleperc(interactiveTColorScale)("inferno")(Color_Scale_Perceptual.inferno)();
              docscaleperc(interactiveTColorScale)("plasma")(Color_Scale_Perceptual.plasma)();
              docscaleperc(interactiveTColorScale)("viridis")(Color_Scale_Perceptual.viridis)();
              var docharm = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scheme-harm")(dict)("Color.Scheme.Harmonic");
              };
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("analogous")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.analogous(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("triad")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.triad(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("splitComplementary")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.splitComplementary(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("shades")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.shades(v));
              })();
              docharm(Test_FlareCheck.interactiveFunction(flammableTColor)(interactiveColorList))("tetrad")(function (v) {
                  return ColorList.create(Color_Scheme_Harmonic.tetrad(v));
              })();
              var docmd = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scheme-md")(dict)("Color.Scheme.MaterialDesign");
              };
              docmd(interactiveTColor)("red")(Color_Scheme_MaterialDesign.red)();
              docmd(interactiveTColor)("pink")(Color_Scheme_MaterialDesign.pink)();
              docmd(interactiveTColor)("purple")(Color_Scheme_MaterialDesign.purple)();
              docmd(interactiveTColor)("deepPurple")(Color_Scheme_MaterialDesign.deepPurple)();
              docmd(interactiveTColor)("indigo")(Color_Scheme_MaterialDesign.indigo)();
              docmd(interactiveTColor)("blue")(Color_Scheme_MaterialDesign.blue)();
              docmd(interactiveTColor)("lightBlue")(Color_Scheme_MaterialDesign.lightBlue)();
              docmd(interactiveTColor)("cyan")(Color_Scheme_MaterialDesign.cyan)();
              docmd(interactiveTColor)("teal")(Color_Scheme_MaterialDesign.teal)();
              docmd(interactiveTColor)("green")(Color_Scheme_MaterialDesign.green)();
              docmd(interactiveTColor)("lightGreen")(Color_Scheme_MaterialDesign.lightGreen)();
              docmd(interactiveTColor)("lime")(Color_Scheme_MaterialDesign.lime)();
              docmd(interactiveTColor)("yellow")(Color_Scheme_MaterialDesign.yellow)();
              docmd(interactiveTColor)("amber")(Color_Scheme_MaterialDesign.amber)();
              docmd(interactiveTColor)("orange")(Color_Scheme_MaterialDesign.orange)();
              docmd(interactiveTColor)("deepOrange")(Color_Scheme_MaterialDesign.deepOrange)();
              docmd(interactiveTColor)("brown")(Color_Scheme_MaterialDesign.brown)();
              docmd(interactiveTColor)("grey")(Color_Scheme_MaterialDesign.grey)();
              docmd(interactiveTColor)("blueGrey")(Color_Scheme_MaterialDesign.blueGrey)();
              var docx11 = function (dictInteractive) {
                  return Test_FlareDoc["flareDoc'"](dictInteractive)("doc-scheme-x11")(dict)("Color.Scheme.X11");
              };
              docx11(interactiveTColor)("aliceblue")(Color_Scheme_X11.aliceblue)();
              docx11(interactiveTColor)("antiquewhite")(Color_Scheme_X11.antiquewhite)();
              docx11(interactiveTColor)("aqua")(Color_Scheme_X11.aqua)();
              docx11(interactiveTColor)("aquamarine")(Color_Scheme_X11.aquamarine)();
              docx11(interactiveTColor)("azure")(Color_Scheme_X11.azure)();
              docx11(interactiveTColor)("beige")(Color_Scheme_X11.beige)();
              docx11(interactiveTColor)("bisque")(Color_Scheme_X11.bisque)();
              docx11(interactiveTColor)("blanchedalmond")(Color_Scheme_X11.blanchedalmond)();
              docx11(interactiveTColor)("blue")(Color_Scheme_X11.blue)();
              docx11(interactiveTColor)("blueviolet")(Color_Scheme_X11.blueviolet)();
              docx11(interactiveTColor)("brown")(Color_Scheme_X11.brown)();
              docx11(interactiveTColor)("burlywood")(Color_Scheme_X11.burlywood)();
              docx11(interactiveTColor)("cadetblue")(Color_Scheme_X11.cadetblue)();
              docx11(interactiveTColor)("chartreuse")(Color_Scheme_X11.chartreuse)();
              docx11(interactiveTColor)("chocolate")(Color_Scheme_X11.chocolate)();
              docx11(interactiveTColor)("coral")(Color_Scheme_X11.coral)();
              docx11(interactiveTColor)("cornflowerblue")(Color_Scheme_X11.cornflowerblue)();
              docx11(interactiveTColor)("cornsilk")(Color_Scheme_X11.cornsilk)();
              docx11(interactiveTColor)("crimson")(Color_Scheme_X11.crimson)();
              docx11(interactiveTColor)("cyan")(Color_Scheme_X11.cyan)();
              docx11(interactiveTColor)("darkblue")(Color_Scheme_X11.darkblue)();
              docx11(interactiveTColor)("darkcyan")(Color_Scheme_X11.darkcyan)();
              docx11(interactiveTColor)("darkgoldenrod")(Color_Scheme_X11.darkgoldenrod)();
              docx11(interactiveTColor)("darkgray")(Color_Scheme_X11.darkgray)();
              docx11(interactiveTColor)("darkgreen")(Color_Scheme_X11.darkgreen)();
              docx11(interactiveTColor)("darkgrey")(Color_Scheme_X11.darkgrey)();
              docx11(interactiveTColor)("darkkhaki")(Color_Scheme_X11.darkkhaki)();
              docx11(interactiveTColor)("darkmagenta")(Color_Scheme_X11.darkmagenta)();
              docx11(interactiveTColor)("darkolivegreen")(Color_Scheme_X11.darkolivegreen)();
              docx11(interactiveTColor)("darkorange")(Color_Scheme_X11.darkorange)();
              docx11(interactiveTColor)("darkorchid")(Color_Scheme_X11.darkorchid)();
              docx11(interactiveTColor)("darkred")(Color_Scheme_X11.darkred)();
              docx11(interactiveTColor)("darksalmon")(Color_Scheme_X11.darksalmon)();
              docx11(interactiveTColor)("darkseagreen")(Color_Scheme_X11.darkseagreen)();
              docx11(interactiveTColor)("darkslateblue")(Color_Scheme_X11.darkslateblue)();
              docx11(interactiveTColor)("darkslategray")(Color_Scheme_X11.darkslategray)();
              docx11(interactiveTColor)("darkslategrey")(Color_Scheme_X11.darkslategrey)();
              docx11(interactiveTColor)("darkturquoise")(Color_Scheme_X11.darkturquoise)();
              docx11(interactiveTColor)("darkviolet")(Color_Scheme_X11.darkviolet)();
              docx11(interactiveTColor)("deeppink")(Color_Scheme_X11.deeppink)();
              docx11(interactiveTColor)("deepskyblue")(Color_Scheme_X11.deepskyblue)();
              docx11(interactiveTColor)("dimgray")(Color_Scheme_X11.dimgray)();
              docx11(interactiveTColor)("dimgrey")(Color_Scheme_X11.dimgrey)();
              docx11(interactiveTColor)("dodgerblue")(Color_Scheme_X11.dodgerblue)();
              docx11(interactiveTColor)("firebrick")(Color_Scheme_X11.firebrick)();
              docx11(interactiveTColor)("floralwhite")(Color_Scheme_X11.floralwhite)();
              docx11(interactiveTColor)("forestgreen")(Color_Scheme_X11.forestgreen)();
              docx11(interactiveTColor)("fuchsia")(Color_Scheme_X11.fuchsia)();
              docx11(interactiveTColor)("gainsboro")(Color_Scheme_X11.gainsboro)();
              docx11(interactiveTColor)("ghostwhite")(Color_Scheme_X11.ghostwhite)();
              docx11(interactiveTColor)("gold")(Color_Scheme_X11.gold)();
              docx11(interactiveTColor)("goldenrod")(Color_Scheme_X11.goldenrod)();
              docx11(interactiveTColor)("gray")(Color_Scheme_X11.gray)();
              docx11(interactiveTColor)("green")(Color_Scheme_X11.green)();
              docx11(interactiveTColor)("greenyellow")(Color_Scheme_X11.greenyellow)();
              docx11(interactiveTColor)("grey")(Color_Scheme_X11.grey)();
              docx11(interactiveTColor)("honeydew")(Color_Scheme_X11.honeydew)();
              docx11(interactiveTColor)("hotpink")(Color_Scheme_X11.hotpink)();
              docx11(interactiveTColor)("indianred")(Color_Scheme_X11.indianred)();
              docx11(interactiveTColor)("indigo")(Color_Scheme_X11.indigo)();
              docx11(interactiveTColor)("ivory")(Color_Scheme_X11.ivory)();
              docx11(interactiveTColor)("khaki")(Color_Scheme_X11.khaki)();
              docx11(interactiveTColor)("lavender")(Color_Scheme_X11.lavender)();
              docx11(interactiveTColor)("lavenderblush")(Color_Scheme_X11.lavenderblush)();
              docx11(interactiveTColor)("lawngreen")(Color_Scheme_X11.lawngreen)();
              docx11(interactiveTColor)("lemonchiffon")(Color_Scheme_X11.lemonchiffon)();
              docx11(interactiveTColor)("lightblue")(Color_Scheme_X11.lightblue)();
              docx11(interactiveTColor)("lightcoral")(Color_Scheme_X11.lightcoral)();
              docx11(interactiveTColor)("lightcyan")(Color_Scheme_X11.lightcyan)();
              docx11(interactiveTColor)("lightgoldenrodyellow")(Color_Scheme_X11.lightgoldenrodyellow)();
              docx11(interactiveTColor)("lightgray")(Color_Scheme_X11.lightgray)();
              docx11(interactiveTColor)("lightgreen")(Color_Scheme_X11.lightgreen)();
              docx11(interactiveTColor)("lightgrey")(Color_Scheme_X11.lightgrey)();
              docx11(interactiveTColor)("lightpink")(Color_Scheme_X11.lightpink)();
              docx11(interactiveTColor)("lightsalmon")(Color_Scheme_X11.lightsalmon)();
              docx11(interactiveTColor)("lightseagreen")(Color_Scheme_X11.lightseagreen)();
              docx11(interactiveTColor)("lightskyblue")(Color_Scheme_X11.lightskyblue)();
              docx11(interactiveTColor)("lightslategray")(Color_Scheme_X11.lightslategray)();
              docx11(interactiveTColor)("lightslategrey")(Color_Scheme_X11.lightslategrey)();
              docx11(interactiveTColor)("lightsteelblue")(Color_Scheme_X11.lightsteelblue)();
              docx11(interactiveTColor)("lightyellow")(Color_Scheme_X11.lightyellow)();
              docx11(interactiveTColor)("lime")(Color_Scheme_X11.lime)();
              docx11(interactiveTColor)("limegreen")(Color_Scheme_X11.limegreen)();
              docx11(interactiveTColor)("linen")(Color_Scheme_X11.linen)();
              docx11(interactiveTColor)("magenta")(Color_Scheme_X11.magenta)();
              docx11(interactiveTColor)("maroon")(Color_Scheme_X11.maroon)();
              docx11(interactiveTColor)("mediumaquamarine")(Color_Scheme_X11.mediumaquamarine)();
              docx11(interactiveTColor)("mediumblue")(Color_Scheme_X11.mediumblue)();
              docx11(interactiveTColor)("mediumorchid")(Color_Scheme_X11.mediumorchid)();
              docx11(interactiveTColor)("mediumpurple")(Color_Scheme_X11.mediumpurple)();
              docx11(interactiveTColor)("mediumseagreen")(Color_Scheme_X11.mediumseagreen)();
              docx11(interactiveTColor)("mediumslateblue")(Color_Scheme_X11.mediumslateblue)();
              docx11(interactiveTColor)("mediumspringgreen")(Color_Scheme_X11.mediumspringgreen)();
              docx11(interactiveTColor)("mediumturquoise")(Color_Scheme_X11.mediumturquoise)();
              docx11(interactiveTColor)("mediumvioletred")(Color_Scheme_X11.mediumvioletred)();
              docx11(interactiveTColor)("midnightblue")(Color_Scheme_X11.midnightblue)();
              docx11(interactiveTColor)("mintcream")(Color_Scheme_X11.mintcream)();
              docx11(interactiveTColor)("mistyrose")(Color_Scheme_X11.mistyrose)();
              docx11(interactiveTColor)("moccasin")(Color_Scheme_X11.moccasin)();
              docx11(interactiveTColor)("navajowhite")(Color_Scheme_X11.navajowhite)();
              docx11(interactiveTColor)("navy")(Color_Scheme_X11.navy)();
              docx11(interactiveTColor)("oldlace")(Color_Scheme_X11.oldlace)();
              docx11(interactiveTColor)("olive")(Color_Scheme_X11.olive)();
              docx11(interactiveTColor)("olivedrab")(Color_Scheme_X11.olivedrab)();
              docx11(interactiveTColor)("orange")(Color_Scheme_X11.orange)();
              docx11(interactiveTColor)("orangered")(Color_Scheme_X11.orangered)();
              docx11(interactiveTColor)("orchid")(Color_Scheme_X11.orchid)();
              docx11(interactiveTColor)("palegoldenrod")(Color_Scheme_X11.palegoldenrod)();
              docx11(interactiveTColor)("palegreen")(Color_Scheme_X11.palegreen)();
              docx11(interactiveTColor)("paleturquoise")(Color_Scheme_X11.paleturquoise)();
              docx11(interactiveTColor)("palevioletred")(Color_Scheme_X11.palevioletred)();
              docx11(interactiveTColor)("papayawhip")(Color_Scheme_X11.papayawhip)();
              docx11(interactiveTColor)("peachpuff")(Color_Scheme_X11.peachpuff)();
              docx11(interactiveTColor)("peru")(Color_Scheme_X11.peru)();
              docx11(interactiveTColor)("pink")(Color_Scheme_X11.pink)();
              docx11(interactiveTColor)("plum")(Color_Scheme_X11.plum)();
              docx11(interactiveTColor)("powderblue")(Color_Scheme_X11.powderblue)();
              docx11(interactiveTColor)("purple")(Color_Scheme_X11.purple)();
              docx11(interactiveTColor)("red")(Color_Scheme_X11.red)();
              docx11(interactiveTColor)("rosybrown")(Color_Scheme_X11.rosybrown)();
              docx11(interactiveTColor)("royalblue")(Color_Scheme_X11.royalblue)();
              docx11(interactiveTColor)("saddlebrown")(Color_Scheme_X11.saddlebrown)();
              docx11(interactiveTColor)("salmon")(Color_Scheme_X11.salmon)();
              docx11(interactiveTColor)("sandybrown")(Color_Scheme_X11.sandybrown)();
              docx11(interactiveTColor)("seagreen")(Color_Scheme_X11.seagreen)();
              docx11(interactiveTColor)("seashell")(Color_Scheme_X11.seashell)();
              docx11(interactiveTColor)("sienna")(Color_Scheme_X11.sienna)();
              docx11(interactiveTColor)("silver")(Color_Scheme_X11.silver)();
              docx11(interactiveTColor)("skyblue")(Color_Scheme_X11.skyblue)();
              docx11(interactiveTColor)("slateblue")(Color_Scheme_X11.slateblue)();
              docx11(interactiveTColor)("slategray")(Color_Scheme_X11.slategray)();
              docx11(interactiveTColor)("slategrey")(Color_Scheme_X11.slategrey)();
              docx11(interactiveTColor)("snow")(Color_Scheme_X11.snow)();
              docx11(interactiveTColor)("springgreen")(Color_Scheme_X11.springgreen)();
              docx11(interactiveTColor)("steelblue")(Color_Scheme_X11.steelblue)();
              docx11(interactiveTColor)("tan")(Color_Scheme_X11.tan)();
              docx11(interactiveTColor)("teal")(Color_Scheme_X11.teal)();
              docx11(interactiveTColor)("thistle")(Color_Scheme_X11.thistle)();
              docx11(interactiveTColor)("tomato")(Color_Scheme_X11.tomato)();
              docx11(interactiveTColor)("turquoise")(Color_Scheme_X11.turquoise)();
              docx11(interactiveTColor)("violet")(Color_Scheme_X11.violet)();
              docx11(interactiveTColor)("wheat")(Color_Scheme_X11.wheat)();
              docx11(interactiveTColor)("whitesmoke")(Color_Scheme_X11.whitesmoke)();
              docx11(interactiveTColor)("yellow")(Color_Scheme_X11.yellow)();
              return docx11(interactiveTColor)("yellowgreen")(Color_Scheme_X11.yellowgreen)();
          };
      })();
      Flare_Smolder.runFlareHTML("input1")("output1")(flare1)();
      Flare_Smolder.runFlareHTML("input2")("output2")(flare2)();
      var scale = function (mode) {
          return Color_Scale.uniformScale(Data_List.foldableList)(mode)(Color.fromInt(1583415))(Data_List.Nil.value)(Color.fromInt(14643070));
      };
      return Test_FlareCheck["flareCheck'"](Test_FlareCheck.interactiveFunction(flammableTColorSpace)(interactiveColorList))("output3")("Gradient")(function (v) {
          return new ColorList(Data_List.fromList(Data_Unfoldable.unfoldableArray)(Color_Scale.colors(scale(v))(6)));
      })();
  };
  exports["main"] = main;;
 
})(PS["Test.Interactive"] = PS["Test.Interactive"] || {});

PS["Test.Interactive"].main();
